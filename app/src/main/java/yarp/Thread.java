/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package yarp;

public class Thread {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected Thread(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Thread obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        yarpJNI.delete_Thread(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    yarpJNI.Thread_change_ownership(this, swigCPtr, false);
  }

  public void swigTakeOwnership() {
    swigCMemOwn = true;
    yarpJNI.Thread_change_ownership(this, swigCPtr, true);
  }

  public Thread() {
    this(yarpJNI.new_Thread(), true);
    yarpJNI.Thread_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  public void run() {
    yarpJNI.Thread_run(swigCPtr, this);
  }

  public void onStop() {
    if (getClass() == Thread.class) yarpJNI.Thread_onStop(swigCPtr, this); else yarpJNI.Thread_onStopSwigExplicitThread(swigCPtr, this);
  }

  public boolean start() {
    return yarpJNI.Thread_start(swigCPtr, this);
  }

  public boolean stop() {
    return yarpJNI.Thread_stop(swigCPtr, this);
  }

  public void beforeStart() {
    if (getClass() == Thread.class) yarpJNI.Thread_beforeStart(swigCPtr, this); else yarpJNI.Thread_beforeStartSwigExplicitThread(swigCPtr, this);
  }

  public void afterStart(boolean success) {
    if (getClass() == Thread.class) yarpJNI.Thread_afterStart(swigCPtr, this, success); else yarpJNI.Thread_afterStartSwigExplicitThread(swigCPtr, this, success);
  }

  public boolean threadInit() {
    return (getClass() == Thread.class) ? yarpJNI.Thread_threadInit(swigCPtr, this) : yarpJNI.Thread_threadInitSwigExplicitThread(swigCPtr, this);
  }

  public void threadRelease() {
    if (getClass() == Thread.class) yarpJNI.Thread_threadRelease(swigCPtr, this); else yarpJNI.Thread_threadReleaseSwigExplicitThread(swigCPtr, this);
  }

  public boolean isStopping() {
    return yarpJNI.Thread_isStopping(swigCPtr, this);
  }

  public boolean isRunning() {
    return yarpJNI.Thread_isRunning(swigCPtr, this);
  }

  public void setOptions(int stackSize) {
    yarpJNI.Thread_setOptions__SWIG_0(swigCPtr, this, stackSize);
  }

  public void setOptions() {
    yarpJNI.Thread_setOptions__SWIG_1(swigCPtr, this);
  }

  public static int getCount() {
    return yarpJNI.Thread_getCount();
  }

  public int getKey() {
    return yarpJNI.Thread_getKey(swigCPtr, this);
  }

  public static int getKeyOfCaller() {
    return yarpJNI.Thread_getKeyOfCaller();
  }

  public int setPriority(int priority, int policy) {
    return yarpJNI.Thread_setPriority__SWIG_0(swigCPtr, this, priority, policy);
  }

  public int setPriority(int priority) {
    return yarpJNI.Thread_setPriority__SWIG_1(swigCPtr, this, priority);
  }

  public int getPriority() {
    return yarpJNI.Thread_getPriority(swigCPtr, this);
  }

  public static void setDefaultStackSize(int stackSize) {
    yarpJNI.Thread_setDefaultStackSize(stackSize);
  }

  public boolean join(double seconds) {
    return yarpJNI.Thread_join__SWIG_0(swigCPtr, this, seconds);
  }

  public boolean join() {
    return yarpJNI.Thread_join__SWIG_1(swigCPtr, this);
  }

}
