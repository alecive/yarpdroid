/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package yarp;

public class BufferedPortImageRgba extends Contactable {
  private long swigCPtr;

  protected BufferedPortImageRgba(long cPtr, boolean cMemoryOwn) {
    super(yarpJNI.BufferedPortImageRgba_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(BufferedPortImageRgba obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        yarpJNI.delete_BufferedPortImageRgba(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public BufferedPortImageRgba() {
    this(yarpJNI.new_BufferedPortImageRgba__SWIG_0(), true);
  }

  public BufferedPortImageRgba(Port port) {
    this(yarpJNI.new_BufferedPortImageRgba__SWIG_1(Port.getCPtr(port), port), true);
  }

  public boolean addOutput(String name) {
    return yarpJNI.BufferedPortImageRgba_addOutput__SWIG_0(swigCPtr, this, name);
  }

  public boolean addOutput(String name, String carrier) {
    return yarpJNI.BufferedPortImageRgba_addOutput__SWIG_1(swigCPtr, this, name, carrier);
  }

  public boolean addOutput(Contact contact) {
    return yarpJNI.BufferedPortImageRgba_addOutput__SWIG_2(swigCPtr, this, Contact.getCPtr(contact), contact);
  }

  public void close() {
    yarpJNI.BufferedPortImageRgba_close(swigCPtr, this);
  }

  public void interrupt() {
    yarpJNI.BufferedPortImageRgba_interrupt(swigCPtr, this);
  }

  public void resume() {
    yarpJNI.BufferedPortImageRgba_resume(swigCPtr, this);
  }

  public int getPendingReads() {
    return yarpJNI.BufferedPortImageRgba_getPendingReads(swigCPtr, this);
  }

  public Contact where() {
    return new Contact(yarpJNI.BufferedPortImageRgba_where(swigCPtr, this), true);
  }

  public String getName() {
    return yarpJNI.BufferedPortImageRgba_getName(swigCPtr, this);
  }

  public ImageRgba prepare() {
    return new ImageRgba(yarpJNI.BufferedPortImageRgba_prepare(swigCPtr, this), false);
  }

  public boolean unprepare() {
    return yarpJNI.BufferedPortImageRgba_unprepare(swigCPtr, this);
  }

  public void write(boolean forceStrict) {
    yarpJNI.BufferedPortImageRgba_write__SWIG_0(swigCPtr, this, forceStrict);
  }

  public void write() {
    yarpJNI.BufferedPortImageRgba_write__SWIG_1(swigCPtr, this);
  }

  public void writeStrict() {
    yarpJNI.BufferedPortImageRgba_writeStrict(swigCPtr, this);
  }

  public void waitForWrite() {
    yarpJNI.BufferedPortImageRgba_waitForWrite(swigCPtr, this);
  }

  public void setStrict(boolean strict) {
    yarpJNI.BufferedPortImageRgba_setStrict__SWIG_0(swigCPtr, this, strict);
  }

  public void setStrict() {
    yarpJNI.BufferedPortImageRgba_setStrict__SWIG_1(swigCPtr, this);
  }

  public ImageRgba read(boolean shouldWait) {
    long cPtr = yarpJNI.BufferedPortImageRgba_read__SWIG_0(swigCPtr, this, shouldWait);
    return (cPtr == 0) ? null : new ImageRgba(cPtr, false);
  }

  public ImageRgba read() {
    long cPtr = yarpJNI.BufferedPortImageRgba_read__SWIG_1(swigCPtr, this);
    return (cPtr == 0) ? null : new ImageRgba(cPtr, false);
  }

  public ImageRgba lastRead() {
    long cPtr = yarpJNI.BufferedPortImageRgba_lastRead(swigCPtr, this);
    return (cPtr == 0) ? null : new ImageRgba(cPtr, false);
  }

  public boolean isClosed() {
    return yarpJNI.BufferedPortImageRgba_isClosed(swigCPtr, this);
  }

  public void setReplier(PortReader reader) {
    yarpJNI.BufferedPortImageRgba_setReplier(swigCPtr, this, PortReader.getCPtr(reader), reader);
  }

  public void setReader(PortReader reader) {
    yarpJNI.BufferedPortImageRgba_setReader(swigCPtr, this, PortReader.getCPtr(reader), reader);
  }

  public void setAdminReader(PortReader reader) {
    yarpJNI.BufferedPortImageRgba_setAdminReader(swigCPtr, this, PortReader.getCPtr(reader), reader);
  }

  public void onRead(ImageRgba datum) {
    yarpJNI.BufferedPortImageRgba_onRead(swigCPtr, this, ImageRgba.getCPtr(datum), datum);
  }

  public void useCallback(TypedReaderCallbackImageRgba callback) {
    yarpJNI.BufferedPortImageRgba_useCallback__SWIG_0(swigCPtr, this, TypedReaderCallbackImageRgba.getCPtr(callback), callback);
  }

  public void useCallback() {
    yarpJNI.BufferedPortImageRgba_useCallback__SWIG_1(swigCPtr, this);
  }

  public void disableCallback() {
    yarpJNI.BufferedPortImageRgba_disableCallback(swigCPtr, this);
  }

  public boolean setEnvelope(PortWriter envelope) {
    return yarpJNI.BufferedPortImageRgba_setEnvelope(swigCPtr, this, PortWriter.getCPtr(envelope), envelope);
  }

  public boolean getEnvelope(PortReader envelope) {
    return yarpJNI.BufferedPortImageRgba_getEnvelope(swigCPtr, this, PortReader.getCPtr(envelope), envelope);
  }

  public int getInputCount() {
    return yarpJNI.BufferedPortImageRgba_getInputCount(swigCPtr, this);
  }

  public int getOutputCount() {
    return yarpJNI.BufferedPortImageRgba_getOutputCount(swigCPtr, this);
  }

  public boolean isWriting() {
    return yarpJNI.BufferedPortImageRgba_isWriting(swigCPtr, this);
  }

  public void getReport(PortReport reporter) {
    yarpJNI.BufferedPortImageRgba_getReport(swigCPtr, this, PortReport.getCPtr(reporter), reporter);
  }

  public void setReporter(PortReport reporter) {
    yarpJNI.BufferedPortImageRgba_setReporter(swigCPtr, this, PortReport.getCPtr(reporter), reporter);
  }

  public SWIGTYPE_p_void acquire() {
    long cPtr = yarpJNI.BufferedPortImageRgba_acquire(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public void release(SWIGTYPE_p_void handle) {
    yarpJNI.BufferedPortImageRgba_release(swigCPtr, this, SWIGTYPE_p_void.getCPtr(handle));
  }

  public void setTargetPeriod(double period) {
    yarpJNI.BufferedPortImageRgba_setTargetPeriod(swigCPtr, this, period);
  }

  public SWIGTYPE_p_Type getType() {
    return new SWIGTYPE_p_Type(yarpJNI.BufferedPortImageRgba_getType(swigCPtr, this), true);
  }

  public void promiseType(SWIGTYPE_p_Type typ) {
    yarpJNI.BufferedPortImageRgba_promiseType(swigCPtr, this, SWIGTYPE_p_Type.getCPtr(typ));
  }

  public void setInputMode(boolean expectInput) {
    yarpJNI.BufferedPortImageRgba_setInputMode(swigCPtr, this, expectInput);
  }

  public void setOutputMode(boolean expectOutput) {
    yarpJNI.BufferedPortImageRgba_setOutputMode(swigCPtr, this, expectOutput);
  }

  public void setRpcMode(boolean expectRpc) {
    yarpJNI.BufferedPortImageRgba_setRpcMode(swigCPtr, this, expectRpc);
  }

  public Property acquireProperties(boolean readOnly) {
    long cPtr = yarpJNI.BufferedPortImageRgba_acquireProperties(swigCPtr, this, readOnly);
    return (cPtr == 0) ? null : new Property(cPtr, false);
  }

  public void releaseProperties(Property prop) {
    yarpJNI.BufferedPortImageRgba_releaseProperties(swigCPtr, this, Property.getCPtr(prop), prop);
  }

  public void includeNodeInName(boolean flag) {
    yarpJNI.BufferedPortImageRgba_includeNodeInName(swigCPtr, this, flag);
  }

  public boolean setCallbackLock(SWIGTYPE_p_yarp__os__Mutex mutex) {
    return yarpJNI.BufferedPortImageRgba_setCallbackLock(swigCPtr, this, SWIGTYPE_p_yarp__os__Mutex.getCPtr(mutex));
  }

  public boolean removeCallbackLock() {
    return yarpJNI.BufferedPortImageRgba_removeCallbackLock(swigCPtr, this);
  }

  public boolean lockCallback() {
    return yarpJNI.BufferedPortImageRgba_lockCallback(swigCPtr, this);
  }

  public boolean tryLockCallback() {
    return yarpJNI.BufferedPortImageRgba_tryLockCallback(swigCPtr, this);
  }

  public void unlockCallback() {
    yarpJNI.BufferedPortImageRgba_unlockCallback(swigCPtr, this);
  }

}
