/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package yarp;

public class yarpJNI {
  public final static native int YARP_CONSTSTRING_IS_STD_STRING_get();
  public final static native void delete_PortReport(long jarg1);
  public final static native void PortReport_report(long jarg1, PortReport jarg1_, long jarg2);
  public final static native long new_Contact__SWIG_0(String jarg1, int jarg2);
  public final static native long Contact_empty();
  public final static native long Contact_invalid();
  public final static native long Contact_byName(String jarg1);
  public final static native long Contact_byCarrier(String jarg1);
  public final static native long Contact_byConfig(long jarg1);
  public final static native long Contact_addCarrier(long jarg1, Contact jarg1_, String jarg2);
  public final static native long Contact_addHost(long jarg1, Contact jarg1_, String jarg2);
  public final static native long Contact_addPort(long jarg1, Contact jarg1_, int jarg2);
  public final static native long Contact_bySocket(String jarg1, String jarg2, int jarg3);
  public final static native long Contact_addSocket(long jarg1, Contact jarg1_, String jarg2, String jarg3, int jarg4);
  public final static native long Contact_addNested(long jarg1, Contact jarg1_, long jarg2);
  public final static native long Contact_addName(long jarg1, Contact jarg1_, String jarg2);
  public final static native String Contact_convertHostToIp(String jarg1);
  public final static native long new_Contact__SWIG_1(long jarg1, Contact jarg1_);
  public final static native void delete_Contact(long jarg1);
  public final static native String Contact_getName(long jarg1, Contact jarg1_);
  public final static native String Contact_getHost(long jarg1, Contact jarg1_);
  public final static native String Contact_getCarrier(long jarg1, Contact jarg1_);
  public final static native long Contact_getNested(long jarg1, Contact jarg1_);
  public final static native int Contact_getPort(long jarg1, Contact jarg1_);
  public final static native String Contact_toString(long jarg1, Contact jarg1_);
  public final static native String Contact_toURI(long jarg1, Contact jarg1_);
  public final static native long Contact_fromString(String jarg1);
  public final static native boolean Contact_isValid(long jarg1, Contact jarg1_);
  public final static native long new_Contact__SWIG_2();
  public final static native boolean Contact_hasTimeout(long jarg1, Contact jarg1_);
  public final static native void Contact_setTimeout(long jarg1, Contact jarg1_, float jarg2);
  public final static native void Contact_setNested(long jarg1, Contact jarg1_, long jarg2);
  public final static native float Contact_getTimeout(long jarg1, Contact jarg1_);
  public final static native String Contact_getRegName(long jarg1, Contact jarg1_);
  public final static native void Contact_setHost(long jarg1, Contact jarg1_, String jarg2);
  public final static native void Contact_setPort(long jarg1, Contact jarg1_, int jarg2);
  public final static native void delete_ConnectionReader(long jarg1);
  public final static native boolean ConnectionReader_expectBlock(long jarg1, ConnectionReader jarg1_, String jarg2, long jarg3);
  public final static native String ConnectionReader_expectText__SWIG_0(long jarg1, ConnectionReader jarg1_, int jarg2);
  public final static native String ConnectionReader_expectText__SWIG_1(long jarg1, ConnectionReader jarg1_);
  public final static native int ConnectionReader_expectInt(long jarg1, ConnectionReader jarg1_);
  public final static native long ConnectionReader_expectInt64(long jarg1, ConnectionReader jarg1_);
  public final static native double ConnectionReader_expectDouble(long jarg1, ConnectionReader jarg1_);
  public final static native boolean ConnectionReader_isTextMode(long jarg1, ConnectionReader jarg1_);
  public final static native boolean ConnectionReader_isBareMode(long jarg1, ConnectionReader jarg1_);
  public final static native boolean ConnectionReader_convertTextMode(long jarg1, ConnectionReader jarg1_);
  public final static native long ConnectionReader_getSize(long jarg1, ConnectionReader jarg1_);
  public final static native long ConnectionReader_getWriter(long jarg1, ConnectionReader jarg1_);
  public final static native long ConnectionReader_readEnvelope(long jarg1, ConnectionReader jarg1_);
  public final static native long ConnectionReader_getReference(long jarg1, ConnectionReader jarg1_);
  public final static native long ConnectionReader_getRemoteContact(long jarg1, ConnectionReader jarg1_);
  public final static native long ConnectionReader_getLocalContact(long jarg1, ConnectionReader jarg1_);
  public final static native boolean ConnectionReader_isValid(long jarg1, ConnectionReader jarg1_);
  public final static native boolean ConnectionReader_isActive(long jarg1, ConnectionReader jarg1_);
  public final static native boolean ConnectionReader_isError(long jarg1, ConnectionReader jarg1_);
  public final static native void ConnectionReader_requestDrop(long jarg1, ConnectionReader jarg1_);
  public final static native long ConnectionReader_getConnectionModifiers(long jarg1, ConnectionReader jarg1_);
  public final static native boolean ConnectionReader_pushInt(long jarg1, ConnectionReader jarg1_, int jarg2);
  public final static native boolean ConnectionReader_setSize(long jarg1, ConnectionReader jarg1_, long jarg2);
  public final static native long ConnectionReader_createConnectionReader(long jarg1);
  public final static native boolean ConnectionReader_readFromStream(long jarg1, PortReader jarg1_, long jarg2);
  public final static native void delete_ConnectionWriter(long jarg1);
  public final static native void ConnectionWriter_appendBlock(long jarg1, ConnectionWriter jarg1_, String jarg2, long jarg3);
  public final static native void ConnectionWriter_appendInt(long jarg1, ConnectionWriter jarg1_, int jarg2);
  public final static native void ConnectionWriter_appendInt64(long jarg1, ConnectionWriter jarg1_, long jarg2);
  public final static native void ConnectionWriter_appendDouble(long jarg1, ConnectionWriter jarg1_, double jarg2);
  public final static native void ConnectionWriter_appendString__SWIG_0(long jarg1, ConnectionWriter jarg1_, String jarg2, int jarg3);
  public final static native void ConnectionWriter_appendString__SWIG_1(long jarg1, ConnectionWriter jarg1_, String jarg2);
  public final static native void ConnectionWriter_appendExternalBlock(long jarg1, ConnectionWriter jarg1_, String jarg2, long jarg3);
  public final static native boolean ConnectionWriter_isTextMode(long jarg1, ConnectionWriter jarg1_);
  public final static native boolean ConnectionWriter_isBareMode(long jarg1, ConnectionWriter jarg1_);
  public final static native void ConnectionWriter_declareSizes(long jarg1, ConnectionWriter jarg1_, int jarg2, long jarg3);
  public final static native void ConnectionWriter_setReplyHandler(long jarg1, ConnectionWriter jarg1_, long jarg2, PortReader jarg2_);
  public final static native void ConnectionWriter_setReference(long jarg1, ConnectionWriter jarg1_, long jarg2, Portable jarg2_);
  public final static native boolean ConnectionWriter_convertTextMode(long jarg1, ConnectionWriter jarg1_);
  public final static native boolean ConnectionWriter_isValid(long jarg1, ConnectionWriter jarg1_);
  public final static native boolean ConnectionWriter_isActive(long jarg1, ConnectionWriter jarg1_);
  public final static native boolean ConnectionWriter_isError(long jarg1, ConnectionWriter jarg1_);
  public final static native void ConnectionWriter_requestDrop(long jarg1, ConnectionWriter jarg1_);
  public final static native boolean ConnectionWriter_isNull(long jarg1, ConnectionWriter jarg1_);
  public final static native long ConnectionWriter_getBuffer(long jarg1, ConnectionWriter jarg1_);
  public final static native void ConnectionWriter_appendRawString(long jarg1, ConnectionWriter jarg1_, String jarg2);
  public final static native long ConnectionWriter_createBufferedConnectionWriter();
  public final static native boolean ConnectionWriter_writeToStream(long jarg1, PortWriter jarg1_, long jarg2);
  public final static native void delete_PortReader(long jarg1);
  public final static native boolean PortReader_read(long jarg1, PortReader jarg1_, long jarg2, ConnectionReader jarg2_);
  public final static native long PortReader_getReadType(long jarg1, PortReader jarg1_);
  public final static native long PortReader_getReadTypeSwigExplicitPortReader(long jarg1, PortReader jarg1_);
  public final static native long new_PortReader();
  public final static native void PortReader_director_connect(PortReader obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void PortReader_change_ownership(PortReader obj, long cptr, boolean take_or_release);
  public final static native void delete_PortWriter(long jarg1);
  public final static native boolean PortWriter_write(long jarg1, PortWriter jarg1_, long jarg2, ConnectionWriter jarg2_);
  public final static native void PortWriter_onCompletion(long jarg1, PortWriter jarg1_);
  public final static native void PortWriter_onCommencement(long jarg1, PortWriter jarg1_);
  public final static native long PortWriter_getWriteType(long jarg1, PortWriter jarg1_);
  public final static native boolean Portable_read(long jarg1, Portable jarg1_, long jarg2, ConnectionReader jarg2_);
  public final static native boolean Portable_write(long jarg1, Portable jarg1_, long jarg2, ConnectionWriter jarg2_);
  public final static native long Portable_getType(long jarg1, Portable jarg1_);
  public final static native boolean Portable_copyPortable(long jarg1, PortWriter jarg1_, long jarg2, PortReader jarg2_);
  public final static native void delete_Portable(long jarg1);
  public final static native void SearchReport_key_set(long jarg1, SearchReport jarg1_, String jarg2);
  public final static native String SearchReport_key_get(long jarg1, SearchReport jarg1_);
  public final static native void SearchReport_value_set(long jarg1, SearchReport jarg1_, String jarg2);
  public final static native String SearchReport_value_get(long jarg1, SearchReport jarg1_);
  public final static native void SearchReport_isFound_set(long jarg1, SearchReport jarg1_, boolean jarg2);
  public final static native boolean SearchReport_isFound_get(long jarg1, SearchReport jarg1_);
  public final static native void SearchReport_isGroup_set(long jarg1, SearchReport jarg1_, boolean jarg2);
  public final static native boolean SearchReport_isGroup_get(long jarg1, SearchReport jarg1_);
  public final static native void SearchReport_isComment_set(long jarg1, SearchReport jarg1_, boolean jarg2);
  public final static native boolean SearchReport_isComment_get(long jarg1, SearchReport jarg1_);
  public final static native void SearchReport_isDefault_set(long jarg1, SearchReport jarg1_, boolean jarg2);
  public final static native boolean SearchReport_isDefault_get(long jarg1, SearchReport jarg1_);
  public final static native long new_SearchReport();
  public final static native void delete_SearchReport(long jarg1);
  public final static native void delete_SearchMonitor(long jarg1);
  public final static native void SearchMonitor_report(long jarg1, SearchMonitor jarg1_, long jarg2, SearchReport jarg2_, String jarg3);
  public final static native void delete_Searchable(long jarg1);
  public final static native boolean Searchable_check__SWIG_0(long jarg1, Searchable jarg1_, String jarg2);
  public final static native boolean Searchable_check__SWIG_1(long jarg1, Searchable jarg1_, String jarg2, String jarg3);
  public final static native long Searchable_find(long jarg1, Searchable jarg1_, String jarg2);
  public final static native long Searchable_findGroup__SWIG_0(long jarg1, Searchable jarg1_, String jarg2);
  public final static native long Searchable_findGroup__SWIG_1(long jarg1, Searchable jarg1_, String jarg2, String jarg3);
  public final static native long Searchable_check__SWIG_2(long jarg1, Searchable jarg1_, String jarg2, long jarg3, Value jarg3_, String jarg4);
  public final static native long Searchable_check__SWIG_3(long jarg1, Searchable jarg1_, String jarg2, long jarg3, Value jarg3_);
  public final static native boolean Searchable_isNull(long jarg1, Searchable jarg1_);
  public final static native String Searchable_toString(long jarg1, Searchable jarg1_);
  public final static native void Searchable_setMonitor__SWIG_0(long jarg1, Searchable jarg1_, long jarg2, SearchMonitor jarg2_, String jarg3);
  public final static native void Searchable_setMonitor__SWIG_1(long jarg1, Searchable jarg1_, long jarg2, SearchMonitor jarg2_);
  public final static native long Searchable_getMonitor(long jarg1, Searchable jarg1_);
  public final static native String Searchable_getMonitorContext(long jarg1, Searchable jarg1_);
  public final static native void Searchable_reportToMonitor(long jarg1, Searchable jarg1_, long jarg2, SearchReport jarg2_);
  public final static native boolean Value_check__SWIG_0_0(long jarg1, Value jarg1_, String jarg2);
  public final static native boolean Value_check__SWIG_0_1(long jarg1, Value jarg1_, String jarg2, String jarg3);
  public final static native long Value_check__SWIG_0_2(long jarg1, Value jarg1_, String jarg2, long jarg3, Value jarg3_, String jarg4);
  public final static native long Value_check__SWIG_0_3(long jarg1, Value jarg1_, String jarg2, long jarg3, Value jarg3_);
  public final static native long Value_findGroup__SWIG_0_0(long jarg1, Value jarg1_, String jarg2);
  public final static native long Value_findGroup__SWIG_0_1(long jarg1, Value jarg1_, String jarg2, String jarg3);
  public final static native long new_Value__SWIG_0();
  public final static native long new_Value__SWIG_1(int jarg1, boolean jarg2);
  public final static native long new_Value__SWIG_2(int jarg1);
  public final static native long new_Value__SWIG_3(double jarg1);
  public final static native long new_Value__SWIG_4(String jarg1, boolean jarg2);
  public final static native long new_Value__SWIG_5(String jarg1);
  public final static native long new_Value__SWIG_6(long jarg1, int jarg2);
  public final static native long new_Value__SWIG_7(long jarg1, Value jarg1_);
  public final static native void delete_Value(long jarg1);
  public final static native boolean Value_isBool(long jarg1, Value jarg1_);
  public final static native boolean Value_isInt(long jarg1, Value jarg1_);
  public final static native boolean Value_isInt64(long jarg1, Value jarg1_);
  public final static native boolean Value_isString(long jarg1, Value jarg1_);
  public final static native boolean Value_isDouble(long jarg1, Value jarg1_);
  public final static native boolean Value_isList(long jarg1, Value jarg1_);
  public final static native boolean Value_isDict(long jarg1, Value jarg1_);
  public final static native boolean Value_isVocab(long jarg1, Value jarg1_);
  public final static native boolean Value_isBlob(long jarg1, Value jarg1_);
  public final static native boolean Value_asBool(long jarg1, Value jarg1_);
  public final static native int Value_asInt(long jarg1, Value jarg1_);
  public final static native long Value_asInt64(long jarg1, Value jarg1_);
  public final static native int Value_asVocab(long jarg1, Value jarg1_);
  public final static native double Value_asDouble(long jarg1, Value jarg1_);
  public final static native String Value_asString(long jarg1, Value jarg1_);
  public final static native long Value_asList(long jarg1, Value jarg1_);
  public final static native long Value_asDict(long jarg1, Value jarg1_);
  public final static native long Value_asSearchable(long jarg1, Value jarg1_);
  public final static native String Value_asBlob(long jarg1, Value jarg1_);
  public final static native long Value_asBlobLength(long jarg1, Value jarg1_);
  public final static native boolean Value_read(long jarg1, Value jarg1_, long jarg2, ConnectionReader jarg2_);
  public final static native boolean Value_write(long jarg1, Value jarg1_, long jarg2, ConnectionWriter jarg2_);
  public final static native long Value_find(long jarg1, Value jarg1_, String jarg2);
  public final static native boolean Value_isEqual__SWIG_0(long jarg1, Value jarg1_, long jarg2, Value jarg2_);
  public final static native boolean Value_notEqual__SWIG_0(long jarg1, Value jarg1_, long jarg2, Value jarg2_);
  public final static native boolean Value_isEqual__SWIG_1(long jarg1, Value jarg1_, String jarg2);
  public final static native boolean Value_notEqual__SWIG_1(long jarg1, Value jarg1_, String jarg2);
  public final static native void Value_fromString(long jarg1, Value jarg1_, String jarg2);
  public final static native String Value_toString(long jarg1, Value jarg1_);
  public final static native long Value_create(long jarg1, Value jarg1_);
  public final static native long Value_clone_c(long jarg1, Value jarg1_);
  public final static native int Value_getCode(long jarg1, Value jarg1_);
  public final static native boolean Value_isNull(long jarg1, Value jarg1_);
  public final static native boolean Value_isLeaf(long jarg1, Value jarg1_);
  public final static native long Value_makeInt(int jarg1);
  public final static native long Value_makeDouble(double jarg1);
  public final static native long Value_makeString(String jarg1);
  public final static native long Value_makeVocab__SWIG_0(int jarg1);
  public final static native long Value_makeVocab__SWIG_1(String jarg1);
  public final static native long Value_makeBlob(long jarg1, int jarg2);
  public final static native long Value_makeList__SWIG_0();
  public final static native long Value_makeList__SWIG_1(String jarg1);
  public final static native long Value_makeValue(String jarg1);
  public final static native long Value_getNullValue();
  public final static native String Value_toString_c(long jarg1, Value jarg1_);
  public final static native int Vocab_encode(String jarg1);
  public final static native String Vocab_decode(int jarg1);
  public final static native long new_Vocab();
  public final static native void delete_Vocab(long jarg1);
  public final static native void delete_Contactable(long jarg1);
  public final static native boolean Contactable_open__SWIG_0(long jarg1, Contactable jarg1_);
  public final static native boolean Contactable_open__SWIG_1(long jarg1, Contactable jarg1_, String jarg2);
  public final static native boolean Contactable_open__SWIG_2(long jarg1, Contactable jarg1_, long jarg2, Contact jarg2_, boolean jarg3);
  public final static native boolean Contactable_open__SWIG_3(long jarg1, Contactable jarg1_, long jarg2, Contact jarg2_);
  public final static native boolean Contactable_addOutput__SWIG_0(long jarg1, Contactable jarg1_, String jarg2);
  public final static native boolean Contactable_addOutput__SWIG_1(long jarg1, Contactable jarg1_, String jarg2, String jarg3);
  public final static native boolean Contactable_addOutput__SWIG_2(long jarg1, Contactable jarg1_, long jarg2, Contact jarg2_);
  public final static native void Contactable_close(long jarg1, Contactable jarg1_);
  public final static native void Contactable_interrupt(long jarg1, Contactable jarg1_);
  public final static native void Contactable_resume(long jarg1, Contactable jarg1_);
  public final static native long Contactable_where(long jarg1, Contactable jarg1_);
  public final static native String Contactable_getName(long jarg1, Contactable jarg1_);
  public final static native boolean Contactable_setEnvelope__SWIG_0(long jarg1, Contactable jarg1_, long jarg2, PortWriter jarg2_);
  public final static native boolean Contactable_getEnvelope(long jarg1, Contactable jarg1_, long jarg2, PortReader jarg2_);
  public final static native int Contactable_getInputCount(long jarg1, Contactable jarg1_);
  public final static native int Contactable_getOutputCount(long jarg1, Contactable jarg1_);
  public final static native void Contactable_getReport(long jarg1, Contactable jarg1_, long jarg2, PortReport jarg2_);
  public final static native void Contactable_setReporter(long jarg1, Contactable jarg1_, long jarg2, PortReport jarg2_);
  public final static native boolean Contactable_isWriting(long jarg1, Contactable jarg1_);
  public final static native void Contactable_setReader(long jarg1, Contactable jarg1_, long jarg2, PortReader jarg2_);
  public final static native void Contactable_setAdminReader(long jarg1, Contactable jarg1_, long jarg2, PortReader jarg2_);
  public final static native void Contactable_setInputMode(long jarg1, Contactable jarg1_, boolean jarg2);
  public final static native void Contactable_setOutputMode(long jarg1, Contactable jarg1_, boolean jarg2);
  public final static native void Contactable_setRpcMode(long jarg1, Contactable jarg1_, boolean jarg2);
  public final static native long Contactable_getType(long jarg1, Contactable jarg1_);
  public final static native void Contactable_promiseType(long jarg1, Contactable jarg1_, long jarg2);
  public final static native long Contactable_acquireProperties(long jarg1, Contactable jarg1_, boolean jarg2);
  public final static native void Contactable_releaseProperties(long jarg1, Contactable jarg1_, long jarg2, Property jarg2_);
  public final static native void Contactable_includeNodeInName(long jarg1, Contactable jarg1_, boolean jarg2);
  public final static native void Contactable_setReadOnly(long jarg1, Contactable jarg1_);
  public final static native void Contactable_setWriteOnly(long jarg1, Contactable jarg1_);
  public final static native void Contactable_setRpcServer(long jarg1, Contactable jarg1_);
  public final static native void Contactable_setRpcClient(long jarg1, Contactable jarg1_);
  public final static native boolean Contactable_setCallbackLock__SWIG_0(long jarg1, Contactable jarg1_, long jarg2);
  public final static native boolean Contactable_setCallbackLock__SWIG_1(long jarg1, Contactable jarg1_);
  public final static native boolean Contactable_removeCallbackLock(long jarg1, Contactable jarg1_);
  public final static native boolean Contactable_lockCallback(long jarg1, Contactable jarg1_);
  public final static native boolean Contactable_tryLockCallback(long jarg1, Contactable jarg1_);
  public final static native void Contactable_unlockCallback(long jarg1, Contactable jarg1_);
  public final static native boolean Contactable_setEnvelope__SWIG_1(long jarg1, Contactable jarg1_, long jarg2, Portable jarg2_);
  public final static native boolean UnbufferedContactable_write__SWIG_0(long jarg1, UnbufferedContactable jarg1_, long jarg2, PortWriter jarg2_, long jarg3, PortWriter jarg3_);
  public final static native boolean UnbufferedContactable_write__SWIG_1(long jarg1, UnbufferedContactable jarg1_, long jarg2, PortWriter jarg2_);
  public final static native boolean UnbufferedContactable_write__SWIG_2(long jarg1, UnbufferedContactable jarg1_, long jarg2, PortWriter jarg2_, long jarg3, PortReader jarg3_, long jarg4, PortWriter jarg4_);
  public final static native boolean UnbufferedContactable_write__SWIG_3(long jarg1, UnbufferedContactable jarg1_, long jarg2, PortWriter jarg2_, long jarg3, PortReader jarg3_);
  public final static native boolean UnbufferedContactable_read__SWIG_0(long jarg1, UnbufferedContactable jarg1_, long jarg2, PortReader jarg2_, boolean jarg3);
  public final static native boolean UnbufferedContactable_read__SWIG_1(long jarg1, UnbufferedContactable jarg1_, long jarg2, PortReader jarg2_);
  public final static native boolean UnbufferedContactable_reply(long jarg1, UnbufferedContactable jarg1_, long jarg2, PortWriter jarg2_);
  public final static native boolean UnbufferedContactable_replyAndDrop(long jarg1, UnbufferedContactable jarg1_, long jarg2, PortWriter jarg2_);
  public final static native void delete_UnbufferedContactable(long jarg1);
  public final static native long new_Port();
  public final static native void delete_Port(long jarg1);
  public final static native boolean Port_openFake(long jarg1, Port jarg1_, String jarg2);
  public final static native boolean Port_addOutput__SWIG_0(long jarg1, Port jarg1_, String jarg2);
  public final static native boolean Port_addOutput__SWIG_1(long jarg1, Port jarg1_, String jarg2, String jarg3);
  public final static native boolean Port_addOutput__SWIG_2(long jarg1, Port jarg1_, long jarg2, Contact jarg2_);
  public final static native void Port_close(long jarg1, Port jarg1_);
  public final static native void Port_interrupt(long jarg1, Port jarg1_);
  public final static native void Port_resume(long jarg1, Port jarg1_);
  public final static native long Port_where(long jarg1, Port jarg1_);
  public final static native boolean Port_write__SWIG_0(long jarg1, Port jarg1_, long jarg2, PortWriter jarg2_, long jarg3, PortWriter jarg3_);
  public final static native boolean Port_write__SWIG_1(long jarg1, Port jarg1_, long jarg2, PortWriter jarg2_);
  public final static native boolean Port_write__SWIG_2(long jarg1, Port jarg1_, long jarg2, PortWriter jarg2_, long jarg3, PortReader jarg3_, long jarg4, PortWriter jarg4_);
  public final static native boolean Port_write__SWIG_3(long jarg1, Port jarg1_, long jarg2, PortWriter jarg2_, long jarg3, PortReader jarg3_);
  public final static native boolean Port_read__SWIG_0(long jarg1, Port jarg1_, long jarg2, PortReader jarg2_, boolean jarg3);
  public final static native boolean Port_read__SWIG_1(long jarg1, Port jarg1_, long jarg2, PortReader jarg2_);
  public final static native boolean Port_reply__SWIG_0(long jarg1, Port jarg1_, long jarg2, PortWriter jarg2_);
  public final static native boolean Port_replyAndDrop(long jarg1, Port jarg1_, long jarg2, PortWriter jarg2_);
  public final static native void Port_setReader(long jarg1, Port jarg1_, long jarg2, PortReader jarg2_);
  public final static native void Port_setAdminReader(long jarg1, Port jarg1_, long jarg2, PortReader jarg2_);
  public final static native void Port_setReaderCreator(long jarg1, Port jarg1_, long jarg2);
  public final static native void Port_enableBackgroundWrite(long jarg1, Port jarg1_, boolean jarg2);
  public final static native boolean Port_isWriting(long jarg1, Port jarg1_);
  public final static native boolean Port_setEnvelope(long jarg1, Port jarg1_, long jarg2, PortWriter jarg2_);
  public final static native boolean Port_getEnvelope(long jarg1, Port jarg1_, long jarg2, PortReader jarg2_);
  public final static native int Port_getInputCount(long jarg1, Port jarg1_);
  public final static native int Port_getOutputCount(long jarg1, Port jarg1_);
  public final static native void Port_getReport(long jarg1, Port jarg1_, long jarg2, PortReport jarg2_);
  public final static native void Port_setReporter(long jarg1, Port jarg1_, long jarg2, PortReport jarg2_);
  public final static native void Port_setAdminMode__SWIG_0(long jarg1, Port jarg1_, boolean jarg2);
  public final static native void Port_setAdminMode__SWIG_1(long jarg1, Port jarg1_);
  public final static native void Port_setInputMode(long jarg1, Port jarg1_, boolean jarg2);
  public final static native void Port_setOutputMode(long jarg1, Port jarg1_, boolean jarg2);
  public final static native void Port_setRpcMode(long jarg1, Port jarg1_, boolean jarg2);
  public final static native boolean Port_setTimeout(long jarg1, Port jarg1_, float jarg2);
  public final static native void Port_setVerbosity(long jarg1, Port jarg1_, int jarg2);
  public final static native int Port_getVerbosity(long jarg1, Port jarg1_);
  public final static native long Port_getType(long jarg1, Port jarg1_);
  public final static native void Port_promiseType(long jarg1, Port jarg1_, long jarg2);
  public final static native long Port_acquireProperties(long jarg1, Port jarg1_, boolean jarg2);
  public final static native void Port_releaseProperties(long jarg1, Port jarg1_, long jarg2, Property jarg2_);
  public final static native void Port_includeNodeInName(long jarg1, Port jarg1_, boolean jarg2);
  public final static native boolean Port_sharedOpen(long jarg1, Port jarg1_, long jarg2, Port jarg2_);
  public final static native boolean Port_isOpen(long jarg1, Port jarg1_);
  public final static native boolean Port_setCallbackLock__SWIG_0(long jarg1, Port jarg1_, long jarg2);
  public final static native boolean Port_setCallbackLock__SWIG_1(long jarg1, Port jarg1_);
  public final static native boolean Port_removeCallbackLock(long jarg1, Port jarg1_);
  public final static native boolean Port_lockCallback(long jarg1, Port jarg1_);
  public final static native boolean Port_tryLockCallback(long jarg1, Port jarg1_);
  public final static native void Port_unlockCallback(long jarg1, Port jarg1_);
  public final static native boolean Port_write__SWIG_4(long jarg1, Port jarg1_, long jarg2, Bottle jarg2_);
  public final static native boolean Port_write__SWIG_5(long jarg1, Port jarg1_, long jarg2, Property jarg2_);
  public final static native boolean Port_write__SWIG_6(long jarg1, Port jarg1_, long jarg2, ImageRgb jarg2_);
  public final static native boolean Port_write__SWIG_7(long jarg1, Port jarg1_, long jarg2, ImageFloat jarg2_);
  public final static native boolean Port_write__SWIG_8(long jarg1, Port jarg1_, long jarg2, Bottle jarg2_, long jarg3, Bottle jarg3_);
  public final static native boolean Port_write__SWIG_9(long jarg1, Port jarg1_, long jarg2, Bottle jarg2_, long jarg3, ImageFloat jarg3_);
  public final static native boolean Port_reply__SWIG_1(long jarg1, Port jarg1_, long jarg2, Bottle jarg2_);
  public final static native boolean AbstractContactable_open__SWIG_0_0(long jarg1, AbstractContactable jarg1_);
  public final static native boolean AbstractContactable_open__SWIG_0_1(long jarg1, AbstractContactable jarg1_, String jarg2);
  public final static native boolean AbstractContactable_open__SWIG_0_2(long jarg1, AbstractContactable jarg1_, long jarg2, Contact jarg2_, boolean jarg3);
  public final static native boolean AbstractContactable_open__SWIG_0_3(long jarg1, AbstractContactable jarg1_, long jarg2, Contact jarg2_);
  public final static native long AbstractContactable_asPort__SWIG_0(long jarg1, AbstractContactable jarg1_);
  public final static native boolean AbstractContactable_addOutput__SWIG_0(long jarg1, AbstractContactable jarg1_, String jarg2);
  public final static native boolean AbstractContactable_addOutput__SWIG_1(long jarg1, AbstractContactable jarg1_, String jarg2, String jarg3);
  public final static native boolean AbstractContactable_addOutput__SWIG_2(long jarg1, AbstractContactable jarg1_, long jarg2, Contact jarg2_);
  public final static native void AbstractContactable_close(long jarg1, AbstractContactable jarg1_);
  public final static native void AbstractContactable_interrupt(long jarg1, AbstractContactable jarg1_);
  public final static native void AbstractContactable_resume(long jarg1, AbstractContactable jarg1_);
  public final static native long AbstractContactable_where(long jarg1, AbstractContactable jarg1_);
  public final static native String AbstractContactable_getName(long jarg1, AbstractContactable jarg1_);
  public final static native boolean AbstractContactable_setEnvelope(long jarg1, AbstractContactable jarg1_, long jarg2, PortWriter jarg2_);
  public final static native boolean AbstractContactable_getEnvelope(long jarg1, AbstractContactable jarg1_, long jarg2, PortReader jarg2_);
  public final static native int AbstractContactable_getInputCount(long jarg1, AbstractContactable jarg1_);
  public final static native int AbstractContactable_getOutputCount(long jarg1, AbstractContactable jarg1_);
  public final static native void AbstractContactable_getReport(long jarg1, AbstractContactable jarg1_, long jarg2, PortReport jarg2_);
  public final static native void AbstractContactable_setReporter(long jarg1, AbstractContactable jarg1_, long jarg2, PortReport jarg2_);
  public final static native boolean AbstractContactable_isWriting(long jarg1, AbstractContactable jarg1_);
  public final static native void AbstractContactable_setReader(long jarg1, AbstractContactable jarg1_, long jarg2, PortReader jarg2_);
  public final static native void AbstractContactable_setAdminReader(long jarg1, AbstractContactable jarg1_, long jarg2, PortReader jarg2_);
  public final static native void AbstractContactable_setInputMode(long jarg1, AbstractContactable jarg1_, boolean jarg2);
  public final static native void AbstractContactable_setOutputMode(long jarg1, AbstractContactable jarg1_, boolean jarg2);
  public final static native void AbstractContactable_setRpcMode(long jarg1, AbstractContactable jarg1_, boolean jarg2);
  public final static native long AbstractContactable_getType(long jarg1, AbstractContactable jarg1_);
  public final static native void AbstractContactable_promiseType(long jarg1, AbstractContactable jarg1_, long jarg2);
  public final static native long AbstractContactable_acquireProperties(long jarg1, AbstractContactable jarg1_, boolean jarg2);
  public final static native void AbstractContactable_releaseProperties(long jarg1, AbstractContactable jarg1_, long jarg2, Property jarg2_);
  public final static native boolean AbstractContactable_write__SWIG_0(long jarg1, AbstractContactable jarg1_, long jarg2, PortWriter jarg2_, long jarg3, PortWriter jarg3_);
  public final static native boolean AbstractContactable_write__SWIG_1(long jarg1, AbstractContactable jarg1_, long jarg2, PortWriter jarg2_);
  public final static native boolean AbstractContactable_write__SWIG_2(long jarg1, AbstractContactable jarg1_, long jarg2, PortWriter jarg2_, long jarg3, PortReader jarg3_, long jarg4, PortWriter jarg4_);
  public final static native boolean AbstractContactable_write__SWIG_3(long jarg1, AbstractContactable jarg1_, long jarg2, PortWriter jarg2_, long jarg3, PortReader jarg3_);
  public final static native boolean AbstractContactable_read__SWIG_0(long jarg1, AbstractContactable jarg1_, long jarg2, PortReader jarg2_, boolean jarg3);
  public final static native boolean AbstractContactable_read__SWIG_1(long jarg1, AbstractContactable jarg1_, long jarg2, PortReader jarg2_);
  public final static native boolean AbstractContactable_reply(long jarg1, AbstractContactable jarg1_, long jarg2, PortWriter jarg2_);
  public final static native boolean AbstractContactable_replyAndDrop(long jarg1, AbstractContactable jarg1_, long jarg2, PortWriter jarg2_);
  public final static native void AbstractContactable_includeNodeInName(long jarg1, AbstractContactable jarg1_, boolean jarg2);
  public final static native boolean AbstractContactable_setCallbackLock__SWIG_0(long jarg1, AbstractContactable jarg1_, long jarg2);
  public final static native boolean AbstractContactable_setCallbackLock__SWIG_1(long jarg1, AbstractContactable jarg1_);
  public final static native boolean AbstractContactable_removeCallbackLock(long jarg1, AbstractContactable jarg1_);
  public final static native boolean AbstractContactable_lockCallback(long jarg1, AbstractContactable jarg1_);
  public final static native boolean AbstractContactable_tryLockCallback(long jarg1, AbstractContactable jarg1_);
  public final static native void AbstractContactable_unlockCallback(long jarg1, AbstractContactable jarg1_);
  public final static native void delete_AbstractContactable(long jarg1);
  public final static native void NetworkBase_initMinimum();
  public final static native void NetworkBase_autoInitMinimum();
  public final static native void NetworkBase_finiMinimum();
  public final static native boolean NetworkBase_connect__SWIG_0(String jarg1, String jarg2, String jarg3, boolean jarg4);
  public final static native boolean NetworkBase_connect__SWIG_1(String jarg1, String jarg2, String jarg3);
  public final static native boolean NetworkBase_connect__SWIG_2(String jarg1, String jarg2);
  public final static native boolean NetworkBase_connect__SWIG_5(String jarg1, String jarg2, long jarg3, ContactStyle jarg3_);
  public final static native boolean NetworkBase_disconnect__SWIG_0(String jarg1, String jarg2, boolean jarg3);
  public final static native boolean NetworkBase_disconnect__SWIG_1(String jarg1, String jarg2);
  public final static native boolean NetworkBase_disconnect__SWIG_2(String jarg1, String jarg2, long jarg3, ContactStyle jarg3_);
  public final static native boolean NetworkBase_isConnected__SWIG_0(String jarg1, String jarg2, boolean jarg3);
  public final static native boolean NetworkBase_isConnected__SWIG_1(String jarg1, String jarg2);
  public final static native boolean NetworkBase_isConnected__SWIG_2(String jarg1, String jarg2, long jarg3, ContactStyle jarg3_);
  public final static native boolean NetworkBase_exists__SWIG_0(String jarg1, boolean jarg2);
  public final static native boolean NetworkBase_exists__SWIG_1(String jarg1);
  public final static native boolean NetworkBase_exists__SWIG_2(String jarg1, long jarg2, ContactStyle jarg2_);
  public final static native boolean NetworkBase_sync__SWIG_0(String jarg1, boolean jarg2);
  public final static native boolean NetworkBase_sync__SWIG_1(String jarg1);
  public final static native int NetworkBase_main(int jarg1, long jarg2);
  public final static native int NetworkBase_runNameServer(int jarg1, long jarg2);
  public final static native void NetworkBase_assertion(boolean jarg1);
  public final static native long NetworkBase_queryName(String jarg1);
  public final static native long NetworkBase_registerName(String jarg1);
  public final static native long NetworkBase_registerContact(long jarg1, Contact jarg1_);
  public final static native long NetworkBase_unregisterName(String jarg1);
  public final static native long NetworkBase_unregisterContact(long jarg1, Contact jarg1_);
  public final static native boolean NetworkBase_setProperty(String jarg1, String jarg2, long jarg3, Value jarg3_);
  public final static native long NetworkBase_getProperty(String jarg1, String jarg2);
  public final static native String NetworkBase_getNameServerName();
  public final static native long NetworkBase_getNameServerContact();
  public final static native boolean NetworkBase_setNameServerName(String jarg1);
  public final static native boolean NetworkBase_setLocalMode(boolean jarg1);
  public final static native boolean NetworkBase_getLocalMode();
  public final static native String NetworkBase_readString__SWIG_0(long jarg1);
  public final static native String NetworkBase_readString__SWIG_1();
  public final static native boolean NetworkBase_write__SWIG_0(long jarg1, Contact jarg1_, long jarg2, PortWriter jarg2_, long jarg3, PortReader jarg3_, boolean jarg4, boolean jarg5, double jarg6);
  public final static native boolean NetworkBase_write__SWIG_1(long jarg1, Contact jarg1_, long jarg2, PortWriter jarg2_, long jarg3, PortReader jarg3_, boolean jarg4, boolean jarg5);
  public final static native boolean NetworkBase_write__SWIG_2(long jarg1, Contact jarg1_, long jarg2, PortWriter jarg2_, long jarg3, PortReader jarg3_, boolean jarg4);
  public final static native boolean NetworkBase_write__SWIG_3(long jarg1, Contact jarg1_, long jarg2, PortWriter jarg2_, long jarg3, PortReader jarg3_);
  public final static native boolean NetworkBase_write__SWIG_4(long jarg1, Contact jarg1_, long jarg2, PortWriter jarg2_, long jarg3, PortReader jarg3_, long jarg4, ContactStyle jarg4_);
  public final static native boolean NetworkBase_writeToNameServer(long jarg1, PortWriter jarg1_, long jarg2, PortReader jarg2_, long jarg3, ContactStyle jarg3_);
  public final static native boolean NetworkBase_write__SWIG_5(String jarg1, long jarg2, PortWriter jarg2_, long jarg3, PortReader jarg3_);
  public final static native boolean NetworkBase_checkNetwork__SWIG_0();
  public final static native boolean NetworkBase_checkNetwork__SWIG_1(double jarg1);
  public final static native boolean NetworkBase_initialized();
  public final static native void NetworkBase_setVerbosity(int jarg1);
  public final static native void NetworkBase_queryBypass(long jarg1);
  public final static native long NetworkBase_getQueryBypass();
  public final static native String NetworkBase_getEnvironment__SWIG_0(String jarg1, long jarg2);
  public final static native String NetworkBase_getEnvironment__SWIG_1(String jarg1);
  public final static native void NetworkBase_setEnvironment(String jarg1, String jarg2);
  public final static native void NetworkBase_unsetEnvironment(String jarg1);
  public final static native String NetworkBase_getDirectorySeparator();
  public final static native String NetworkBase_getPathSeparator();
  public final static native boolean NetworkBase_registerCarrier(String jarg1, String jarg2);
  public final static native void NetworkBase_lock();
  public final static native void NetworkBase_unlock();
  public final static native boolean NetworkBase_localNetworkAllocation();
  public final static native long NetworkBase_detectNameServer(boolean jarg1, long jarg2, long jarg3);
  public final static native boolean NetworkBase_setNameServerContact(long jarg1, Contact jarg1_);
  public final static native String NetworkBase_getConfigFile(String jarg1);
  public final static native int NetworkBase_getDefaultPortRange();
  public final static native boolean NetworkBase_write__SWIG_6(String jarg1, long jarg2, Bottle jarg2_, long jarg3, Bottle jarg3_);
  public final static native boolean NetworkBase_write__SWIG_7(long jarg1, Contact jarg1_, long jarg2, Bottle jarg2_, long jarg3, Bottle jarg3_, long jarg4, ContactStyle jarg4_);
  public final static native boolean NetworkBase_write__SWIG_8(long jarg1, Contact jarg1_, long jarg2, Bottle jarg2_, long jarg3, Bottle jarg3_, boolean jarg4, boolean jarg5, double jarg6);
  public final static native long new_NetworkBase();
  public final static native void delete_NetworkBase(long jarg1);
  public final static native long new_Network();
  public final static native void delete_Network(long jarg1);
  public final static native void Network_init();
  public final static native void Network_fini();
  public final static native boolean PortablePairBase_readPair(long jarg1, ConnectionReader jarg1_, long jarg2, Portable jarg2_, long jarg3, Portable jarg3_);
  public final static native boolean PortablePairBase_writePair(long jarg1, ConnectionWriter jarg1_, long jarg2, Portable jarg2_, long jarg3, Portable jarg3_);
  public final static native void delete_PortablePairBase(long jarg1);
  public final static native void delete_PortReaderCreator(long jarg1);
  public final static native long PortReaderCreator_create(long jarg1, PortReaderCreator jarg1_);
  public final static native boolean Property_check__SWIG_0_0(long jarg1, Property jarg1_, String jarg2);
  public final static native boolean Property_check__SWIG_0_1(long jarg1, Property jarg1_, String jarg2, String jarg3);
  public final static native long Property_check__SWIG_0_2(long jarg1, Property jarg1_, String jarg2, long jarg3, Value jarg3_, String jarg4);
  public final static native long Property_check__SWIG_0_3(long jarg1, Property jarg1_, String jarg2, long jarg3, Value jarg3_);
  public final static native long Property_findGroup__SWIG_0_0(long jarg1, Property jarg1_, String jarg2);
  public final static native long Property_findGroup__SWIG_0_1(long jarg1, Property jarg1_, String jarg2, String jarg3);
  public final static native long new_Property__SWIG_0(int jarg1);
  public final static native long new_Property__SWIG_1();
  public final static native long new_Property__SWIG_2(String jarg1);
  public final static native long new_Property__SWIG_3(long jarg1, Property jarg1_);
  public final static native void delete_Property(long jarg1);
  public final static native void Property_put__SWIG_0(long jarg1, Property jarg1_, String jarg2, String jarg3);
  public final static native void Property_put__SWIG_1(long jarg1, Property jarg1_, String jarg2, long jarg3, Value jarg3_);
  public final static native void Property_put__SWIG_3(long jarg1, Property jarg1_, String jarg2, int jarg3);
  public final static native void Property_put__SWIG_4(long jarg1, Property jarg1_, String jarg2, double jarg3);
  public final static native long Property_addGroup(long jarg1, Property jarg1_, String jarg2);
  public final static native void Property_unput(long jarg1, Property jarg1_, String jarg2);
  public final static native long Property_find(long jarg1, Property jarg1_, String jarg2);
  public final static native void Property_clear(long jarg1, Property jarg1_);
  public final static native void Property_fromString__SWIG_0(long jarg1, Property jarg1_, String jarg2, boolean jarg3);
  public final static native void Property_fromString__SWIG_1(long jarg1, Property jarg1_, String jarg2);
  public final static native void Property_fromCommand__SWIG_0(long jarg1, Property jarg1_, int jarg2, long jarg3, boolean jarg4, boolean jarg5);
  public final static native void Property_fromCommand__SWIG_1(long jarg1, Property jarg1_, int jarg2, long jarg3, boolean jarg4);
  public final static native void Property_fromCommand__SWIG_2(long jarg1, Property jarg1_, int jarg2, long jarg3);
  public final static native boolean Property_fromConfigFile__SWIG_0(long jarg1, Property jarg1_, String jarg2, boolean jarg3);
  public final static native boolean Property_fromConfigFile__SWIG_1(long jarg1, Property jarg1_, String jarg2);
  public final static native boolean Property_fromConfigFile__SWIG_2(long jarg1, Property jarg1_, String jarg2, long jarg3, Searchable jarg3_, boolean jarg4);
  public final static native boolean Property_fromConfigFile__SWIG_3(long jarg1, Property jarg1_, String jarg2, long jarg3, Searchable jarg3_);
  public final static native boolean Property_fromConfigDir__SWIG_0(long jarg1, Property jarg1_, String jarg2, String jarg3, boolean jarg4);
  public final static native boolean Property_fromConfigDir__SWIG_1(long jarg1, Property jarg1_, String jarg2, String jarg3);
  public final static native boolean Property_fromConfigDir__SWIG_2(long jarg1, Property jarg1_, String jarg2);
  public final static native void Property_fromConfig__SWIG_0(long jarg1, Property jarg1_, String jarg2, boolean jarg3);
  public final static native void Property_fromConfig__SWIG_1(long jarg1, Property jarg1_, String jarg2);
  public final static native void Property_fromConfig__SWIG_2(long jarg1, Property jarg1_, String jarg2, long jarg3, Searchable jarg3_, boolean jarg4);
  public final static native void Property_fromConfig__SWIG_3(long jarg1, Property jarg1_, String jarg2, long jarg3, Searchable jarg3_);
  public final static native void Property_fromQuery__SWIG_0(long jarg1, Property jarg1_, String jarg2, boolean jarg3);
  public final static native void Property_fromQuery__SWIG_1(long jarg1, Property jarg1_, String jarg2);
  public final static native String Property_toString(long jarg1, Property jarg1_);
  public final static native boolean Property_read(long jarg1, Property jarg1_, long jarg2, ConnectionReader jarg2_);
  public final static native boolean Property_write(long jarg1, Property jarg1_, long jarg2, ConnectionWriter jarg2_);
  public final static native String Property_toString_c(long jarg1, Property jarg1_);
  public final static native int BOTTLE_TAG_INT_get();
  public final static native int BOTTLE_TAG_VOCAB_get();
  public final static native int BOTTLE_TAG_DOUBLE_get();
  public final static native int BOTTLE_TAG_STRING_get();
  public final static native int BOTTLE_TAG_BLOB_get();
  public final static native int BOTTLE_TAG_INT64_get();
  public final static native int BOTTLE_TAG_LIST_get();
  public final static native int BOTTLE_TAG_DICT_get();
  public final static native boolean Bottle_check__SWIG_0_0(long jarg1, Bottle jarg1_, String jarg2);
  public final static native boolean Bottle_check__SWIG_0_1(long jarg1, Bottle jarg1_, String jarg2, String jarg3);
  public final static native long Bottle_check__SWIG_0_2(long jarg1, Bottle jarg1_, String jarg2, long jarg3, Value jarg3_, String jarg4);
  public final static native long Bottle_check__SWIG_0_3(long jarg1, Bottle jarg1_, String jarg2, long jarg3, Value jarg3_);
  public final static native long Bottle_findGroup__SWIG_0_0(long jarg1, Bottle jarg1_, String jarg2);
  public final static native long Bottle_findGroup__SWIG_0_1(long jarg1, Bottle jarg1_, String jarg2, String jarg3);
  public final static native long new_Bottle__SWIG_0();
  public final static native long new_Bottle__SWIG_1(String jarg1);
  public final static native long new_Bottle__SWIG_2(long jarg1, Bottle jarg1_);
  public final static native void Bottle_clear(long jarg1, Bottle jarg1_);
  public final static native void Bottle_addInt(long jarg1, Bottle jarg1_, int jarg2);
  public final static native void Bottle_addInt64(long jarg1, Bottle jarg1_, long jarg2);
  public final static native void Bottle_addVocab(long jarg1, Bottle jarg1_, int jarg2);
  public final static native void Bottle_addDouble(long jarg1, Bottle jarg1_, double jarg2);
  public final static native void Bottle_addString__SWIG_0(long jarg1, Bottle jarg1_, String jarg2);
  public final static native void Bottle_add__SWIG_0(long jarg1, Bottle jarg1_, long jarg2, Value jarg2_);
  public final static native void Bottle_add__SWIG_1(long jarg1, Bottle jarg1_, String jarg2);
  public final static native long Bottle_addList(long jarg1, Bottle jarg1_);
  public final static native long Bottle_addDict(long jarg1, Bottle jarg1_);
  public final static native long Bottle_pop(long jarg1, Bottle jarg1_);
  public final static native long Bottle_get(long jarg1, Bottle jarg1_, int jarg2);
  public final static native int Bottle_size(long jarg1, Bottle jarg1_);
  public final static native void Bottle_fromString(long jarg1, Bottle jarg1_, String jarg2);
  public final static native void Bottle_fromBinary(long jarg1, Bottle jarg1_, String jarg2, int jarg3);
  public final static native String Bottle_toBinary__SWIG_0(long jarg1, Bottle jarg1_, long jarg2);
  public final static native String Bottle_toBinary__SWIG_1(long jarg1, Bottle jarg1_);
  public final static native String Bottle_toString__SWIG_0(long jarg1, Bottle jarg1_);
  public final static native boolean Bottle_write__SWIG_0(long jarg1, Bottle jarg1_, long jarg2, ConnectionWriter jarg2_);
  public final static native boolean Bottle_read__SWIG_0(long jarg1, Bottle jarg1_, long jarg2, ConnectionReader jarg2_);
  public final static native boolean Bottle_write__SWIG_1(long jarg1, Bottle jarg1_, long jarg2, PortReader jarg2_, boolean jarg3);
  public final static native boolean Bottle_write__SWIG_2(long jarg1, Bottle jarg1_, long jarg2, PortReader jarg2_);
  public final static native boolean Bottle_read__SWIG_1(long jarg1, Bottle jarg1_, long jarg2, PortWriter jarg2_, boolean jarg3);
  public final static native boolean Bottle_read__SWIG_2(long jarg1, Bottle jarg1_, long jarg2, PortWriter jarg2_);
  public final static native void Bottle_onCommencement(long jarg1, Bottle jarg1_);
  public final static native long Bottle_find(long jarg1, Bottle jarg1_, String jarg2);
  public final static native boolean Bottle_isNull(long jarg1, Bottle jarg1_);
  public final static native void delete_Bottle(long jarg1);
  public final static native void Bottle_copy__SWIG_0(long jarg1, Bottle jarg1_, long jarg2, Bottle jarg2_, int jarg3, int jarg4);
  public final static native void Bottle_copy__SWIG_1(long jarg1, Bottle jarg1_, long jarg2, Bottle jarg2_, int jarg3);
  public final static native void Bottle_copy__SWIG_2(long jarg1, Bottle jarg1_, long jarg2, Bottle jarg2_);
  public final static native long Bottle_getNullBottle();
  public final static native boolean Bottle_isEqual(long jarg1, Bottle jarg1_, long jarg2, Bottle jarg2_);
  public final static native boolean Bottle_notEqual(long jarg1, Bottle jarg1_, long jarg2, Bottle jarg2_);
  public final static native void Bottle_append(long jarg1, Bottle jarg1_, long jarg2, Bottle jarg2_);
  public final static native long Bottle_tail(long jarg1, Bottle jarg1_);
  public final static native void Bottle_specialize(long jarg1, Bottle jarg1_, int jarg2);
  public final static native int Bottle_getSpecialization(long jarg1, Bottle jarg1_);
  public final static native void Bottle_setNested(long jarg1, Bottle jarg1_, boolean jarg2);
  public final static native void Bottle_hasChanged(long jarg1, Bottle jarg1_);
  public final static native String Bottle_toString__SWIG_1(int jarg1);
  public final static native String Bottle_describeBottleCode(int jarg1);
  public final static native String Bottle_toString_c(long jarg1, Bottle jarg1_);
  public final static native void typedReaderMissingCallback();
  public final static native void delete_PortReaderBufferBaseCreator(long jarg1);
  public final static native long PortReaderBufferBaseCreator_create(long jarg1, PortReaderBufferBaseCreator jarg1_);
  public final static native long new_PortReaderBufferBase(long jarg1);
  public final static native void delete_PortReaderBufferBase(long jarg1);
  public final static native void PortReaderBufferBase_setCreator(long jarg1, PortReaderBufferBase jarg1_, long jarg2, PortReaderBufferBaseCreator jarg2_);
  public final static native void PortReaderBufferBase_setReplier(long jarg1, PortReaderBufferBase jarg1_, long jarg2, PortReader jarg2_);
  public final static native void PortReaderBufferBase_setPrune__SWIG_0(long jarg1, PortReaderBufferBase jarg1_, boolean jarg2);
  public final static native void PortReaderBufferBase_setPrune__SWIG_1(long jarg1, PortReaderBufferBase jarg1_);
  public final static native void PortReaderBufferBase_setAllowReuse__SWIG_0(long jarg1, PortReaderBufferBase jarg1_, boolean jarg2);
  public final static native void PortReaderBufferBase_setAllowReuse__SWIG_1(long jarg1, PortReaderBufferBase jarg1_);
  public final static native void PortReaderBufferBase_setTargetPeriod(long jarg1, PortReaderBufferBase jarg1_, double jarg2);
  public final static native String PortReaderBufferBase_getName(long jarg1, PortReaderBufferBase jarg1_);
  public final static native long PortReaderBufferBase_getMaxBuffer(long jarg1, PortReaderBufferBase jarg1_);
  public final static native boolean PortReaderBufferBase_isClosed(long jarg1, PortReaderBufferBase jarg1_);
  public final static native void PortReaderBufferBase_clear(long jarg1, PortReaderBufferBase jarg1_);
  public final static native long PortReaderBufferBase_create(long jarg1, PortReaderBufferBase jarg1_);
  public final static native void PortReaderBufferBase_release__SWIG_0(long jarg1, PortReaderBufferBase jarg1_, long jarg2, PortReader jarg2_);
  public final static native int PortReaderBufferBase_check(long jarg1, PortReaderBufferBase jarg1_);
  public final static native boolean PortReaderBufferBase_read(long jarg1, PortReaderBufferBase jarg1_, long jarg2, ConnectionReader jarg2_);
  public final static native long PortReaderBufferBase_readBase(long jarg1, PortReaderBufferBase jarg1_, long jarg2, boolean jarg3);
  public final static native void PortReaderBufferBase_interrupt(long jarg1, PortReaderBufferBase jarg1_);
  public final static native void PortReaderBufferBase_attachBase(long jarg1, PortReaderBufferBase jarg1_, long jarg2, Port jarg2_);
  public final static native boolean PortReaderBufferBase_acceptObjectBase(long jarg1, PortReaderBufferBase jarg1_, long jarg2, PortReader jarg2_, long jarg3, PortWriter jarg3_);
  public final static native boolean PortReaderBufferBase_forgetObjectBase(long jarg1, PortReaderBufferBase jarg1_, long jarg2, PortReader jarg2_, long jarg3, PortWriter jarg3_);
  public final static native boolean PortReaderBufferBase_getEnvelope(long jarg1, PortReaderBufferBase jarg1_, long jarg2, PortReader jarg2_);
  public final static native long PortReaderBufferBase_acquire(long jarg1, PortReaderBufferBase jarg1_);
  public final static native void PortReaderBufferBase_release__SWIG_1(long jarg1, PortReaderBufferBase jarg1_, long jarg2);
  public final static native void PortReaderBufferBase_setAutoRelease__SWIG_0(long jarg1, PortReaderBufferBase jarg1_, boolean jarg2);
  public final static native void PortReaderBufferBase_setAutoRelease__SWIG_1(long jarg1, PortReaderBufferBase jarg1_);
  public final static native void delete_PortWriterBufferManager(long jarg1);
  public final static native void PortWriterBufferManager_onCompletion(long jarg1, PortWriterBufferManager jarg1_, long jarg2);
  public final static native long PortWriterWrapper_getInternal(long jarg1, PortWriterWrapper jarg1_);
  public final static native void delete_PortWriterWrapper(long jarg1);
  public final static native void delete_PortWriterBufferBase(long jarg1);
  public final static native long PortWriterBufferBase_create(long jarg1, PortWriterBufferBase jarg1_, long jarg2, PortWriterBufferManager jarg2_, long jarg3);
  public final static native long PortWriterBufferBase_getContent(long jarg1, PortWriterBufferBase jarg1_);
  public final static native boolean PortWriterBufferBase_releaseContent(long jarg1, PortWriterBufferBase jarg1_);
  public final static native int PortWriterBufferBase_getCount(long jarg1, PortWriterBufferBase jarg1_);
  public final static native void PortWriterBufferBase_attach(long jarg1, PortWriterBufferBase jarg1_, long jarg2, Port jarg2_);
  public final static native void PortWriterBufferBase_detach(long jarg1, PortWriterBufferBase jarg1_);
  public final static native void PortWriterBufferBase_write(long jarg1, PortWriterBufferBase jarg1_, boolean jarg2);
  public final static native void PortWriterBufferBase_waitForWrite(long jarg1, PortWriterBufferBase jarg1_);
  public final static native double Random_uniform__SWIG_0();
  public final static native double Random_normal__SWIG_0(double jarg1, double jarg2);
  public final static native void Random_seed_c(int jarg1);
  public final static native double Random_normal__SWIG_1();
  public final static native int Random_uniform__SWIG_1(int jarg1, int jarg2);
  public final static native long new_Random();
  public final static native void delete_Random(long jarg1);
  public final static native long new_Semaphore__SWIG_0(long jarg1);
  public final static native long new_Semaphore__SWIG_1();
  public final static native void delete_Semaphore(long jarg1);
  public final static native void Semaphore_wait_c(long jarg1, Semaphore jarg1_);
  public final static native boolean Semaphore_waitWithTimeout(long jarg1, Semaphore jarg1_, double jarg2);
  public final static native boolean Semaphore_check(long jarg1, Semaphore jarg1_);
  public final static native void Semaphore_post(long jarg1, Semaphore jarg1_);
  public final static native long new_Thread();
  public final static native void delete_Thread(long jarg1);
  public final static native void Thread_run(long jarg1, Thread jarg1_);
  public final static native void Thread_onStop(long jarg1, Thread jarg1_);
  public final static native void Thread_onStopSwigExplicitThread(long jarg1, Thread jarg1_);
  public final static native boolean Thread_start(long jarg1, Thread jarg1_);
  public final static native boolean Thread_stop(long jarg1, Thread jarg1_);
  public final static native void Thread_beforeStart(long jarg1, Thread jarg1_);
  public final static native void Thread_beforeStartSwigExplicitThread(long jarg1, Thread jarg1_);
  public final static native void Thread_afterStart(long jarg1, Thread jarg1_, boolean jarg2);
  public final static native void Thread_afterStartSwigExplicitThread(long jarg1, Thread jarg1_, boolean jarg2);
  public final static native boolean Thread_threadInit(long jarg1, Thread jarg1_);
  public final static native boolean Thread_threadInitSwigExplicitThread(long jarg1, Thread jarg1_);
  public final static native void Thread_threadRelease(long jarg1, Thread jarg1_);
  public final static native void Thread_threadReleaseSwigExplicitThread(long jarg1, Thread jarg1_);
  public final static native boolean Thread_isStopping(long jarg1, Thread jarg1_);
  public final static native boolean Thread_isRunning(long jarg1, Thread jarg1_);
  public final static native void Thread_setOptions__SWIG_0(long jarg1, Thread jarg1_, int jarg2);
  public final static native void Thread_setOptions__SWIG_1(long jarg1, Thread jarg1_);
  public final static native int Thread_getCount();
  public final static native int Thread_getKey(long jarg1, Thread jarg1_);
  public final static native int Thread_getKeyOfCaller();
  public final static native int Thread_setPriority__SWIG_0(long jarg1, Thread jarg1_, int jarg2, int jarg3);
  public final static native int Thread_setPriority__SWIG_1(long jarg1, Thread jarg1_, int jarg2);
  public final static native int Thread_getPriority(long jarg1, Thread jarg1_);
  public final static native void Thread_setDefaultStackSize(int jarg1);
  public final static native boolean Thread_join__SWIG_0(long jarg1, Thread jarg1_, double jarg2);
  public final static native boolean Thread_join__SWIG_1(long jarg1, Thread jarg1_);
  public final static native void Thread_director_connect(Thread obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void Thread_change_ownership(Thread obj, long cptr, boolean take_or_release);
  public final static native void delete_RateThread(long jarg1);
  public final static native boolean RateThread_threadInit(long jarg1, RateThread jarg1_);
  public final static native void RateThread_threadRelease(long jarg1, RateThread jarg1_);
  public final static native void RateThread_run(long jarg1, RateThread jarg1_);
  public final static native boolean RateThread_start(long jarg1, RateThread jarg1_);
  public final static native boolean RateThread_step(long jarg1, RateThread jarg1_);
  public final static native void RateThread_stop(long jarg1, RateThread jarg1_);
  public final static native void RateThread_askToStop(long jarg1, RateThread jarg1_);
  public final static native boolean RateThread_isRunning(long jarg1, RateThread jarg1_);
  public final static native boolean RateThread_isSuspended(long jarg1, RateThread jarg1_);
  public final static native boolean RateThread_setRate(long jarg1, RateThread jarg1_, int jarg2);
  public final static native double RateThread_getRate(long jarg1, RateThread jarg1_);
  public final static native void RateThread_suspend(long jarg1, RateThread jarg1_);
  public final static native void RateThread_resume(long jarg1, RateThread jarg1_);
  public final static native void RateThread_resetStat(long jarg1, RateThread jarg1_);
  public final static native double RateThread_getEstPeriod__SWIG_0(long jarg1, RateThread jarg1_);
  public final static native void RateThread_getEstPeriod__SWIG_1(long jarg1, RateThread jarg1_, long jarg2, long jarg3);
  public final static native long RateThread_getIterations(long jarg1, RateThread jarg1_);
  public final static native double RateThread_getEstUsed__SWIG_0(long jarg1, RateThread jarg1_);
  public final static native void RateThread_getEstUsed__SWIG_1(long jarg1, RateThread jarg1_, long jarg2, long jarg3);
  public final static native void RateThread_beforeStart(long jarg1, RateThread jarg1_);
  public final static native void RateThread_afterStart(long jarg1, RateThread jarg1_, boolean jarg2);
  public final static native int RateThread_setPriority__SWIG_0(long jarg1, RateThread jarg1_, int jarg2, int jarg3);
  public final static native int RateThread_setPriority__SWIG_1(long jarg1, RateThread jarg1_, int jarg2);
  public final static native int RateThread_getPriority(long jarg1, RateThread jarg1_);
  public final static native long new_RateThreadWrapper__SWIG_0();
  public final static native long new_RateThreadWrapper__SWIG_1(long jarg1);
  public final static native void delete_RateThreadWrapper(long jarg1);
  public final static native void RateThreadWrapper_detach(long jarg1, RateThreadWrapper jarg1_);
  public final static native boolean RateThreadWrapper_attach__SWIG_0(long jarg1, RateThreadWrapper jarg1_, long jarg2);
  public final static native boolean RateThreadWrapper_open__SWIG_0(long jarg1, RateThreadWrapper jarg1_, double jarg2, boolean jarg3);
  public final static native boolean RateThreadWrapper_open__SWIG_1(long jarg1, RateThreadWrapper jarg1_, double jarg2);
  public final static native boolean RateThreadWrapper_open__SWIG_2(long jarg1, RateThreadWrapper jarg1_);
  public final static native void RateThreadWrapper_close(long jarg1, RateThreadWrapper jarg1_);
  public final static native void RateThreadWrapper_stop(long jarg1, RateThreadWrapper jarg1_);
  public final static native void RateThreadWrapper_run(long jarg1, RateThreadWrapper jarg1_);
  public final static native boolean RateThreadWrapper_threadInit(long jarg1, RateThreadWrapper jarg1_);
  public final static native void RateThreadWrapper_threadRelease(long jarg1, RateThreadWrapper jarg1_);
  public final static native void RateThreadWrapper_afterStart(long jarg1, RateThreadWrapper jarg1_, boolean jarg2);
  public final static native void RateThreadWrapper_beforeStart(long jarg1, RateThreadWrapper jarg1_);
  public final static native long RateThreadWrapper_getAttachment(long jarg1, RateThreadWrapper jarg1_);
  public final static native void Time_delay(double jarg1);
  public final static native double Time_now();
  public final static native void Time_yield();
  public final static native void Time_turboBoost();
  public final static native void Time_useSystemClock();
  public final static native void Time_useNetworkClock(String jarg1);
  public final static native void Time_useCustomClock(long jarg1);
  public final static native boolean Time_isSystemClock();
  public final static native boolean Time_isValid();
  public final static native long new_Time();
  public final static native void delete_Time(long jarg1);
  public final static native long new_RFModule();
  public final static native void delete_RFModule(long jarg1);
  public final static native double RFModule_getPeriod(long jarg1, RFModule jarg1_);
  public final static native double RFModule_getPeriodSwigExplicitRFModule(long jarg1, RFModule jarg1_);
  public final static native boolean RFModule_updateModule(long jarg1, RFModule jarg1_);
  public final static native int RFModule_runModule__SWIG_0(long jarg1, RFModule jarg1_);
  public final static native int RFModule_runModuleSwigExplicitRFModule__SWIG_0(long jarg1, RFModule jarg1_);
  public final static native int RFModule_runModule__SWIG_1(long jarg1, RFModule jarg1_, long jarg2, ResourceFinder jarg2_);
  public final static native int RFModule_runModuleSwigExplicitRFModule__SWIG_1(long jarg1, RFModule jarg1_, long jarg2, ResourceFinder jarg2_);
  public final static native boolean RFModule_configure(long jarg1, RFModule jarg1_, long jarg2, ResourceFinder jarg2_);
  public final static native boolean RFModule_configureSwigExplicitRFModule(long jarg1, RFModule jarg1_, long jarg2, ResourceFinder jarg2_);
  public final static native boolean RFModule_respond(long jarg1, RFModule jarg1_, long jarg2, Bottle jarg2_, long jarg3, Bottle jarg3_);
  public final static native boolean RFModule_respondSwigExplicitRFModule(long jarg1, RFModule jarg1_, long jarg2, Bottle jarg2_, long jarg3, Bottle jarg3_);
  public final static native boolean RFModule_attach(long jarg1, RFModule jarg1_, long jarg2, Port jarg2_);
  public final static native boolean RFModule_attachSwigExplicitRFModule(long jarg1, RFModule jarg1_, long jarg2, Port jarg2_);
  public final static native boolean RFModule_attach_rpc_server(long jarg1, RFModule jarg1_, long jarg2, RpcServer jarg2_);
  public final static native boolean RFModule_attach_rpc_serverSwigExplicitRFModule(long jarg1, RFModule jarg1_, long jarg2, RpcServer jarg2_);
  public final static native boolean RFModule_attachTerminal(long jarg1, RFModule jarg1_);
  public final static native boolean RFModule_detachTerminal(long jarg1, RFModule jarg1_);
  public final static native boolean RFModule_interruptModule(long jarg1, RFModule jarg1_);
  public final static native boolean RFModule_interruptModuleSwigExplicitRFModule(long jarg1, RFModule jarg1_);
  public final static native boolean RFModule_close(long jarg1, RFModule jarg1_);
  public final static native boolean RFModule_closeSwigExplicitRFModule(long jarg1, RFModule jarg1_);
  public final static native void RFModule_stopModule__SWIG_0(long jarg1, RFModule jarg1_, boolean jarg2);
  public final static native void RFModule_stopModule__SWIG_1(long jarg1, RFModule jarg1_);
  public final static native boolean RFModule_isStopping(long jarg1, RFModule jarg1_);
  public final static native String RFModule_getName__SWIG_0(long jarg1, RFModule jarg1_, String jarg2);
  public final static native String RFModule_getName__SWIG_1(long jarg1, RFModule jarg1_);
  public final static native void RFModule_setName(long jarg1, RFModule jarg1_, String jarg2);
  public final static native boolean RFModule_safeRespond(long jarg1, RFModule jarg1_, long jarg2, Bottle jarg2_, long jarg3, Bottle jarg3_);
  public final static native void RFModule_director_connect(RFModule obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void RFModule_change_ownership(RFModule obj, long cptr, boolean take_or_release);
  public final static native long new_Stamp__SWIG_0();
  public final static native long new_Stamp__SWIG_1(int jarg1, double jarg2);
  public final static native int Stamp_getCount(long jarg1, Stamp jarg1_);
  public final static native double Stamp_getTime(long jarg1, Stamp jarg1_);
  public final static native boolean Stamp_isValid(long jarg1, Stamp jarg1_);
  public final static native int Stamp_getMaxCount(long jarg1, Stamp jarg1_);
  public final static native void Stamp_update__SWIG_0(long jarg1, Stamp jarg1_);
  public final static native void Stamp_update__SWIG_1(long jarg1, Stamp jarg1_, double jarg2);
  public final static native boolean Stamp_read(long jarg1, Stamp jarg1_, long jarg2, ConnectionReader jarg2_);
  public final static native boolean Stamp_write(long jarg1, Stamp jarg1_, long jarg2, ConnectionWriter jarg2_);
  public final static native void delete_Stamp(long jarg1);
  public final static native void delete_Stamped(long jarg1);
  public final static native long Stamped_getStamp(long jarg1, Stamped jarg1_);
  public final static native void delete_NameStore(long jarg1);
  public final static native long NameStore_query(long jarg1, NameStore jarg1_, String jarg2);
  public final static native boolean NameStore_announce(long jarg1, NameStore jarg1_, String jarg2, int jarg3);
  public final static native boolean NameStore_process(long jarg1, NameStore jarg1_, long jarg2, PortWriter jarg2_, long jarg3, PortReader jarg3_, long jarg4, Contact jarg4_);
  public final static native void ContactStyle_admin_set(long jarg1, ContactStyle jarg1_, boolean jarg2);
  public final static native boolean ContactStyle_admin_get(long jarg1, ContactStyle jarg1_);
  public final static native void ContactStyle_quiet_set(long jarg1, ContactStyle jarg1_, boolean jarg2);
  public final static native boolean ContactStyle_quiet_get(long jarg1, ContactStyle jarg1_);
  public final static native void ContactStyle_verboseOnSuccess_set(long jarg1, ContactStyle jarg1_, boolean jarg2);
  public final static native boolean ContactStyle_verboseOnSuccess_get(long jarg1, ContactStyle jarg1_);
  public final static native void ContactStyle_timeout_set(long jarg1, ContactStyle jarg1_, double jarg2);
  public final static native double ContactStyle_timeout_get(long jarg1, ContactStyle jarg1_);
  public final static native void ContactStyle_carrier_set(long jarg1, ContactStyle jarg1_, String jarg2);
  public final static native String ContactStyle_carrier_get(long jarg1, ContactStyle jarg1_);
  public final static native void ContactStyle_expectReply_set(long jarg1, ContactStyle jarg1_, boolean jarg2);
  public final static native boolean ContactStyle_expectReply_get(long jarg1, ContactStyle jarg1_);
  public final static native void ContactStyle_persistent_set(long jarg1, ContactStyle jarg1_, boolean jarg2);
  public final static native boolean ContactStyle_persistent_get(long jarg1, ContactStyle jarg1_);
  public final static native int ContactStyle_OPENENDED_get();
  public final static native int ContactStyle_END_WITH_FROM_PORT_get();
  public final static native int ContactStyle_END_WITH_TO_PORT_get();
  public final static native int ContactStyle_NO_PERSISTENCE_get();
  public final static native void ContactStyle_persistenceType_set(long jarg1, ContactStyle jarg1_, int jarg2);
  public final static native int ContactStyle_persistenceType_get(long jarg1, ContactStyle jarg1_);
  public final static native long new_ContactStyle();
  public final static native void delete_ContactStyle(long jarg1);
  public final static native long new_ResourceFinder__SWIG_0();
  public final static native long new_ResourceFinder__SWIG_1(long jarg1, ResourceFinder jarg1_);
  public final static native void delete_ResourceFinder(long jarg1);
  public final static native boolean ResourceFinder_setVerbose__SWIG_0(long jarg1, ResourceFinder jarg1_, boolean jarg2);
  public final static native boolean ResourceFinder_setVerbose__SWIG_1(long jarg1, ResourceFinder jarg1_);
  public final static native boolean ResourceFinder_setQuiet__SWIG_0(long jarg1, ResourceFinder jarg1_, boolean jarg2);
  public final static native boolean ResourceFinder_setQuiet__SWIG_1(long jarg1, ResourceFinder jarg1_);
  public final static native boolean ResourceFinder_configure__SWIG_0(long jarg1, ResourceFinder jarg1_, String jarg2, int jarg3, long jarg4, boolean jarg5);
  public final static native boolean ResourceFinder_configure__SWIG_1(long jarg1, ResourceFinder jarg1_, String jarg2, int jarg3, long jarg4);
  public final static native boolean ResourceFinder_configure__SWIG_2(long jarg1, ResourceFinder jarg1_, int jarg2, long jarg3);
  public final static native boolean ResourceFinder_setDefaultContext(long jarg1, ResourceFinder jarg1_, String jarg2);
  public final static native boolean ResourceFinder_setContext(long jarg1, ResourceFinder jarg1_, String jarg2);
  public final static native boolean ResourceFinder_setDefault__SWIG_0(long jarg1, ResourceFinder jarg1_, String jarg2, String jarg3);
  public final static native boolean ResourceFinder_setDefault__SWIG_1(long jarg1, ResourceFinder jarg1_, String jarg2, long jarg3, Value jarg3_);
  public final static native boolean ResourceFinder_setDefaultConfigFile(long jarg1, ResourceFinder jarg1_, String jarg2);
  public final static native String ResourceFinder_findFile__SWIG_0(long jarg1, ResourceFinder jarg1_, String jarg2);
  public final static native String ResourceFinder_findFileByName__SWIG_0(long jarg1, ResourceFinder jarg1_, String jarg2);
  public final static native String ResourceFinder_findPath__SWIG_0(long jarg1, ResourceFinder jarg1_, String jarg2);
  public final static native long ResourceFinder_findPaths__SWIG_0(long jarg1, ResourceFinder jarg1_, String jarg2);
  public final static native String ResourceFinder_findPath__SWIG_1(long jarg1, ResourceFinder jarg1_);
  public final static native String ResourceFinder_getContext(long jarg1, ResourceFinder jarg1_);
  public final static native String ResourceFinder_getContextPath(long jarg1, ResourceFinder jarg1_);
  public final static native long ResourceFinder_getContexts(long jarg1, ResourceFinder jarg1_);
  public final static native boolean ResourceFinder_check__SWIG_0(long jarg1, ResourceFinder jarg1_, String jarg2);
  public final static native long ResourceFinder_find(long jarg1, ResourceFinder jarg1_, String jarg2);
  public final static native long ResourceFinder_findGroup__SWIG_0(long jarg1, ResourceFinder jarg1_, String jarg2);
  public final static native boolean ResourceFinder_isNull(long jarg1, ResourceFinder jarg1_);
  public final static native String ResourceFinder_toString(long jarg1, ResourceFinder jarg1_);
  public final static native long ResourceFinder_findNestedResourceFinder(long jarg1, ResourceFinder jarg1_, String jarg2);
  public final static native boolean ResourceFinder_isConfigured(long jarg1, ResourceFinder jarg1_);
  public final static native long ResourceFinder_getResourceFinderSingleton();
  public final static native boolean ResourceFinder_check__SWIG_1_0(long jarg1, ResourceFinder jarg1_, String jarg2, String jarg3);
  public final static native long ResourceFinder_check__SWIG_1_1(long jarg1, ResourceFinder jarg1_, String jarg2, long jarg3, Value jarg3_, String jarg4);
  public final static native long ResourceFinder_check__SWIG_1_2(long jarg1, ResourceFinder jarg1_, String jarg2, long jarg3, Value jarg3_);
  public final static native long ResourceFinder_findGroup__SWIG_1_0(long jarg1, ResourceFinder jarg1_, String jarg2, String jarg3);
  public final static native String ResourceFinder_getDataHome();
  public final static native String ResourceFinder_getDataHomeNoCreate();
  public final static native String ResourceFinder_getConfigHome();
  public final static native String ResourceFinder_getConfigHomeNoCreate();
  public final static native String ResourceFinder_getHomeContextPath(long jarg1, ResourceFinder jarg1_);
  public final static native String ResourceFinder_getHomeRobotPath(long jarg1, ResourceFinder jarg1_);
  public final static native long ResourceFinder_getDataDirs();
  public final static native long ResourceFinder_getConfigDirs();
  public final static native long ResourceFinder_findPaths__SWIG_1(long jarg1, ResourceFinder jarg1_, String jarg2, long jarg3);
  public final static native String ResourceFinder_findPath__SWIG_2(long jarg1, ResourceFinder jarg1_, String jarg2, long jarg3);
  public final static native String ResourceFinder_findFile__SWIG_1(long jarg1, ResourceFinder jarg1_, String jarg2, long jarg3);
  public final static native String ResourceFinder_findFileByName__SWIG_1(long jarg1, ResourceFinder jarg1_, String jarg2, long jarg3);
  public final static native boolean ResourceFinder_readConfig(long jarg1, ResourceFinder jarg1_, long jarg2, Property jarg2_, String jarg3, long jarg4);
  public final static native boolean ResourceFinder_configure__SWIG_3(long jarg1, ResourceFinder jarg1_, String jarg2, long jarg3, SVector jarg3_, boolean jarg4);
  public final static native boolean ResourceFinder_configure__SWIG_4(long jarg1, ResourceFinder jarg1_, String jarg2, long jarg3, SVector jarg3_);
  public final static native boolean RpcServer_open_SWIG_0_0(long jarg1, RpcServer jarg1_);
  public final static native boolean RpcServer_open_SWIG_0_1(long jarg1, RpcServer jarg1_, String jarg2);
  public final static native boolean RpcServer_open_SWIG_0_2(long jarg1, RpcServer jarg1_, long jarg2, Contact jarg2_, boolean jarg3);
  public final static native boolean RpcServer_open_SWIG_0_3(long jarg1, RpcServer jarg1_, long jarg2, Contact jarg2_);
  public final static native long new_RpcServer();
  public final static native void delete_RpcServer(long jarg1);
  public final static native boolean RpcServer_write__SWIG_0(long jarg1, RpcServer jarg1_, long jarg2, PortWriter jarg2_, long jarg3, PortWriter jarg3_);
  public final static native boolean RpcServer_write__SWIG_1(long jarg1, RpcServer jarg1_, long jarg2, PortWriter jarg2_);
  public final static native boolean RpcServer_write__SWIG_2(long jarg1, RpcServer jarg1_, long jarg2, PortWriter jarg2_, long jarg3, PortReader jarg3_, long jarg4, PortWriter jarg4_);
  public final static native boolean RpcServer_write__SWIG_3(long jarg1, RpcServer jarg1_, long jarg2, PortWriter jarg2_, long jarg3, PortReader jarg3_);
  public final static native boolean RpcServer_read__SWIG_0(long jarg1, RpcServer jarg1_, long jarg2, PortReader jarg2_, boolean jarg3);
  public final static native boolean RpcServer_read__SWIG_1(long jarg1, RpcServer jarg1_, long jarg2, PortReader jarg2_);
  public final static native void RpcServer_setInputMode(long jarg1, RpcServer jarg1_, boolean jarg2);
  public final static native void RpcServer_setOutputMode(long jarg1, RpcServer jarg1_, boolean jarg2);
  public final static native void RpcServer_setRpcMode(long jarg1, RpcServer jarg1_, boolean jarg2);
  public final static native long RpcServer_asPort__SWIG_0(long jarg1, RpcServer jarg1_);
  public final static native long new_RpcClient();
  public final static native void delete_RpcClient(long jarg1);
  public final static native boolean RpcClient_read__SWIG_0(long jarg1, RpcClient jarg1_, long jarg2, PortReader jarg2_, boolean jarg3);
  public final static native boolean RpcClient_read__SWIG_1(long jarg1, RpcClient jarg1_, long jarg2, PortReader jarg2_);
  public final static native boolean RpcClient_reply(long jarg1, RpcClient jarg1_, long jarg2, PortWriter jarg2_);
  public final static native boolean RpcClient_replyAndDrop(long jarg1, RpcClient jarg1_, long jarg2, PortWriter jarg2_);
  public final static native void RpcClient_setInputMode(long jarg1, RpcClient jarg1_, boolean jarg2);
  public final static native void RpcClient_setOutputMode(long jarg1, RpcClient jarg1_, boolean jarg2);
  public final static native void RpcClient_setRpcMode(long jarg1, RpcClient jarg1_, boolean jarg2);
  public final static native long RpcClient_asPort__SWIG_0(long jarg1, RpcClient jarg1_);
  public final static native boolean RpcClient_write(long jarg1, RpcClient jarg1_, long jarg2, Bottle jarg2_, long jarg3, Bottle jarg3_);
  public final static native long new_DummyConnector();
  public final static native void delete_DummyConnector(long jarg1);
  public final static native void DummyConnector_setTextMode(long jarg1, DummyConnector jarg1_, boolean jarg2);
  public final static native long DummyConnector_getCleanWriter(long jarg1, DummyConnector jarg1_);
  public final static native long DummyConnector_getWriter(long jarg1, DummyConnector jarg1_);
  public final static native long DummyConnector_getReader(long jarg1, DummyConnector jarg1_);
  public final static native void DummyConnector_reset(long jarg1, DummyConnector jarg1_);
  public final static native long new_Things();
  public final static native void delete_Things(long jarg1);
  public final static native void Things_setPortWriter(long jarg1, Things jarg1_, long jarg2, PortWriter jarg2_);
  public final static native long Things_getPortWriter(long jarg1, Things jarg1_);
  public final static native boolean Things_setConnectionReader(long jarg1, Things jarg1_, long jarg2, ConnectionReader jarg2_);
  public final static native boolean Things_write(long jarg1, Things jarg1_, long jarg2, ConnectionWriter jarg2_);
  public final static native void Things_reset(long jarg1, Things jarg1_);
  public final static native boolean Things_hasBeenRead(long jarg1, Things jarg1_);
  public final static native long Things_asValue(long jarg1, Things jarg1_);
  public final static native long Things_asBottle(long jarg1, Things jarg1_);
  public final static native long Things_asProperty(long jarg1, Things jarg1_);
  public final static native long Things_asVector(long jarg1, Things jarg1_);
  public final static native long Things_asMatrix(long jarg1, Things jarg1_);
  public final static native long Things_asImage(long jarg1, Things jarg1_);
  public final static native long Things_asImageOfPixelRgb(long jarg1, Things jarg1_);
  public final static native long Things_asImageOfPixelBgr(long jarg1, Things jarg1_);
  public final static native long Things_asImageOfPixelMono(long jarg1, Things jarg1_);
  public final static native void TypedReaderProperty_setStrict__SWIG_0(long jarg1, TypedReaderProperty jarg1_, boolean jarg2);
  public final static native void TypedReaderProperty_setStrict__SWIG_1(long jarg1, TypedReaderProperty jarg1_);
  public final static native long TypedReaderProperty_read__SWIG_0(long jarg1, TypedReaderProperty jarg1_, boolean jarg2);
  public final static native long TypedReaderProperty_read__SWIG_1(long jarg1, TypedReaderProperty jarg1_);
  public final static native void TypedReaderProperty_interrupt(long jarg1, TypedReaderProperty jarg1_);
  public final static native long TypedReaderProperty_lastRead(long jarg1, TypedReaderProperty jarg1_);
  public final static native boolean TypedReaderProperty_isClosed(long jarg1, TypedReaderProperty jarg1_);
  public final static native void TypedReaderProperty_useCallback(long jarg1, TypedReaderProperty jarg1_, long jarg2, PropertyCallback jarg2_);
  public final static native void TypedReaderProperty_disableCallback(long jarg1, TypedReaderProperty jarg1_);
  public final static native int TypedReaderProperty_getPendingReads(long jarg1, TypedReaderProperty jarg1_);
  public final static native void delete_TypedReaderProperty(long jarg1);
  public final static native String TypedReaderProperty_getName(long jarg1, TypedReaderProperty jarg1_);
  public final static native void TypedReaderProperty_setReplier(long jarg1, TypedReaderProperty jarg1_, long jarg2, PortReader jarg2_);
  public final static native long TypedReaderProperty_acquire(long jarg1, TypedReaderProperty jarg1_);
  public final static native void TypedReaderProperty_release(long jarg1, TypedReaderProperty jarg1_, long jarg2);
  public final static native void TypedReaderProperty_setTargetPeriod(long jarg1, TypedReaderProperty jarg1_, double jarg2);
  public final static native void delete_PropertyCallback(long jarg1);
  public final static native void PropertyCallback_onRead__SWIG_0(long jarg1, PropertyCallback jarg1_, long jarg2, Property jarg2_);
  public final static native void PropertyCallback_onReadSwigExplicitPropertyCallback__SWIG_0(long jarg1, PropertyCallback jarg1_, long jarg2, Property jarg2_);
  public final static native void PropertyCallback_onRead__SWIG_1(long jarg1, PropertyCallback jarg1_, long jarg2, Property jarg2_, long jarg3, TypedReaderProperty jarg3_);
  public final static native void PropertyCallback_onReadSwigExplicitPropertyCallback__SWIG_1(long jarg1, PropertyCallback jarg1_, long jarg2, Property jarg2_, long jarg3, TypedReaderProperty jarg3_);
  public final static native long new_PropertyCallback();
  public final static native void PropertyCallback_director_connect(PropertyCallback obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void PropertyCallback_change_ownership(PropertyCallback obj, long cptr, boolean take_or_release);
  public final static native long new_BufferedPortProperty__SWIG_0();
  public final static native long new_BufferedPortProperty__SWIG_1(long jarg1, Port jarg1_);
  public final static native void delete_BufferedPortProperty(long jarg1);
  public final static native boolean BufferedPortProperty_addOutput__SWIG_0(long jarg1, BufferedPortProperty jarg1_, String jarg2);
  public final static native boolean BufferedPortProperty_addOutput__SWIG_1(long jarg1, BufferedPortProperty jarg1_, String jarg2, String jarg3);
  public final static native boolean BufferedPortProperty_addOutput__SWIG_2(long jarg1, BufferedPortProperty jarg1_, long jarg2, Contact jarg2_);
  public final static native void BufferedPortProperty_close(long jarg1, BufferedPortProperty jarg1_);
  public final static native void BufferedPortProperty_interrupt(long jarg1, BufferedPortProperty jarg1_);
  public final static native void BufferedPortProperty_resume(long jarg1, BufferedPortProperty jarg1_);
  public final static native int BufferedPortProperty_getPendingReads(long jarg1, BufferedPortProperty jarg1_);
  public final static native long BufferedPortProperty_where(long jarg1, BufferedPortProperty jarg1_);
  public final static native String BufferedPortProperty_getName(long jarg1, BufferedPortProperty jarg1_);
  public final static native long BufferedPortProperty_prepare(long jarg1, BufferedPortProperty jarg1_);
  public final static native boolean BufferedPortProperty_unprepare(long jarg1, BufferedPortProperty jarg1_);
  public final static native void BufferedPortProperty_write__SWIG_0(long jarg1, BufferedPortProperty jarg1_, boolean jarg2);
  public final static native void BufferedPortProperty_write__SWIG_1(long jarg1, BufferedPortProperty jarg1_);
  public final static native void BufferedPortProperty_writeStrict(long jarg1, BufferedPortProperty jarg1_);
  public final static native void BufferedPortProperty_waitForWrite(long jarg1, BufferedPortProperty jarg1_);
  public final static native void BufferedPortProperty_setStrict__SWIG_0(long jarg1, BufferedPortProperty jarg1_, boolean jarg2);
  public final static native void BufferedPortProperty_setStrict__SWIG_1(long jarg1, BufferedPortProperty jarg1_);
  public final static native long BufferedPortProperty_read__SWIG_0(long jarg1, BufferedPortProperty jarg1_, boolean jarg2);
  public final static native long BufferedPortProperty_read__SWIG_1(long jarg1, BufferedPortProperty jarg1_);
  public final static native long BufferedPortProperty_lastRead(long jarg1, BufferedPortProperty jarg1_);
  public final static native boolean BufferedPortProperty_isClosed(long jarg1, BufferedPortProperty jarg1_);
  public final static native void BufferedPortProperty_setReplier(long jarg1, BufferedPortProperty jarg1_, long jarg2, PortReader jarg2_);
  public final static native void BufferedPortProperty_setReader(long jarg1, BufferedPortProperty jarg1_, long jarg2, PortReader jarg2_);
  public final static native void BufferedPortProperty_setAdminReader(long jarg1, BufferedPortProperty jarg1_, long jarg2, PortReader jarg2_);
  public final static native void BufferedPortProperty_onRead(long jarg1, BufferedPortProperty jarg1_, long jarg2, Property jarg2_);
  public final static native void BufferedPortProperty_useCallback__SWIG_0(long jarg1, BufferedPortProperty jarg1_, long jarg2, PropertyCallback jarg2_);
  public final static native void BufferedPortProperty_useCallback__SWIG_1(long jarg1, BufferedPortProperty jarg1_);
  public final static native void BufferedPortProperty_disableCallback(long jarg1, BufferedPortProperty jarg1_);
  public final static native boolean BufferedPortProperty_setEnvelope(long jarg1, BufferedPortProperty jarg1_, long jarg2, PortWriter jarg2_);
  public final static native boolean BufferedPortProperty_getEnvelope(long jarg1, BufferedPortProperty jarg1_, long jarg2, PortReader jarg2_);
  public final static native int BufferedPortProperty_getInputCount(long jarg1, BufferedPortProperty jarg1_);
  public final static native int BufferedPortProperty_getOutputCount(long jarg1, BufferedPortProperty jarg1_);
  public final static native boolean BufferedPortProperty_isWriting(long jarg1, BufferedPortProperty jarg1_);
  public final static native void BufferedPortProperty_getReport(long jarg1, BufferedPortProperty jarg1_, long jarg2, PortReport jarg2_);
  public final static native void BufferedPortProperty_setReporter(long jarg1, BufferedPortProperty jarg1_, long jarg2, PortReport jarg2_);
  public final static native long BufferedPortProperty_acquire(long jarg1, BufferedPortProperty jarg1_);
  public final static native void BufferedPortProperty_release(long jarg1, BufferedPortProperty jarg1_, long jarg2);
  public final static native void BufferedPortProperty_setTargetPeriod(long jarg1, BufferedPortProperty jarg1_, double jarg2);
  public final static native long BufferedPortProperty_getType(long jarg1, BufferedPortProperty jarg1_);
  public final static native void BufferedPortProperty_promiseType(long jarg1, BufferedPortProperty jarg1_, long jarg2);
  public final static native void BufferedPortProperty_setInputMode(long jarg1, BufferedPortProperty jarg1_, boolean jarg2);
  public final static native void BufferedPortProperty_setOutputMode(long jarg1, BufferedPortProperty jarg1_, boolean jarg2);
  public final static native void BufferedPortProperty_setRpcMode(long jarg1, BufferedPortProperty jarg1_, boolean jarg2);
  public final static native long BufferedPortProperty_acquireProperties(long jarg1, BufferedPortProperty jarg1_, boolean jarg2);
  public final static native void BufferedPortProperty_releaseProperties(long jarg1, BufferedPortProperty jarg1_, long jarg2, Property jarg2_);
  public final static native void BufferedPortProperty_includeNodeInName(long jarg1, BufferedPortProperty jarg1_, boolean jarg2);
  public final static native boolean BufferedPortProperty_setCallbackLock(long jarg1, BufferedPortProperty jarg1_, long jarg2);
  public final static native boolean BufferedPortProperty_removeCallbackLock(long jarg1, BufferedPortProperty jarg1_);
  public final static native boolean BufferedPortProperty_lockCallback(long jarg1, BufferedPortProperty jarg1_);
  public final static native boolean BufferedPortProperty_tryLockCallback(long jarg1, BufferedPortProperty jarg1_);
  public final static native void BufferedPortProperty_unlockCallback(long jarg1, BufferedPortProperty jarg1_);
  public final static native void TypedReaderBottle_setStrict__SWIG_0(long jarg1, TypedReaderBottle jarg1_, boolean jarg2);
  public final static native void TypedReaderBottle_setStrict__SWIG_1(long jarg1, TypedReaderBottle jarg1_);
  public final static native long TypedReaderBottle_read__SWIG_0(long jarg1, TypedReaderBottle jarg1_, boolean jarg2);
  public final static native long TypedReaderBottle_read__SWIG_1(long jarg1, TypedReaderBottle jarg1_);
  public final static native void TypedReaderBottle_interrupt(long jarg1, TypedReaderBottle jarg1_);
  public final static native long TypedReaderBottle_lastRead(long jarg1, TypedReaderBottle jarg1_);
  public final static native boolean TypedReaderBottle_isClosed(long jarg1, TypedReaderBottle jarg1_);
  public final static native void TypedReaderBottle_useCallback(long jarg1, TypedReaderBottle jarg1_, long jarg2, BottleCallback jarg2_);
  public final static native void TypedReaderBottle_disableCallback(long jarg1, TypedReaderBottle jarg1_);
  public final static native int TypedReaderBottle_getPendingReads(long jarg1, TypedReaderBottle jarg1_);
  public final static native void delete_TypedReaderBottle(long jarg1);
  public final static native String TypedReaderBottle_getName(long jarg1, TypedReaderBottle jarg1_);
  public final static native void TypedReaderBottle_setReplier(long jarg1, TypedReaderBottle jarg1_, long jarg2, PortReader jarg2_);
  public final static native long TypedReaderBottle_acquire(long jarg1, TypedReaderBottle jarg1_);
  public final static native void TypedReaderBottle_release(long jarg1, TypedReaderBottle jarg1_, long jarg2);
  public final static native void TypedReaderBottle_setTargetPeriod(long jarg1, TypedReaderBottle jarg1_, double jarg2);
  public final static native void delete_BottleCallback(long jarg1);
  public final static native void BottleCallback_onRead__SWIG_0(long jarg1, BottleCallback jarg1_, long jarg2, Bottle jarg2_);
  public final static native void BottleCallback_onReadSwigExplicitBottleCallback__SWIG_0(long jarg1, BottleCallback jarg1_, long jarg2, Bottle jarg2_);
  public final static native void BottleCallback_onRead__SWIG_1(long jarg1, BottleCallback jarg1_, long jarg2, Bottle jarg2_, long jarg3, TypedReaderBottle jarg3_);
  public final static native void BottleCallback_onReadSwigExplicitBottleCallback__SWIG_1(long jarg1, BottleCallback jarg1_, long jarg2, Bottle jarg2_, long jarg3, TypedReaderBottle jarg3_);
  public final static native long new_BottleCallback();
  public final static native void BottleCallback_director_connect(BottleCallback obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void BottleCallback_change_ownership(BottleCallback obj, long cptr, boolean take_or_release);
  public final static native long new_BufferedPortBottle__SWIG_0();
  public final static native long new_BufferedPortBottle__SWIG_1(long jarg1, Port jarg1_);
  public final static native void delete_BufferedPortBottle(long jarg1);
  public final static native boolean BufferedPortBottle_addOutput__SWIG_0(long jarg1, BufferedPortBottle jarg1_, String jarg2);
  public final static native boolean BufferedPortBottle_addOutput__SWIG_1(long jarg1, BufferedPortBottle jarg1_, String jarg2, String jarg3);
  public final static native boolean BufferedPortBottle_addOutput__SWIG_2(long jarg1, BufferedPortBottle jarg1_, long jarg2, Contact jarg2_);
  public final static native void BufferedPortBottle_close(long jarg1, BufferedPortBottle jarg1_);
  public final static native void BufferedPortBottle_interrupt(long jarg1, BufferedPortBottle jarg1_);
  public final static native void BufferedPortBottle_resume(long jarg1, BufferedPortBottle jarg1_);
  public final static native int BufferedPortBottle_getPendingReads(long jarg1, BufferedPortBottle jarg1_);
  public final static native long BufferedPortBottle_where(long jarg1, BufferedPortBottle jarg1_);
  public final static native String BufferedPortBottle_getName(long jarg1, BufferedPortBottle jarg1_);
  public final static native long BufferedPortBottle_prepare(long jarg1, BufferedPortBottle jarg1_);
  public final static native boolean BufferedPortBottle_unprepare(long jarg1, BufferedPortBottle jarg1_);
  public final static native void BufferedPortBottle_write__SWIG_0(long jarg1, BufferedPortBottle jarg1_, boolean jarg2);
  public final static native void BufferedPortBottle_write__SWIG_1(long jarg1, BufferedPortBottle jarg1_);
  public final static native void BufferedPortBottle_writeStrict(long jarg1, BufferedPortBottle jarg1_);
  public final static native void BufferedPortBottle_waitForWrite(long jarg1, BufferedPortBottle jarg1_);
  public final static native void BufferedPortBottle_setStrict__SWIG_0(long jarg1, BufferedPortBottle jarg1_, boolean jarg2);
  public final static native void BufferedPortBottle_setStrict__SWIG_1(long jarg1, BufferedPortBottle jarg1_);
  public final static native long BufferedPortBottle_read__SWIG_0(long jarg1, BufferedPortBottle jarg1_, boolean jarg2);
  public final static native long BufferedPortBottle_read__SWIG_1(long jarg1, BufferedPortBottle jarg1_);
  public final static native long BufferedPortBottle_lastRead(long jarg1, BufferedPortBottle jarg1_);
  public final static native boolean BufferedPortBottle_isClosed(long jarg1, BufferedPortBottle jarg1_);
  public final static native void BufferedPortBottle_setReplier(long jarg1, BufferedPortBottle jarg1_, long jarg2, PortReader jarg2_);
  public final static native void BufferedPortBottle_setReader(long jarg1, BufferedPortBottle jarg1_, long jarg2, PortReader jarg2_);
  public final static native void BufferedPortBottle_setAdminReader(long jarg1, BufferedPortBottle jarg1_, long jarg2, PortReader jarg2_);
  public final static native void BufferedPortBottle_onRead(long jarg1, BufferedPortBottle jarg1_, long jarg2, Bottle jarg2_);
  public final static native void BufferedPortBottle_useCallback__SWIG_0(long jarg1, BufferedPortBottle jarg1_, long jarg2, BottleCallback jarg2_);
  public final static native void BufferedPortBottle_useCallback__SWIG_1(long jarg1, BufferedPortBottle jarg1_);
  public final static native void BufferedPortBottle_disableCallback(long jarg1, BufferedPortBottle jarg1_);
  public final static native boolean BufferedPortBottle_setEnvelope(long jarg1, BufferedPortBottle jarg1_, long jarg2, PortWriter jarg2_);
  public final static native boolean BufferedPortBottle_getEnvelope(long jarg1, BufferedPortBottle jarg1_, long jarg2, PortReader jarg2_);
  public final static native int BufferedPortBottle_getInputCount(long jarg1, BufferedPortBottle jarg1_);
  public final static native int BufferedPortBottle_getOutputCount(long jarg1, BufferedPortBottle jarg1_);
  public final static native boolean BufferedPortBottle_isWriting(long jarg1, BufferedPortBottle jarg1_);
  public final static native void BufferedPortBottle_getReport(long jarg1, BufferedPortBottle jarg1_, long jarg2, PortReport jarg2_);
  public final static native void BufferedPortBottle_setReporter(long jarg1, BufferedPortBottle jarg1_, long jarg2, PortReport jarg2_);
  public final static native long BufferedPortBottle_acquire(long jarg1, BufferedPortBottle jarg1_);
  public final static native void BufferedPortBottle_release(long jarg1, BufferedPortBottle jarg1_, long jarg2);
  public final static native void BufferedPortBottle_setTargetPeriod(long jarg1, BufferedPortBottle jarg1_, double jarg2);
  public final static native long BufferedPortBottle_getType(long jarg1, BufferedPortBottle jarg1_);
  public final static native void BufferedPortBottle_promiseType(long jarg1, BufferedPortBottle jarg1_, long jarg2);
  public final static native void BufferedPortBottle_setInputMode(long jarg1, BufferedPortBottle jarg1_, boolean jarg2);
  public final static native void BufferedPortBottle_setOutputMode(long jarg1, BufferedPortBottle jarg1_, boolean jarg2);
  public final static native void BufferedPortBottle_setRpcMode(long jarg1, BufferedPortBottle jarg1_, boolean jarg2);
  public final static native long BufferedPortBottle_acquireProperties(long jarg1, BufferedPortBottle jarg1_, boolean jarg2);
  public final static native void BufferedPortBottle_releaseProperties(long jarg1, BufferedPortBottle jarg1_, long jarg2, Property jarg2_);
  public final static native void BufferedPortBottle_includeNodeInName(long jarg1, BufferedPortBottle jarg1_, boolean jarg2);
  public final static native boolean BufferedPortBottle_setCallbackLock(long jarg1, BufferedPortBottle jarg1_, long jarg2);
  public final static native boolean BufferedPortBottle_removeCallbackLock(long jarg1, BufferedPortBottle jarg1_);
  public final static native boolean BufferedPortBottle_lockCallback(long jarg1, BufferedPortBottle jarg1_);
  public final static native boolean BufferedPortBottle_tryLockCallback(long jarg1, BufferedPortBottle jarg1_);
  public final static native void BufferedPortBottle_unlockCallback(long jarg1, BufferedPortBottle jarg1_);
  public final static native int PAD_BYTES(int jarg1, int jarg2);
  public final static native long new_Image__SWIG_0();
  public final static native long new_Image__SWIG_1(long jarg1, Image jarg1_);
  public final static native void delete_Image(long jarg1);
  public final static native boolean Image_copy__SWIG_0(long jarg1, Image jarg1_, long jarg2, Image jarg2_);
  public final static native boolean Image_copy__SWIG_1(long jarg1, Image jarg1_, long jarg2, Image jarg2_, int jarg3, int jarg4);
  public final static native int Image_width(long jarg1, Image jarg1_);
  public final static native int Image_height(long jarg1, Image jarg1_);
  public final static native int Image_getPixelSize(long jarg1, Image jarg1_);
  public final static native int Image_getPixelCode(long jarg1, Image jarg1_);
  public final static native int Image_getRowSize(long jarg1, Image jarg1_);
  public final static native int Image_getQuantum(long jarg1, Image jarg1_);
  public final static native int Image_getPadding(long jarg1, Image jarg1_);
  public final static native long Image_getRow(long jarg1, Image jarg1_, int jarg2);
  public final static native long Image_getPixelAddress(long jarg1, Image jarg1_, int jarg2, int jarg3);
  public final static native boolean Image_isPixel(long jarg1, Image jarg1_, int jarg2, int jarg3);
  public final static native void Image_zero(long jarg1, Image jarg1_);
  public final static native void Image_resize__SWIG_0(long jarg1, Image jarg1_, int jarg2, int jarg3);
  public final static native void Image_resize__SWIG_1(long jarg1, Image jarg1_, long jarg2, Image jarg2_);
  public final static native void Image_setExternal(long jarg1, Image jarg1_, long jarg2, int jarg3, int jarg4);
  public final static native long Image_getRawImage(long jarg1, Image jarg1_);
  public final static native int Image_getRawImageSize(long jarg1, Image jarg1_);
  public final static native long Image_getIplImage(long jarg1, Image jarg1_);
  public final static native void Image_wrapIplImage(long jarg1, Image jarg1_, long jarg2);
  public final static native boolean Image_read(long jarg1, Image jarg1_, long jarg2, ConnectionReader jarg2_);
  public final static native boolean Image_write(long jarg1, Image jarg1_, long jarg2, ConnectionWriter jarg2_);
  public final static native void Image_setQuantum(long jarg1, Image jarg1_, int jarg2);
  public final static native boolean Image_topIsLowIndex(long jarg1, Image jarg1_);
  public final static native void Image_setTopIsLowIndex(long jarg1, Image jarg1_, boolean jarg2);
  public final static native long Image_getRowArray(long jarg1, Image jarg1_);
  public final static native void FlexImage_setPixelCode(long jarg1, FlexImage jarg1_, int jarg2);
  public final static native void FlexImage_setPixelSize(long jarg1, FlexImage jarg1_, int jarg2);
  public final static native void FlexImage_setQuantum(long jarg1, FlexImage jarg1_, int jarg2);
  public final static native long new_FlexImage();
  public final static native void delete_FlexImage(long jarg1);
  public final static native int VOCAB_PIXEL_INVALID_get();
  public final static native int VOCAB_PIXEL_MONO_get();
  public final static native int VOCAB_PIXEL_MONO16_get();
  public final static native int VOCAB_PIXEL_RGB_get();
  public final static native int VOCAB_PIXEL_RGBA_get();
  public final static native int VOCAB_PIXEL_BGRA_get();
  public final static native int VOCAB_PIXEL_INT_get();
  public final static native int VOCAB_PIXEL_HSV_get();
  public final static native int VOCAB_PIXEL_BGR_get();
  public final static native int VOCAB_PIXEL_MONO_SIGNED_get();
  public final static native int VOCAB_PIXEL_RGB_SIGNED_get();
  public final static native int VOCAB_PIXEL_RGB_INT_get();
  public final static native int VOCAB_PIXEL_MONO_FLOAT_get();
  public final static native int VOCAB_PIXEL_RGB_FLOAT_get();
  public final static native int VOCAB_PIXEL_HSV_FLOAT_get();
  public final static native void PixelRgb_r_set(long jarg1, PixelRgb jarg1_, short jarg2);
  public final static native short PixelRgb_r_get(long jarg1, PixelRgb jarg1_);
  public final static native void PixelRgb_g_set(long jarg1, PixelRgb jarg1_, short jarg2);
  public final static native short PixelRgb_g_get(long jarg1, PixelRgb jarg1_);
  public final static native void PixelRgb_b_set(long jarg1, PixelRgb jarg1_, short jarg2);
  public final static native short PixelRgb_b_get(long jarg1, PixelRgb jarg1_);
  public final static native long new_PixelRgb__SWIG_0();
  public final static native long new_PixelRgb__SWIG_1(short jarg1, short jarg2, short jarg3);
  public final static native void delete_PixelRgb(long jarg1);
  public final static native void PixelRgba_r_set(long jarg1, PixelRgba jarg1_, short jarg2);
  public final static native short PixelRgba_r_get(long jarg1, PixelRgba jarg1_);
  public final static native void PixelRgba_g_set(long jarg1, PixelRgba jarg1_, short jarg2);
  public final static native short PixelRgba_g_get(long jarg1, PixelRgba jarg1_);
  public final static native void PixelRgba_b_set(long jarg1, PixelRgba jarg1_, short jarg2);
  public final static native short PixelRgba_b_get(long jarg1, PixelRgba jarg1_);
  public final static native void PixelRgba_a_set(long jarg1, PixelRgba jarg1_, short jarg2);
  public final static native short PixelRgba_a_get(long jarg1, PixelRgba jarg1_);
  public final static native long new_PixelRgba__SWIG_0();
  public final static native long new_PixelRgba__SWIG_1(short jarg1, short jarg2, short jarg3, short jarg4);
  public final static native void delete_PixelRgba(long jarg1);
  public final static native void PixelBgra_b_set(long jarg1, PixelBgra jarg1_, short jarg2);
  public final static native short PixelBgra_b_get(long jarg1, PixelBgra jarg1_);
  public final static native void PixelBgra_g_set(long jarg1, PixelBgra jarg1_, short jarg2);
  public final static native short PixelBgra_g_get(long jarg1, PixelBgra jarg1_);
  public final static native void PixelBgra_r_set(long jarg1, PixelBgra jarg1_, short jarg2);
  public final static native short PixelBgra_r_get(long jarg1, PixelBgra jarg1_);
  public final static native void PixelBgra_a_set(long jarg1, PixelBgra jarg1_, short jarg2);
  public final static native short PixelBgra_a_get(long jarg1, PixelBgra jarg1_);
  public final static native long new_PixelBgra__SWIG_0();
  public final static native long new_PixelBgra__SWIG_1(short jarg1, short jarg2, short jarg3, short jarg4);
  public final static native void delete_PixelBgra(long jarg1);
  public final static native void PixelBgr_b_set(long jarg1, PixelBgr jarg1_, short jarg2);
  public final static native short PixelBgr_b_get(long jarg1, PixelBgr jarg1_);
  public final static native void PixelBgr_g_set(long jarg1, PixelBgr jarg1_, short jarg2);
  public final static native short PixelBgr_g_get(long jarg1, PixelBgr jarg1_);
  public final static native void PixelBgr_r_set(long jarg1, PixelBgr jarg1_, short jarg2);
  public final static native short PixelBgr_r_get(long jarg1, PixelBgr jarg1_);
  public final static native long new_PixelBgr__SWIG_0();
  public final static native long new_PixelBgr__SWIG_1(short jarg1, short jarg2, short jarg3);
  public final static native void delete_PixelBgr(long jarg1);
  public final static native void PixelHsv_h_set(long jarg1, PixelHsv jarg1_, short jarg2);
  public final static native short PixelHsv_h_get(long jarg1, PixelHsv jarg1_);
  public final static native void PixelHsv_s_set(long jarg1, PixelHsv jarg1_, short jarg2);
  public final static native short PixelHsv_s_get(long jarg1, PixelHsv jarg1_);
  public final static native void PixelHsv_v_set(long jarg1, PixelHsv jarg1_, short jarg2);
  public final static native short PixelHsv_v_get(long jarg1, PixelHsv jarg1_);
  public final static native long new_PixelHsv();
  public final static native void delete_PixelHsv(long jarg1);
  public final static native void PixelRgbSigned_r_set(long jarg1, PixelRgbSigned jarg1_, char jarg2);
  public final static native char PixelRgbSigned_r_get(long jarg1, PixelRgbSigned jarg1_);
  public final static native void PixelRgbSigned_g_set(long jarg1, PixelRgbSigned jarg1_, char jarg2);
  public final static native char PixelRgbSigned_g_get(long jarg1, PixelRgbSigned jarg1_);
  public final static native void PixelRgbSigned_b_set(long jarg1, PixelRgbSigned jarg1_, char jarg2);
  public final static native char PixelRgbSigned_b_get(long jarg1, PixelRgbSigned jarg1_);
  public final static native long new_PixelRgbSigned();
  public final static native void delete_PixelRgbSigned(long jarg1);
  public final static native void PixelRgbFloat_r_set(long jarg1, PixelRgbFloat jarg1_, float jarg2);
  public final static native float PixelRgbFloat_r_get(long jarg1, PixelRgbFloat jarg1_);
  public final static native void PixelRgbFloat_g_set(long jarg1, PixelRgbFloat jarg1_, float jarg2);
  public final static native float PixelRgbFloat_g_get(long jarg1, PixelRgbFloat jarg1_);
  public final static native void PixelRgbFloat_b_set(long jarg1, PixelRgbFloat jarg1_, float jarg2);
  public final static native float PixelRgbFloat_b_get(long jarg1, PixelRgbFloat jarg1_);
  public final static native long new_PixelRgbFloat__SWIG_0();
  public final static native long new_PixelRgbFloat__SWIG_1(float jarg1, float jarg2, float jarg3);
  public final static native void delete_PixelRgbFloat(long jarg1);
  public final static native void PixelRgbInt_r_set(long jarg1, PixelRgbInt jarg1_, int jarg2);
  public final static native int PixelRgbInt_r_get(long jarg1, PixelRgbInt jarg1_);
  public final static native void PixelRgbInt_g_set(long jarg1, PixelRgbInt jarg1_, int jarg2);
  public final static native int PixelRgbInt_g_get(long jarg1, PixelRgbInt jarg1_);
  public final static native void PixelRgbInt_b_set(long jarg1, PixelRgbInt jarg1_, int jarg2);
  public final static native int PixelRgbInt_b_get(long jarg1, PixelRgbInt jarg1_);
  public final static native long new_PixelRgbInt__SWIG_0();
  public final static native long new_PixelRgbInt__SWIG_1(int jarg1, int jarg2, int jarg3);
  public final static native void delete_PixelRgbInt(long jarg1);
  public final static native void PixelHsvFloat_h_set(long jarg1, PixelHsvFloat jarg1_, float jarg2);
  public final static native float PixelHsvFloat_h_get(long jarg1, PixelHsvFloat jarg1_);
  public final static native void PixelHsvFloat_s_set(long jarg1, PixelHsvFloat jarg1_, float jarg2);
  public final static native float PixelHsvFloat_s_get(long jarg1, PixelHsvFloat jarg1_);
  public final static native void PixelHsvFloat_v_set(long jarg1, PixelHsvFloat jarg1_, float jarg2);
  public final static native float PixelHsvFloat_v_get(long jarg1, PixelHsvFloat jarg1_);
  public final static native long new_PixelHsvFloat();
  public final static native void delete_PixelHsvFloat(long jarg1);
  public final static native int FORMAT_NULL_get();
  public final static native int FORMAT_ANY_get();
  public final static native int FORMAT_PGM_get();
  public final static native int FORMAT_PPM_get();
  public final static native int FORMAT_NUMERIC_get();
  public final static native boolean read__SWIG_0(long jarg1, ImageRgb jarg1_, String jarg2);
  public final static native boolean read__SWIG_1(long jarg1, String jarg2);
  public final static native boolean read__SWIG_2(long jarg1, ImageRgba jarg1_, String jarg2);
  public final static native boolean read__SWIG_3(long jarg1, ImageMono jarg1_, String jarg2);
  public final static native boolean read__SWIG_4(long jarg1, ImageFloat jarg1_, String jarg2);
  public final static native boolean write__SWIG_0(long jarg1, ImageRgb jarg1_, String jarg2);
  public final static native boolean write__SWIG_1(long jarg1, String jarg2);
  public final static native boolean write__SWIG_2(long jarg1, ImageRgba jarg1_, String jarg2);
  public final static native boolean write__SWIG_3(long jarg1, ImageMono jarg1_, String jarg2);
  public final static native boolean write__SWIG_4(long jarg1, ImageFloat jarg1_, String jarg2);
  public final static native boolean write__SWIG_5(long jarg1, Image jarg1_, String jarg2);
  public final static native long new_Sound__SWIG_0(int jarg1);
  public final static native long new_Sound__SWIG_1();
  public final static native long new_Sound__SWIG_2(long jarg1, Sound jarg1_);
  public final static native void delete_Sound(long jarg1);
  public final static native long Sound_subSound(long jarg1, Sound jarg1_, int jarg2, int jarg3);
  public final static native void Sound_resize__SWIG_0(long jarg1, Sound jarg1_, int jarg2, int jarg3);
  public final static native void Sound_resize__SWIG_1(long jarg1, Sound jarg1_, int jarg2);
  public final static native int Sound_get__SWIG_0(long jarg1, Sound jarg1_, int jarg2, int jarg3);
  public final static native int Sound_get__SWIG_1(long jarg1, Sound jarg1_, int jarg2);
  public final static native void Sound_set__SWIG_0(long jarg1, Sound jarg1_, int jarg2, int jarg3, int jarg4);
  public final static native void Sound_set__SWIG_1(long jarg1, Sound jarg1_, int jarg2, int jarg3);
  public final static native int Sound_getSafe__SWIG_0(long jarg1, Sound jarg1_, int jarg2, int jarg3);
  public final static native int Sound_getSafe__SWIG_1(long jarg1, Sound jarg1_, int jarg2);
  public final static native void Sound_setSafe__SWIG_0(long jarg1, Sound jarg1_, int jarg2, int jarg3, int jarg4);
  public final static native void Sound_setSafe__SWIG_1(long jarg1, Sound jarg1_, int jarg2, int jarg3);
  public final static native boolean Sound_isSample__SWIG_0(long jarg1, Sound jarg1_, int jarg2, int jarg3);
  public final static native boolean Sound_isSample__SWIG_1(long jarg1, Sound jarg1_, int jarg2);
  public final static native void Sound_clear(long jarg1, Sound jarg1_);
  public final static native int Sound_getFrequency(long jarg1, Sound jarg1_);
  public final static native void Sound_setFrequency(long jarg1, Sound jarg1_, int jarg2);
  public final static native int Sound_getBytesPerSample(long jarg1, Sound jarg1_);
  public final static native int Sound_getSamples(long jarg1, Sound jarg1_);
  public final static native int Sound_getChannels(long jarg1, Sound jarg1_);
  public final static native boolean Sound_read(long jarg1, Sound jarg1_, long jarg2, ConnectionReader jarg2_);
  public final static native boolean Sound_write(long jarg1, Sound jarg1_, long jarg2, ConnectionWriter jarg2_);
  public final static native long Sound_getRawData(long jarg1, Sound jarg1_);
  public final static native int Sound_getRawDataSize(long jarg1, Sound jarg1_);
  public final static native int VectorBase_getElementSize(long jarg1, VectorBase jarg1_);
  public final static native long VectorBase_getListSize(long jarg1, VectorBase jarg1_);
  public final static native String VectorBase_getMemoryBlock(long jarg1, VectorBase jarg1_);
  public final static native void VectorBase_resize(long jarg1, VectorBase jarg1_, long jarg2);
  public final static native boolean VectorBase_read(long jarg1, VectorBase jarg1_, long jarg2, ConnectionReader jarg2_);
  public final static native boolean VectorBase_write(long jarg1, VectorBase jarg1_, long jarg2, ConnectionWriter jarg2_);
  public final static native void delete_VectorBase(long jarg1);
  public final static native long new_Vector__SWIG_0();
  public final static native long new_Vector__SWIG_1(long jarg1);
  public final static native long new_Vector__SWIG_2(long jarg1, double jarg2);
  public final static native void delete_Vector(long jarg1);
  public final static native long new_Vector__SWIG_3(long jarg1, long jarg2);
  public final static native long new_Vector__SWIG_4(long jarg1, Vector jarg1_);
  public final static native void Vector_size__SWIG_0(long jarg1, Vector jarg1_, long jarg2);
  public final static native void Vector_resize__SWIG_0(long jarg1, Vector jarg1_, long jarg2);
  public final static native void Vector_resize__SWIG_1(long jarg1, Vector jarg1_, long jarg2, double jarg3);
  public final static native long Vector_size__SWIG_1(long jarg1, Vector jarg1_);
  public final static native long Vector_length(long jarg1, Vector jarg1_);
  public final static native void Vector_zero(long jarg1, Vector jarg1_);
  public final static native String Vector_toString__SWIG_0(long jarg1, Vector jarg1_, int jarg2, int jarg3);
  public final static native String Vector_toString__SWIG_1(long jarg1, Vector jarg1_, int jarg2);
  public final static native String Vector_toString__SWIG_2(long jarg1, Vector jarg1_);
  public final static native long Vector_subVector(long jarg1, Vector jarg1_, long jarg2, long jarg3);
  public final static native boolean Vector_setSubvector(long jarg1, Vector jarg1_, int jarg2, long jarg3, Vector jarg3_);
  public final static native long Vector_data__SWIG_0(long jarg1, Vector jarg1_);
  public final static native boolean Vector_isEqual(long jarg1, Vector jarg1_, long jarg2, Vector jarg2_);
  public final static native void Vector_push_back(long jarg1, Vector jarg1_, double jarg2);
  public final static native void Vector_pop_back(long jarg1, Vector jarg1_);
  public final static native long Vector_getGslVector__SWIG_0(long jarg1, Vector jarg1_);
  public final static native long Vector_access__SWIG_0(long jarg1, Vector jarg1_, long jarg2);
  public final static native void Vector_clear(long jarg1, Vector jarg1_);
  public final static native boolean Vector_read(long jarg1, Vector jarg1_, long jarg2, ConnectionReader jarg2_);
  public final static native boolean Vector_write(long jarg1, Vector jarg1_, long jarg2, ConnectionWriter jarg2_);
  public final static native double Vector_get(long jarg1, Vector jarg1_, int jarg2);
  public final static native void Vector_set(long jarg1, Vector jarg1_, int jarg2, double jarg3);
  public final static native void delete_IConfig(long jarg1);
  public final static native boolean IConfig_open(long jarg1, IConfig jarg1_, long jarg2, Searchable jarg2_);
  public final static native boolean IConfig_close(long jarg1, IConfig jarg1_);
  public final static native boolean IConfig_configure(long jarg1, IConfig jarg1_, long jarg2, Searchable jarg2_);
  public final static native long new_IConfig();
  public final static native void delete_DeviceDriver(long jarg1);
  public final static native boolean DeviceDriver_open(long jarg1, DeviceDriver jarg1_, long jarg2, Searchable jarg2_);
  public final static native boolean DeviceDriver_close(long jarg1, DeviceDriver jarg1_);
  public final static native long DeviceDriver_getImplementation(long jarg1, DeviceDriver jarg1_);
  public final static native long new_DeviceDriver();
  public final static native long new_DeviceResponder();
  public final static native void DeviceResponder_addUsage__SWIG_0(long jarg1, DeviceResponder jarg1_, String jarg2, String jarg3);
  public final static native void DeviceResponder_addUsage__SWIG_1(long jarg1, DeviceResponder jarg1_, String jarg2);
  public final static native void DeviceResponder_addUsage__SWIG_2(long jarg1, DeviceResponder jarg1_, long jarg2, Bottle jarg2_, String jarg3);
  public final static native void DeviceResponder_addUsage__SWIG_3(long jarg1, DeviceResponder jarg1_, long jarg2, Bottle jarg2_);
  public final static native boolean DeviceResponder_respond(long jarg1, DeviceResponder jarg1_, long jarg2, Bottle jarg2_, long jarg3, Bottle jarg3_);
  public final static native boolean DeviceResponder_read(long jarg1, DeviceResponder jarg1_, long jarg2, ConnectionReader jarg2_);
  public final static native void DeviceResponder_onRead(long jarg1, DeviceResponder jarg1_, long jarg2, Bottle jarg2_);
  public final static native void DeviceResponder_makeUsage(long jarg1, DeviceResponder jarg1_);
  public final static native void DeviceResponder_attach(long jarg1, DeviceResponder jarg1_, long jarg2, TypedReaderBottle jarg2_);
  public final static native void delete_DeviceResponder(long jarg1);
  public final static native long new_PolyDriver__SWIG_0();
  public final static native long new_PolyDriver__SWIG_1(String jarg1);
  public final static native long new_PolyDriver__SWIG_2(long jarg1, Searchable jarg1_);
  public final static native boolean PolyDriver_open_str(long jarg1, PolyDriver jarg1_, String jarg2);
  public final static native boolean PolyDriver_open(long jarg1, PolyDriver jarg1_, long jarg2, Searchable jarg2_);
  public final static native boolean PolyDriver_link(long jarg1, PolyDriver jarg1_, long jarg2, PolyDriver jarg2_);
  public final static native long PolyDriver_take(long jarg1, PolyDriver jarg1_);
  public final static native boolean PolyDriver_give(long jarg1, PolyDriver jarg1_, long jarg2, DeviceDriver jarg2_, boolean jarg3);
  public final static native void delete_PolyDriver(long jarg1);
  public final static native boolean PolyDriver_close(long jarg1, PolyDriver jarg1_);
  public final static native boolean PolyDriver_isValid(long jarg1, PolyDriver jarg1_);
  public final static native long PolyDriver_getOptions(long jarg1, PolyDriver jarg1_);
  public final static native String PolyDriver_getComment(long jarg1, PolyDriver jarg1_, String jarg2);
  public final static native long PolyDriver_getDefaultValue(long jarg1, PolyDriver jarg1_, String jarg2);
  public final static native long PolyDriver_getValue(long jarg1, PolyDriver jarg1_, String jarg2);
  public final static native long PolyDriver_getImplementation(long jarg1, PolyDriver jarg1_);
  public final static native long PolyDriver_viewFrameGrabberImage(long jarg1, PolyDriver jarg1_);
  public final static native long PolyDriver_viewIPositionControl(long jarg1, PolyDriver jarg1_);
  public final static native long PolyDriver_viewIVelocityControl(long jarg1, PolyDriver jarg1_);
  public final static native long PolyDriver_viewIEncoders(long jarg1, PolyDriver jarg1_);
  public final static native long PolyDriver_viewIPidControl(long jarg1, PolyDriver jarg1_);
  public final static native long PolyDriver_viewIAmplifierControl(long jarg1, PolyDriver jarg1_);
  public final static native long PolyDriver_viewIControlLimits(long jarg1, PolyDriver jarg1_);
  public final static native long PolyDriver_viewICartesianControl(long jarg1, PolyDriver jarg1_);
  public final static native long PolyDriver_viewIGazeControl(long jarg1, PolyDriver jarg1_);
  public final static native long PolyDriver_viewIImpedanceControl(long jarg1, PolyDriver jarg1_);
  public final static native long PolyDriver_viewITorqueControl(long jarg1, PolyDriver jarg1_);
  public final static native long PolyDriver_viewIControlMode(long jarg1, PolyDriver jarg1_);
  public final static native long PolyDriver_viewIOpenLoopControl(long jarg1, PolyDriver jarg1_);
  public final static native void delete_DriverCreator(long jarg1);
  public final static native String DriverCreator_toString_c(long jarg1, DriverCreator jarg1_);
  public final static native long DriverCreator_create(long jarg1, DriverCreator jarg1_);
  public final static native String DriverCreator_getName(long jarg1, DriverCreator jarg1_);
  public final static native String DriverCreator_getWrapper(long jarg1, DriverCreator jarg1_);
  public final static native String DriverCreator_getCode(long jarg1, DriverCreator jarg1_);
  public final static native long DriverCreator_owner(long jarg1, DriverCreator jarg1_);
  public final static native long new_StubDriverCreator(String jarg1, String jarg2, String jarg3, String jarg4, String jarg5);
  public final static native String StubDriverCreator_toString_c(long jarg1, StubDriverCreator jarg1_);
  public final static native String StubDriverCreator_getName(long jarg1, StubDriverCreator jarg1_);
  public final static native String StubDriverCreator_getWrapper(long jarg1, StubDriverCreator jarg1_);
  public final static native String StubDriverCreator_getCode(long jarg1, StubDriverCreator jarg1_);
  public final static native long StubDriverCreator_create(long jarg1, StubDriverCreator jarg1_);
  public final static native void delete_StubDriverCreator(long jarg1);
  public final static native long Drivers_factory();
  public final static native long Drivers_open__SWIG_0(long jarg1, Drivers jarg1_, String jarg2);
  public final static native long Drivers_open__SWIG_1(long jarg1, Drivers jarg1_, long jarg2, Searchable jarg2_);
  public final static native String Drivers_toString_c(long jarg1, Drivers jarg1_);
  public final static native void delete_Drivers(long jarg1);
  public final static native void Drivers_add(long jarg1, Drivers jarg1_, long jarg2, DriverCreator jarg2_);
  public final static native long Drivers_find(long jarg1, Drivers jarg1_, String jarg2);
  public final static native boolean Drivers_remove(long jarg1, Drivers jarg1_, String jarg2);
  public final static native int Drivers_yarpdev(int jarg1, long jarg2);
  public final static native void delete_IFrameGrabber(long jarg1);
  public final static native boolean IFrameGrabber_getRawBuffer(long jarg1, IFrameGrabber jarg1_, long jarg2);
  public final static native int IFrameGrabber_getRawBufferSize(long jarg1, IFrameGrabber jarg1_);
  public final static native int IFrameGrabber_height(long jarg1, IFrameGrabber jarg1_);
  public final static native int IFrameGrabber_width(long jarg1, IFrameGrabber jarg1_);
  public final static native void delete_IFrameGrabberRgb(long jarg1);
  public final static native boolean IFrameGrabberRgb_getRgbBuffer(long jarg1, IFrameGrabberRgb jarg1_, long jarg2);
  public final static native int IFrameGrabberRgb_height(long jarg1, IFrameGrabberRgb jarg1_);
  public final static native int IFrameGrabberRgb_width(long jarg1, IFrameGrabberRgb jarg1_);
  public final static native void delete_IFrameGrabberImage(long jarg1);
  public final static native boolean IFrameGrabberImage_getImage(long jarg1, IFrameGrabberImage jarg1_, long jarg2, ImageRgb jarg2_);
  public final static native int IFrameGrabberImage_height(long jarg1, IFrameGrabberImage jarg1_);
  public final static native int IFrameGrabberImage_width(long jarg1, IFrameGrabberImage jarg1_);
  public final static native void delete_IFrameGrabberImageRaw(long jarg1);
  public final static native boolean IFrameGrabberImageRaw_getImage(long jarg1, IFrameGrabberImageRaw jarg1_, long jarg2, ImageMono jarg2_);
  public final static native int IFrameGrabberImageRaw_height(long jarg1, IFrameGrabberImageRaw jarg1_);
  public final static native int IFrameGrabberImageRaw_width(long jarg1, IFrameGrabberImageRaw jarg1_);
  public final static native void delete_IFrameWriterImage(long jarg1);
  public final static native boolean IFrameWriterImage_putImage(long jarg1, IFrameWriterImage jarg1_, long jarg2, ImageRgb jarg2_);
  public final static native void delete_IFrameGrabberControls(long jarg1);
  public final static native boolean IFrameGrabberControls_setBrightness(long jarg1, IFrameGrabberControls jarg1_, double jarg2);
  public final static native boolean IFrameGrabberControls_setExposure(long jarg1, IFrameGrabberControls jarg1_, double jarg2);
  public final static native boolean IFrameGrabberControls_setSharpness(long jarg1, IFrameGrabberControls jarg1_, double jarg2);
  public final static native boolean IFrameGrabberControls_setWhiteBalance(long jarg1, IFrameGrabberControls jarg1_, double jarg2, double jarg3);
  public final static native boolean IFrameGrabberControls_setHue(long jarg1, IFrameGrabberControls jarg1_, double jarg2);
  public final static native boolean IFrameGrabberControls_setSaturation(long jarg1, IFrameGrabberControls jarg1_, double jarg2);
  public final static native boolean IFrameGrabberControls_setGamma(long jarg1, IFrameGrabberControls jarg1_, double jarg2);
  public final static native boolean IFrameGrabberControls_setShutter(long jarg1, IFrameGrabberControls jarg1_, double jarg2);
  public final static native boolean IFrameGrabberControls_setGain(long jarg1, IFrameGrabberControls jarg1_, double jarg2);
  public final static native boolean IFrameGrabberControls_setIris(long jarg1, IFrameGrabberControls jarg1_, double jarg2);
  public final static native double IFrameGrabberControls_getBrightness(long jarg1, IFrameGrabberControls jarg1_);
  public final static native double IFrameGrabberControls_getExposure(long jarg1, IFrameGrabberControls jarg1_);
  public final static native double IFrameGrabberControls_getSharpness(long jarg1, IFrameGrabberControls jarg1_);
  public final static native boolean IFrameGrabberControls_getWhiteBalance(long jarg1, IFrameGrabberControls jarg1_, long jarg2, long jarg3);
  public final static native double IFrameGrabberControls_getHue(long jarg1, IFrameGrabberControls jarg1_);
  public final static native double IFrameGrabberControls_getSaturation(long jarg1, IFrameGrabberControls jarg1_);
  public final static native double IFrameGrabberControls_getGamma(long jarg1, IFrameGrabberControls jarg1_);
  public final static native double IFrameGrabberControls_getShutter(long jarg1, IFrameGrabberControls jarg1_);
  public final static native double IFrameGrabberControls_getGain(long jarg1, IFrameGrabberControls jarg1_);
  public final static native double IFrameGrabberControls_getIris(long jarg1, IFrameGrabberControls jarg1_);
  public final static native boolean IFrameGrabberControlsDC1394_hasFeatureDC1394(long jarg1, IFrameGrabberControlsDC1394 jarg1_, int jarg2);
  public final static native boolean IFrameGrabberControlsDC1394_setFeatureDC1394(long jarg1, IFrameGrabberControlsDC1394 jarg1_, int jarg2, double jarg3);
  public final static native double IFrameGrabberControlsDC1394_getFeatureDC1394(long jarg1, IFrameGrabberControlsDC1394 jarg1_, int jarg2);
  public final static native boolean IFrameGrabberControlsDC1394_hasOnOffDC1394(long jarg1, IFrameGrabberControlsDC1394 jarg1_, int jarg2);
  public final static native boolean IFrameGrabberControlsDC1394_setActiveDC1394(long jarg1, IFrameGrabberControlsDC1394 jarg1_, int jarg2, boolean jarg3);
  public final static native boolean IFrameGrabberControlsDC1394_getActiveDC1394(long jarg1, IFrameGrabberControlsDC1394 jarg1_, int jarg2);
  public final static native boolean IFrameGrabberControlsDC1394_hasAutoDC1394(long jarg1, IFrameGrabberControlsDC1394 jarg1_, int jarg2);
  public final static native boolean IFrameGrabberControlsDC1394_hasManualDC1394(long jarg1, IFrameGrabberControlsDC1394 jarg1_, int jarg2);
  public final static native boolean IFrameGrabberControlsDC1394_hasOnePushDC1394(long jarg1, IFrameGrabberControlsDC1394 jarg1_, int jarg2);
  public final static native boolean IFrameGrabberControlsDC1394_setModeDC1394(long jarg1, IFrameGrabberControlsDC1394 jarg1_, int jarg2, boolean jarg3);
  public final static native boolean IFrameGrabberControlsDC1394_getModeDC1394(long jarg1, IFrameGrabberControlsDC1394 jarg1_, int jarg2);
  public final static native boolean IFrameGrabberControlsDC1394_setOnePushDC1394(long jarg1, IFrameGrabberControlsDC1394 jarg1_, int jarg2);
  public final static native long IFrameGrabberControlsDC1394_getVideoModeMaskDC1394(long jarg1, IFrameGrabberControlsDC1394 jarg1_);
  public final static native long IFrameGrabberControlsDC1394_getVideoModeDC1394(long jarg1, IFrameGrabberControlsDC1394 jarg1_);
  public final static native boolean IFrameGrabberControlsDC1394_setVideoModeDC1394(long jarg1, IFrameGrabberControlsDC1394 jarg1_, int jarg2);
  public final static native long IFrameGrabberControlsDC1394_getFPSMaskDC1394(long jarg1, IFrameGrabberControlsDC1394 jarg1_);
  public final static native long IFrameGrabberControlsDC1394_getFPSDC1394(long jarg1, IFrameGrabberControlsDC1394 jarg1_);
  public final static native boolean IFrameGrabberControlsDC1394_setFPSDC1394(long jarg1, IFrameGrabberControlsDC1394 jarg1_, int jarg2);
  public final static native long IFrameGrabberControlsDC1394_getISOSpeedDC1394(long jarg1, IFrameGrabberControlsDC1394 jarg1_);
  public final static native boolean IFrameGrabberControlsDC1394_setISOSpeedDC1394(long jarg1, IFrameGrabberControlsDC1394 jarg1_, int jarg2);
  public final static native long IFrameGrabberControlsDC1394_getColorCodingMaskDC1394(long jarg1, IFrameGrabberControlsDC1394 jarg1_, long jarg2);
  public final static native long IFrameGrabberControlsDC1394_getColorCodingDC1394(long jarg1, IFrameGrabberControlsDC1394 jarg1_);
  public final static native boolean IFrameGrabberControlsDC1394_setColorCodingDC1394(long jarg1, IFrameGrabberControlsDC1394 jarg1_, int jarg2);
  public final static native boolean IFrameGrabberControlsDC1394_setWhiteBalanceDC1394(long jarg1, IFrameGrabberControlsDC1394 jarg1_, double jarg2, double jarg3);
  public final static native boolean IFrameGrabberControlsDC1394_getWhiteBalanceDC1394(long jarg1, IFrameGrabberControlsDC1394 jarg1_, long jarg2, long jarg3);
  public final static native boolean IFrameGrabberControlsDC1394_getFormat7MaxWindowDC1394(long jarg1, IFrameGrabberControlsDC1394 jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6, long jarg7);
  public final static native boolean IFrameGrabberControlsDC1394_getFormat7WindowDC1394(long jarg1, IFrameGrabberControlsDC1394 jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean IFrameGrabberControlsDC1394_setFormat7WindowDC1394(long jarg1, IFrameGrabberControlsDC1394 jarg1_, long jarg2, long jarg3, int jarg4, int jarg5);
  public final static native boolean IFrameGrabberControlsDC1394_setOperationModeDC1394(long jarg1, IFrameGrabberControlsDC1394 jarg1_, boolean jarg2);
  public final static native boolean IFrameGrabberControlsDC1394_getOperationModeDC1394(long jarg1, IFrameGrabberControlsDC1394 jarg1_);
  public final static native boolean IFrameGrabberControlsDC1394_setTransmissionDC1394(long jarg1, IFrameGrabberControlsDC1394 jarg1_, boolean jarg2);
  public final static native boolean IFrameGrabberControlsDC1394_getTransmissionDC1394(long jarg1, IFrameGrabberControlsDC1394 jarg1_);
  public final static native boolean IFrameGrabberControlsDC1394_setBroadcastDC1394(long jarg1, IFrameGrabberControlsDC1394 jarg1_, boolean jarg2);
  public final static native boolean IFrameGrabberControlsDC1394_setDefaultsDC1394(long jarg1, IFrameGrabberControlsDC1394 jarg1_);
  public final static native boolean IFrameGrabberControlsDC1394_setResetDC1394(long jarg1, IFrameGrabberControlsDC1394 jarg1_);
  public final static native boolean IFrameGrabberControlsDC1394_setPowerDC1394(long jarg1, IFrameGrabberControlsDC1394 jarg1_, boolean jarg2);
  public final static native boolean IFrameGrabberControlsDC1394_setCaptureDC1394(long jarg1, IFrameGrabberControlsDC1394 jarg1_, boolean jarg2);
  public final static native long IFrameGrabberControlsDC1394_getBytesPerPacketDC1394(long jarg1, IFrameGrabberControlsDC1394 jarg1_);
  public final static native boolean IFrameGrabberControlsDC1394_setBytesPerPacketDC1394(long jarg1, IFrameGrabberControlsDC1394 jarg1_, long jarg2);
  public final static native void delete_IFrameGrabberControlsDC1394(long jarg1);
  public final static native void delete_IAudioVisualGrabber(long jarg1);
  public final static native boolean IAudioVisualGrabber_getAudioVisual(long jarg1, IAudioVisualGrabber jarg1_, long jarg2, ImageRgb jarg2_, long jarg3, Sound jarg3_);
  public final static native void delete_IFrameWriterAudioVisual(long jarg1);
  public final static native boolean IFrameWriterAudioVisual_putAudioVisual(long jarg1, IFrameWriterAudioVisual jarg1_, long jarg2, ImageRgb jarg2_, long jarg3, Sound jarg3_);
  public final static native void delete_IAudioVisualStream(long jarg1);
  public final static native boolean IAudioVisualStream_hasAudio(long jarg1, IAudioVisualStream jarg1_);
  public final static native boolean IAudioVisualStream_hasVideo(long jarg1, IAudioVisualStream jarg1_);
  public final static native boolean IAudioVisualStream_hasRawVideo(long jarg1, IAudioVisualStream jarg1_);
  public final static native void delete_IPidControlRaw(long jarg1);
  public final static native boolean IPidControlRaw_setPidRaw(long jarg1, IPidControlRaw jarg1_, int jarg2, long jarg3);
  public final static native boolean IPidControlRaw_setPidsRaw(long jarg1, IPidControlRaw jarg1_, long jarg2);
  public final static native boolean IPidControlRaw_setReferenceRaw(long jarg1, IPidControlRaw jarg1_, int jarg2, double jarg3);
  public final static native boolean IPidControlRaw_setReferencesRaw(long jarg1, IPidControlRaw jarg1_, long jarg2);
  public final static native boolean IPidControlRaw_setErrorLimitRaw(long jarg1, IPidControlRaw jarg1_, int jarg2, double jarg3);
  public final static native boolean IPidControlRaw_setErrorLimitsRaw(long jarg1, IPidControlRaw jarg1_, long jarg2);
  public final static native boolean IPidControlRaw_getErrorRaw(long jarg1, IPidControlRaw jarg1_, int jarg2, long jarg3);
  public final static native boolean IPidControlRaw_getErrorsRaw(long jarg1, IPidControlRaw jarg1_, long jarg2);
  public final static native boolean IPidControlRaw_getOutputRaw(long jarg1, IPidControlRaw jarg1_, int jarg2, long jarg3);
  public final static native boolean IPidControlRaw_getOutputsRaw(long jarg1, IPidControlRaw jarg1_, long jarg2);
  public final static native boolean IPidControlRaw_getPidRaw(long jarg1, IPidControlRaw jarg1_, int jarg2, long jarg3);
  public final static native boolean IPidControlRaw_getPidsRaw(long jarg1, IPidControlRaw jarg1_, long jarg2);
  public final static native boolean IPidControlRaw_getReferenceRaw(long jarg1, IPidControlRaw jarg1_, int jarg2, long jarg3);
  public final static native boolean IPidControlRaw_getReferencesRaw(long jarg1, IPidControlRaw jarg1_, long jarg2);
  public final static native boolean IPidControlRaw_getErrorLimitRaw(long jarg1, IPidControlRaw jarg1_, int jarg2, long jarg3);
  public final static native boolean IPidControlRaw_getErrorLimitsRaw(long jarg1, IPidControlRaw jarg1_, long jarg2);
  public final static native boolean IPidControlRaw_resetPidRaw(long jarg1, IPidControlRaw jarg1_, int jarg2);
  public final static native boolean IPidControlRaw_disablePidRaw(long jarg1, IPidControlRaw jarg1_, int jarg2);
  public final static native boolean IPidControlRaw_enablePidRaw(long jarg1, IPidControlRaw jarg1_, int jarg2);
  public final static native boolean IPidControlRaw_setOffsetRaw(long jarg1, IPidControlRaw jarg1_, int jarg2, double jarg3);
  public final static native void delete_IPidControl(long jarg1);
  public final static native boolean IPidControl_setPids__SWIG_0(long jarg1, IPidControl jarg1_, long jarg2);
  public final static native boolean IPidControl_setReference(long jarg1, IPidControl jarg1_, int jarg2, double jarg3);
  public final static native boolean IPidControl_setReferences__SWIG_0(long jarg1, IPidControl jarg1_, long jarg2);
  public final static native boolean IPidControl_setErrorLimit(long jarg1, IPidControl jarg1_, int jarg2, double jarg3);
  public final static native boolean IPidControl_setErrorLimits__SWIG_0(long jarg1, IPidControl jarg1_, long jarg2);
  public final static native boolean IPidControl_getError__SWIG_0(long jarg1, IPidControl jarg1_, int jarg2, long jarg3);
  public final static native boolean IPidControl_getErrors__SWIG_0(long jarg1, IPidControl jarg1_, long jarg2);
  public final static native boolean IPidControl_getOutput__SWIG_0(long jarg1, IPidControl jarg1_, int jarg2, long jarg3);
  public final static native boolean IPidControl_getOutputs__SWIG_0(long jarg1, IPidControl jarg1_, long jarg2);
  public final static native boolean IPidControl_getPids__SWIG_0(long jarg1, IPidControl jarg1_, long jarg2);
  public final static native boolean IPidControl_getReference__SWIG_0(long jarg1, IPidControl jarg1_, int jarg2, long jarg3);
  public final static native boolean IPidControl_getReferences__SWIG_0(long jarg1, IPidControl jarg1_, long jarg2);
  public final static native boolean IPidControl_getErrorLimit__SWIG_0(long jarg1, IPidControl jarg1_, int jarg2, long jarg3);
  public final static native boolean IPidControl_getErrorLimits__SWIG_0(long jarg1, IPidControl jarg1_, long jarg2);
  public final static native boolean IPidControl_resetPid(long jarg1, IPidControl jarg1_, int jarg2);
  public final static native boolean IPidControl_disablePid(long jarg1, IPidControl jarg1_, int jarg2);
  public final static native boolean IPidControl_enablePid(long jarg1, IPidControl jarg1_, int jarg2);
  public final static native boolean IPidControl_setOffset(long jarg1, IPidControl jarg1_, int jarg2, double jarg3);
  public final static native boolean IPidControl_setReferences__SWIG_1(long jarg1, IPidControl jarg1_, long jarg2, DVector jarg2_);
  public final static native boolean IPidControl_getReference__SWIG_1(long jarg1, IPidControl jarg1_, int jarg2, long jarg3, DVector jarg3_);
  public final static native boolean IPidControl_getReferences__SWIG_1(long jarg1, IPidControl jarg1_, long jarg2, DVector jarg2_);
  public final static native boolean IPidControl_setErrorLimits__SWIG_1(long jarg1, IPidControl jarg1_, long jarg2, DVector jarg2_);
  public final static native boolean IPidControl_getErrorLimit__SWIG_1(long jarg1, IPidControl jarg1_, int jarg2, long jarg3, DVector jarg3_);
  public final static native boolean IPidControl_getErrorLimits__SWIG_1(long jarg1, IPidControl jarg1_, long jarg2, DVector jarg2_);
  public final static native boolean IPidControl_getError__SWIG_1(long jarg1, IPidControl jarg1_, int jarg2, long jarg3, DVector jarg3_);
  public final static native boolean IPidControl_getErrors__SWIG_1(long jarg1, IPidControl jarg1_, long jarg2, DVector jarg2_);
  public final static native boolean IPidControl_getOutput__SWIG_1(long jarg1, IPidControl jarg1_, int jarg2, long jarg3, DVector jarg3_);
  public final static native boolean IPidControl_getOutputs__SWIG_1(long jarg1, IPidControl jarg1_, long jarg2, DVector jarg2_);
  public final static native boolean IPidControl_setPid(long jarg1, IPidControl jarg1_, int jarg2, long jarg3, Pid jarg3_);
  public final static native boolean IPidControl_setPids__SWIG_1(long jarg1, IPidControl jarg1_, long jarg2, PidVector jarg2_);
  public final static native boolean IPidControl_getPid(long jarg1, IPidControl jarg1_, int jarg2, long jarg3, PidVector jarg3_);
  public final static native boolean IPidControl_getPids__SWIG_1(long jarg1, IPidControl jarg1_, long jarg2, PidVector jarg2_);
  public final static native void delete_IAmplifierControl(long jarg1);
  public final static native boolean IAmplifierControl_enableAmp(long jarg1, IAmplifierControl jarg1_, int jarg2);
  public final static native boolean IAmplifierControl_disableAmp(long jarg1, IAmplifierControl jarg1_, int jarg2);
  public final static native boolean IAmplifierControl_getCurrents__SWIG_0(long jarg1, IAmplifierControl jarg1_, long jarg2);
  public final static native boolean IAmplifierControl_getCurrent__SWIG_0(long jarg1, IAmplifierControl jarg1_, int jarg2, long jarg3);
  public final static native boolean IAmplifierControl_getMaxCurrent(long jarg1, IAmplifierControl jarg1_, int jarg2, long jarg3);
  public final static native boolean IAmplifierControl_setMaxCurrent(long jarg1, IAmplifierControl jarg1_, int jarg2, double jarg3);
  public final static native boolean IAmplifierControl_getAmpStatus__SWIG_0(long jarg1, IAmplifierControl jarg1_, long jarg2);
  public final static native boolean IAmplifierControl_getAmpStatus__SWIG_1(long jarg1, IAmplifierControl jarg1_, int jarg2, long jarg3);
  public final static native boolean IAmplifierControl_getCurrents__SWIG_1(long jarg1, IAmplifierControl jarg1_, long jarg2, DVector jarg2_);
  public final static native boolean IAmplifierControl_getCurrent__SWIG_1(long jarg1, IAmplifierControl jarg1_, int jarg2, long jarg3, DVector jarg3_);
  public final static native void delete_IAmplifierControlRaw(long jarg1);
  public final static native boolean IAmplifierControlRaw_enableAmpRaw(long jarg1, IAmplifierControlRaw jarg1_, int jarg2);
  public final static native boolean IAmplifierControlRaw_disableAmpRaw(long jarg1, IAmplifierControlRaw jarg1_, int jarg2);
  public final static native boolean IAmplifierControlRaw_getCurrentsRaw(long jarg1, IAmplifierControlRaw jarg1_, long jarg2);
  public final static native boolean IAmplifierControlRaw_getCurrentRaw(long jarg1, IAmplifierControlRaw jarg1_, int jarg2, long jarg3);
  public final static native boolean IAmplifierControlRaw_setMaxCurrentRaw(long jarg1, IAmplifierControlRaw jarg1_, int jarg2, double jarg3);
  public final static native boolean IAmplifierControlRaw_getMaxCurrentRaw(long jarg1, IAmplifierControlRaw jarg1_, int jarg2, long jarg3);
  public final static native boolean IAmplifierControlRaw_getAmpStatusRaw__SWIG_0(long jarg1, IAmplifierControlRaw jarg1_, long jarg2);
  public final static native boolean IAmplifierControlRaw_getAmpStatusRaw__SWIG_1(long jarg1, IAmplifierControlRaw jarg1_, int jarg2, long jarg3);
  public final static native void delete_IControlCalibrationRaw(long jarg1);
  public final static native boolean IControlCalibrationRaw_calibrateRaw(long jarg1, IControlCalibrationRaw jarg1_, int jarg2, double jarg3);
  public final static native boolean IControlCalibrationRaw_doneRaw(long jarg1, IControlCalibrationRaw jarg1_, int jarg2);
  public final static native void delete_IControlCalibration2Raw(long jarg1);
  public final static native boolean IControlCalibration2Raw_calibrate2Raw(long jarg1, IControlCalibration2Raw jarg1_, int jarg2, long jarg3, double jarg4, double jarg5, double jarg6);
  public final static native boolean IControlCalibration2Raw_doneRaw(long jarg1, IControlCalibration2Raw jarg1_, int jarg2);
  public final static native void delete_IControlCalibration(long jarg1);
  public final static native boolean IControlCalibration_calibrate__SWIG_0(long jarg1, IControlCalibration jarg1_, int jarg2, double jarg3);
  public final static native boolean IControlCalibration_done(long jarg1, IControlCalibration jarg1_, int jarg2);
  public final static native boolean IControlCalibration_setCalibrator(long jarg1, IControlCalibration jarg1_, long jarg2);
  public final static native boolean IControlCalibration_calibrate__SWIG_1(long jarg1, IControlCalibration jarg1_);
  public final static native boolean IControlCalibration_park__SWIG_0(long jarg1, IControlCalibration jarg1_, boolean jarg2);
  public final static native boolean IControlCalibration_park__SWIG_1(long jarg1, IControlCalibration jarg1_);
  public final static native void delete_IControlCalibration2(long jarg1);
  public final static native boolean IControlCalibration2_calibrate2(long jarg1, IControlCalibration2 jarg1_, int jarg2, long jarg3, double jarg4, double jarg5, double jarg6);
  public final static native boolean IControlCalibration2_done(long jarg1, IControlCalibration2 jarg1_, int jarg2);
  public final static native boolean IControlCalibration2_setCalibrator(long jarg1, IControlCalibration2 jarg1_, long jarg2);
  public final static native boolean IControlCalibration2_calibrate(long jarg1, IControlCalibration2 jarg1_);
  public final static native boolean IControlCalibration2_park__SWIG_0(long jarg1, IControlCalibration2 jarg1_, boolean jarg2);
  public final static native boolean IControlCalibration2_park__SWIG_1(long jarg1, IControlCalibration2 jarg1_);
  public final static native boolean IControlCalibration2_abortCalibration(long jarg1, IControlCalibration2 jarg1_);
  public final static native boolean IControlCalibration2_abortPark(long jarg1, IControlCalibration2 jarg1_);
  public final static native void delete_IControlDebug(long jarg1);
  public final static native boolean IControlDebug_setPrintFunction(long jarg1, IControlDebug jarg1_, long jarg2);
  public final static native boolean IControlDebug_loadBootMemory(long jarg1, IControlDebug jarg1_);
  public final static native boolean IControlDebug_saveBootMemory(long jarg1, IControlDebug jarg1_);
  public final static native void delete_IControlLimits(long jarg1);
  public final static native boolean IControlLimits_setLimits(long jarg1, IControlLimits jarg1_, int jarg2, double jarg3, double jarg4);
  public final static native boolean IControlLimits_getLimits__SWIG_0(long jarg1, IControlLimits jarg1_, int jarg2, long jarg3, long jarg4);
  public final static native boolean IControlLimits_getLimits__SWIG_1(long jarg1, IControlLimits jarg1_, int jarg2, long jarg3, DVector jarg3_, long jarg4, DVector jarg4_);
  public final static native void delete_IControlLimitsRaw(long jarg1);
  public final static native boolean IControlLimitsRaw_setLimitsRaw(long jarg1, IControlLimitsRaw jarg1_, int jarg2, double jarg3, double jarg4);
  public final static native boolean IControlLimitsRaw_getLimitsRaw(long jarg1, IControlLimitsRaw jarg1_, int jarg2, long jarg3, long jarg4);
  public final static native void delete_IAxisInfo(long jarg1);
  public final static native boolean IAxisInfo_getAxisName(long jarg1, IAxisInfo jarg1_, int jarg2, long jarg3);
  public final static native void Pid_kp_set(long jarg1, Pid jarg1_, double jarg2);
  public final static native double Pid_kp_get(long jarg1, Pid jarg1_);
  public final static native void Pid_kd_set(long jarg1, Pid jarg1_, double jarg2);
  public final static native double Pid_kd_get(long jarg1, Pid jarg1_);
  public final static native void Pid_ki_set(long jarg1, Pid jarg1_, double jarg2);
  public final static native double Pid_ki_get(long jarg1, Pid jarg1_);
  public final static native void Pid_max_int_set(long jarg1, Pid jarg1_, double jarg2);
  public final static native double Pid_max_int_get(long jarg1, Pid jarg1_);
  public final static native void Pid_scale_set(long jarg1, Pid jarg1_, double jarg2);
  public final static native double Pid_scale_get(long jarg1, Pid jarg1_);
  public final static native void Pid_max_output_set(long jarg1, Pid jarg1_, double jarg2);
  public final static native double Pid_max_output_get(long jarg1, Pid jarg1_);
  public final static native void Pid_offset_set(long jarg1, Pid jarg1_, double jarg2);
  public final static native double Pid_offset_get(long jarg1, Pid jarg1_);
  public final static native void Pid_stiction_up_val_set(long jarg1, Pid jarg1_, double jarg2);
  public final static native double Pid_stiction_up_val_get(long jarg1, Pid jarg1_);
  public final static native void Pid_stiction_down_val_set(long jarg1, Pid jarg1_, double jarg2);
  public final static native double Pid_stiction_down_val_get(long jarg1, Pid jarg1_);
  public final static native void Pid_kff_set(long jarg1, Pid jarg1_, double jarg2);
  public final static native double Pid_kff_get(long jarg1, Pid jarg1_);
  public final static native long new_Pid__SWIG_0();
  public final static native void delete_Pid(long jarg1);
  public final static native long new_Pid__SWIG_1(double jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6);
  public final static native long new_Pid__SWIG_2(double jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7, double jarg8, double jarg9);
  public final static native void Pid_setMaxInt(long jarg1, Pid jarg1_, double jarg2);
  public final static native void Pid_setMaxOut(long jarg1, Pid jarg1_, double jarg2);
  public final static native void Pid_setStictionValues(long jarg1, Pid jarg1_, double jarg2, double jarg3);
  public final static native void CartesianEventParameters_type_set(long jarg1, CartesianEventParameters jarg1_, String jarg2);
  public final static native String CartesianEventParameters_type_get(long jarg1, CartesianEventParameters jarg1_);
  public final static native void CartesianEventParameters_motionOngoingCheckPoint_set(long jarg1, CartesianEventParameters jarg1_, double jarg2);
  public final static native double CartesianEventParameters_motionOngoingCheckPoint_get(long jarg1, CartesianEventParameters jarg1_);
  public final static native long new_CartesianEventParameters();
  public final static native void delete_CartesianEventParameters(long jarg1);
  public final static native void CartesianEventVariables_type_set(long jarg1, CartesianEventVariables jarg1_, String jarg2);
  public final static native String CartesianEventVariables_type_get(long jarg1, CartesianEventVariables jarg1_);
  public final static native void CartesianEventVariables_time_set(long jarg1, CartesianEventVariables jarg1_, double jarg2);
  public final static native double CartesianEventVariables_time_get(long jarg1, CartesianEventVariables jarg1_);
  public final static native void CartesianEventVariables_motionOngoingCheckPoint_set(long jarg1, CartesianEventVariables jarg1_, double jarg2);
  public final static native double CartesianEventVariables_motionOngoingCheckPoint_get(long jarg1, CartesianEventVariables jarg1_);
  public final static native long new_CartesianEventVariables();
  public final static native void delete_CartesianEventVariables(long jarg1);
  public final static native void delete_CartesianEvent(long jarg1);
  public final static native void CartesianEvent_cartesianEventParameters_set(long jarg1, CartesianEvent jarg1_, long jarg2, CartesianEventParameters jarg2_);
  public final static native long CartesianEvent_cartesianEventParameters_get(long jarg1, CartesianEvent jarg1_);
  public final static native void CartesianEvent_cartesianEventVariables_set(long jarg1, CartesianEvent jarg1_, long jarg2, CartesianEventVariables jarg2_);
  public final static native long CartesianEvent_cartesianEventVariables_get(long jarg1, CartesianEvent jarg1_);
  public final static native void CartesianEvent_cartesianEventCallback(long jarg1, CartesianEvent jarg1_);
  public final static native void delete_ICartesianControl(long jarg1);
  public final static native boolean ICartesianControl_setTrackingMode(long jarg1, ICartesianControl jarg1_, boolean jarg2);
  public final static native boolean ICartesianControl_getTrackingMode(long jarg1, ICartesianControl jarg1_, long jarg2);
  public final static native boolean ICartesianControl_setReferenceMode(long jarg1, ICartesianControl jarg1_, boolean jarg2);
  public final static native boolean ICartesianControl_getReferenceMode(long jarg1, ICartesianControl jarg1_, long jarg2);
  public final static native boolean ICartesianControl_setPosePriority(long jarg1, ICartesianControl jarg1_, String jarg2);
  public final static native boolean ICartesianControl_getPosePriority(long jarg1, ICartesianControl jarg1_, long jarg2);
  public final static native boolean ICartesianControl_getPose__SWIG_0(long jarg1, ICartesianControl jarg1_, long jarg2, Vector jarg2_, long jarg3, Vector jarg3_, long jarg4, Stamp jarg4_);
  public final static native boolean ICartesianControl_getPose__SWIG_1(long jarg1, ICartesianControl jarg1_, long jarg2, Vector jarg2_, long jarg3, Vector jarg3_);
  public final static native boolean ICartesianControl_getPose__SWIG_2(long jarg1, ICartesianControl jarg1_, int jarg2, long jarg3, Vector jarg3_, long jarg4, Vector jarg4_, long jarg5, Stamp jarg5_);
  public final static native boolean ICartesianControl_getPose__SWIG_3(long jarg1, ICartesianControl jarg1_, int jarg2, long jarg3, Vector jarg3_, long jarg4, Vector jarg4_);
  public final static native boolean ICartesianControl_goToPose__SWIG_0(long jarg1, ICartesianControl jarg1_, long jarg2, Vector jarg2_, long jarg3, Vector jarg3_, double jarg4);
  public final static native boolean ICartesianControl_goToPose__SWIG_1(long jarg1, ICartesianControl jarg1_, long jarg2, Vector jarg2_, long jarg3, Vector jarg3_);
  public final static native boolean ICartesianControl_goToPosition__SWIG_0(long jarg1, ICartesianControl jarg1_, long jarg2, Vector jarg2_, double jarg3);
  public final static native boolean ICartesianControl_goToPosition__SWIG_1(long jarg1, ICartesianControl jarg1_, long jarg2, Vector jarg2_);
  public final static native boolean ICartesianControl_goToPoseSync__SWIG_0(long jarg1, ICartesianControl jarg1_, long jarg2, Vector jarg2_, long jarg3, Vector jarg3_, double jarg4);
  public final static native boolean ICartesianControl_goToPoseSync__SWIG_1(long jarg1, ICartesianControl jarg1_, long jarg2, Vector jarg2_, long jarg3, Vector jarg3_);
  public final static native boolean ICartesianControl_goToPositionSync__SWIG_0(long jarg1, ICartesianControl jarg1_, long jarg2, Vector jarg2_, double jarg3);
  public final static native boolean ICartesianControl_goToPositionSync__SWIG_1(long jarg1, ICartesianControl jarg1_, long jarg2, Vector jarg2_);
  public final static native boolean ICartesianControl_getDesired(long jarg1, ICartesianControl jarg1_, long jarg2, Vector jarg2_, long jarg3, Vector jarg3_, long jarg4, Vector jarg4_);
  public final static native boolean ICartesianControl_askForPose__SWIG_0(long jarg1, ICartesianControl jarg1_, long jarg2, Vector jarg2_, long jarg3, Vector jarg3_, long jarg4, Vector jarg4_, long jarg5, Vector jarg5_, long jarg6, Vector jarg6_);
  public final static native boolean ICartesianControl_askForPose__SWIG_1(long jarg1, ICartesianControl jarg1_, long jarg2, Vector jarg2_, long jarg3, Vector jarg3_, long jarg4, Vector jarg4_, long jarg5, Vector jarg5_, long jarg6, Vector jarg6_, long jarg7, Vector jarg7_);
  public final static native boolean ICartesianControl_askForPosition__SWIG_0(long jarg1, ICartesianControl jarg1_, long jarg2, Vector jarg2_, long jarg3, Vector jarg3_, long jarg4, Vector jarg4_, long jarg5, Vector jarg5_);
  public final static native boolean ICartesianControl_askForPosition__SWIG_1(long jarg1, ICartesianControl jarg1_, long jarg2, Vector jarg2_, long jarg3, Vector jarg3_, long jarg4, Vector jarg4_, long jarg5, Vector jarg5_, long jarg6, Vector jarg6_);
  public final static native boolean ICartesianControl_getDOF(long jarg1, ICartesianControl jarg1_, long jarg2, Vector jarg2_);
  public final static native boolean ICartesianControl_setDOF(long jarg1, ICartesianControl jarg1_, long jarg2, Vector jarg2_, long jarg3, Vector jarg3_);
  public final static native boolean ICartesianControl_getRestPos(long jarg1, ICartesianControl jarg1_, long jarg2, Vector jarg2_);
  public final static native boolean ICartesianControl_setRestPos(long jarg1, ICartesianControl jarg1_, long jarg2, Vector jarg2_, long jarg3, Vector jarg3_);
  public final static native boolean ICartesianControl_getRestWeights(long jarg1, ICartesianControl jarg1_, long jarg2, Vector jarg2_);
  public final static native boolean ICartesianControl_setRestWeights(long jarg1, ICartesianControl jarg1_, long jarg2, Vector jarg2_, long jarg3, Vector jarg3_);
  public final static native boolean ICartesianControl_getLimits(long jarg1, ICartesianControl jarg1_, int jarg2, long jarg3, long jarg4);
  public final static native boolean ICartesianControl_setLimits(long jarg1, ICartesianControl jarg1_, int jarg2, double jarg3, double jarg4);
  public final static native boolean ICartesianControl_getTrajTime(long jarg1, ICartesianControl jarg1_, long jarg2);
  public final static native boolean ICartesianControl_setTrajTime(long jarg1, ICartesianControl jarg1_, double jarg2);
  public final static native boolean ICartesianControl_getInTargetTol(long jarg1, ICartesianControl jarg1_, long jarg2);
  public final static native boolean ICartesianControl_setInTargetTol(long jarg1, ICartesianControl jarg1_, double jarg2);
  public final static native boolean ICartesianControl_getJointsVelocities(long jarg1, ICartesianControl jarg1_, long jarg2, Vector jarg2_);
  public final static native boolean ICartesianControl_getTaskVelocities(long jarg1, ICartesianControl jarg1_, long jarg2, Vector jarg2_, long jarg3, Vector jarg3_);
  public final static native boolean ICartesianControl_setTaskVelocities(long jarg1, ICartesianControl jarg1_, long jarg2, Vector jarg2_, long jarg3, Vector jarg3_);
  public final static native boolean ICartesianControl_attachTipFrame(long jarg1, ICartesianControl jarg1_, long jarg2, Vector jarg2_, long jarg3, Vector jarg3_);
  public final static native boolean ICartesianControl_getTipFrame(long jarg1, ICartesianControl jarg1_, long jarg2, Vector jarg2_, long jarg3, Vector jarg3_);
  public final static native boolean ICartesianControl_removeTipFrame(long jarg1, ICartesianControl jarg1_);
  public final static native boolean ICartesianControl_checkMotionDone__SWIG_0(long jarg1, ICartesianControl jarg1_, long jarg2);
  public final static native boolean ICartesianControl_waitMotionDone__SWIG_0(long jarg1, ICartesianControl jarg1_, double jarg2, double jarg3);
  public final static native boolean ICartesianControl_waitMotionDone__SWIG_1(long jarg1, ICartesianControl jarg1_, double jarg2);
  public final static native boolean ICartesianControl_waitMotionDone__SWIG_2(long jarg1, ICartesianControl jarg1_);
  public final static native boolean ICartesianControl_stopControl(long jarg1, ICartesianControl jarg1_);
  public final static native boolean ICartesianControl_storeContext(long jarg1, ICartesianControl jarg1_, long jarg2);
  public final static native boolean ICartesianControl_restoreContext(long jarg1, ICartesianControl jarg1_, int jarg2);
  public final static native boolean ICartesianControl_deleteContext(long jarg1, ICartesianControl jarg1_, int jarg2);
  public final static native boolean ICartesianControl_getInfo(long jarg1, ICartesianControl jarg1_, long jarg2, Bottle jarg2_);
  public final static native boolean ICartesianControl_registerEvent(long jarg1, ICartesianControl jarg1_, long jarg2, CartesianEvent jarg2_);
  public final static native boolean ICartesianControl_unregisterEvent(long jarg1, ICartesianControl jarg1_, long jarg2, CartesianEvent jarg2_);
  public final static native boolean ICartesianControl_tweakSet(long jarg1, ICartesianControl jarg1_, long jarg2, Bottle jarg2_);
  public final static native boolean ICartesianControl_tweakGet(long jarg1, ICartesianControl jarg1_, long jarg2, Bottle jarg2_);
  public final static native boolean ICartesianControl_checkMotionDone__SWIG_1(long jarg1, ICartesianControl jarg1_, long jarg2, BVector jarg2_);
  public final static native boolean ICartesianControl_checkMotionDone__SWIG_2(long jarg1, ICartesianControl jarg1_);
  public final static native boolean ICartesianControl_isMotionDone(long jarg1, ICartesianControl jarg1_);
  public final static native void GazeEventParameters_type_set(long jarg1, GazeEventParameters jarg1_, String jarg2);
  public final static native String GazeEventParameters_type_get(long jarg1, GazeEventParameters jarg1_);
  public final static native void GazeEventParameters_motionOngoingCheckPoint_set(long jarg1, GazeEventParameters jarg1_, double jarg2);
  public final static native double GazeEventParameters_motionOngoingCheckPoint_get(long jarg1, GazeEventParameters jarg1_);
  public final static native long new_GazeEventParameters();
  public final static native void delete_GazeEventParameters(long jarg1);
  public final static native void GazeEventVariables_type_set(long jarg1, GazeEventVariables jarg1_, String jarg2);
  public final static native String GazeEventVariables_type_get(long jarg1, GazeEventVariables jarg1_);
  public final static native void GazeEventVariables_time_set(long jarg1, GazeEventVariables jarg1_, double jarg2);
  public final static native double GazeEventVariables_time_get(long jarg1, GazeEventVariables jarg1_);
  public final static native void GazeEventVariables_motionOngoingCheckPoint_set(long jarg1, GazeEventVariables jarg1_, double jarg2);
  public final static native double GazeEventVariables_motionOngoingCheckPoint_get(long jarg1, GazeEventVariables jarg1_);
  public final static native long new_GazeEventVariables();
  public final static native void delete_GazeEventVariables(long jarg1);
  public final static native void delete_GazeEvent(long jarg1);
  public final static native void GazeEvent_gazeEventParameters_set(long jarg1, GazeEvent jarg1_, long jarg2, GazeEventParameters jarg2_);
  public final static native long GazeEvent_gazeEventParameters_get(long jarg1, GazeEvent jarg1_);
  public final static native void GazeEvent_gazeEventVariables_set(long jarg1, GazeEvent jarg1_, long jarg2, GazeEventVariables jarg2_);
  public final static native long GazeEvent_gazeEventVariables_get(long jarg1, GazeEvent jarg1_);
  public final static native void GazeEvent_gazeEventCallback(long jarg1, GazeEvent jarg1_);
  public final static native void delete_IGazeControl(long jarg1);
  public final static native boolean IGazeControl_setTrackingMode(long jarg1, IGazeControl jarg1_, boolean jarg2);
  public final static native boolean IGazeControl_getTrackingMode__SWIG_0(long jarg1, IGazeControl jarg1_, long jarg2);
  public final static native boolean IGazeControl_getFixationPoint__SWIG_0(long jarg1, IGazeControl jarg1_, long jarg2, Vector jarg2_, long jarg3, Stamp jarg3_);
  public final static native boolean IGazeControl_getFixationPoint__SWIG_1(long jarg1, IGazeControl jarg1_, long jarg2, Vector jarg2_);
  public final static native boolean IGazeControl_getAngles__SWIG_0(long jarg1, IGazeControl jarg1_, long jarg2, Vector jarg2_, long jarg3, Stamp jarg3_);
  public final static native boolean IGazeControl_getAngles__SWIG_1(long jarg1, IGazeControl jarg1_, long jarg2, Vector jarg2_);
  public final static native boolean IGazeControl_lookAtFixationPoint(long jarg1, IGazeControl jarg1_, long jarg2, Vector jarg2_);
  public final static native boolean IGazeControl_lookAtAbsAngles(long jarg1, IGazeControl jarg1_, long jarg2, Vector jarg2_);
  public final static native boolean IGazeControl_lookAtRelAngles(long jarg1, IGazeControl jarg1_, long jarg2, Vector jarg2_);
  public final static native boolean IGazeControl_lookAtMonoPixel__SWIG_0(long jarg1, IGazeControl jarg1_, int jarg2, long jarg3, Vector jarg3_, double jarg4);
  public final static native boolean IGazeControl_lookAtMonoPixel__SWIG_1(long jarg1, IGazeControl jarg1_, int jarg2, long jarg3, Vector jarg3_);
  public final static native boolean IGazeControl_lookAtMonoPixelWithVergence(long jarg1, IGazeControl jarg1_, int jarg2, long jarg3, Vector jarg3_, double jarg4);
  public final static native boolean IGazeControl_lookAtStereoPixels(long jarg1, IGazeControl jarg1_, long jarg2, Vector jarg2_, long jarg3, Vector jarg3_);
  public final static native boolean IGazeControl_getNeckTrajTime__SWIG_0(long jarg1, IGazeControl jarg1_, long jarg2);
  public final static native boolean IGazeControl_getEyesTrajTime__SWIG_0(long jarg1, IGazeControl jarg1_, long jarg2);
  public final static native boolean IGazeControl_getVORGain(long jarg1, IGazeControl jarg1_, long jarg2);
  public final static native boolean IGazeControl_getOCRGain(long jarg1, IGazeControl jarg1_, long jarg2);
  public final static native boolean IGazeControl_getSaccadesStatus(long jarg1, IGazeControl jarg1_, long jarg2);
  public final static native boolean IGazeControl_getSaccadesInhibitionPeriod(long jarg1, IGazeControl jarg1_, long jarg2);
  public final static native boolean IGazeControl_getSaccadesActivationAngle(long jarg1, IGazeControl jarg1_, long jarg2);
  public final static native boolean IGazeControl_getLeftEyePose__SWIG_0(long jarg1, IGazeControl jarg1_, long jarg2, Vector jarg2_, long jarg3, Vector jarg3_, long jarg4, Stamp jarg4_);
  public final static native boolean IGazeControl_getLeftEyePose__SWIG_1(long jarg1, IGazeControl jarg1_, long jarg2, Vector jarg2_, long jarg3, Vector jarg3_);
  public final static native boolean IGazeControl_getRightEyePose__SWIG_0(long jarg1, IGazeControl jarg1_, long jarg2, Vector jarg2_, long jarg3, Vector jarg3_, long jarg4, Stamp jarg4_);
  public final static native boolean IGazeControl_getRightEyePose__SWIG_1(long jarg1, IGazeControl jarg1_, long jarg2, Vector jarg2_, long jarg3, Vector jarg3_);
  public final static native boolean IGazeControl_getHeadPose__SWIG_0(long jarg1, IGazeControl jarg1_, long jarg2, Vector jarg2_, long jarg3, Vector jarg3_, long jarg4, Stamp jarg4_);
  public final static native boolean IGazeControl_getHeadPose__SWIG_1(long jarg1, IGazeControl jarg1_, long jarg2, Vector jarg2_, long jarg3, Vector jarg3_);
  public final static native boolean IGazeControl_get2DPixel(long jarg1, IGazeControl jarg1_, int jarg2, long jarg3, Vector jarg3_, long jarg4, Vector jarg4_);
  public final static native boolean IGazeControl_get3DPoint(long jarg1, IGazeControl jarg1_, int jarg2, long jarg3, Vector jarg3_, double jarg4, long jarg5, Vector jarg5_);
  public final static native boolean IGazeControl_get3DPointOnPlane(long jarg1, IGazeControl jarg1_, int jarg2, long jarg3, Vector jarg3_, long jarg4, Vector jarg4_, long jarg5, Vector jarg5_);
  public final static native boolean IGazeControl_get3DPointFromAngles(long jarg1, IGazeControl jarg1_, int jarg2, long jarg3, Vector jarg3_, long jarg4, Vector jarg4_);
  public final static native boolean IGazeControl_getAnglesFrom3DPoint(long jarg1, IGazeControl jarg1_, long jarg2, Vector jarg2_, long jarg3, Vector jarg3_);
  public final static native boolean IGazeControl_triangulate3DPoint(long jarg1, IGazeControl jarg1_, long jarg2, Vector jarg2_, long jarg3, Vector jarg3_, long jarg4, Vector jarg4_);
  public final static native boolean IGazeControl_getJointsDesired(long jarg1, IGazeControl jarg1_, long jarg2, Vector jarg2_);
  public final static native boolean IGazeControl_getJointsVelocities(long jarg1, IGazeControl jarg1_, long jarg2, Vector jarg2_);
  public final static native boolean IGazeControl_getStereoOptions(long jarg1, IGazeControl jarg1_, long jarg2, Bottle jarg2_);
  public final static native boolean IGazeControl_setNeckTrajTime(long jarg1, IGazeControl jarg1_, double jarg2);
  public final static native boolean IGazeControl_setEyesTrajTime(long jarg1, IGazeControl jarg1_, double jarg2);
  public final static native boolean IGazeControl_setVORGain(long jarg1, IGazeControl jarg1_, double jarg2);
  public final static native boolean IGazeControl_setOCRGain(long jarg1, IGazeControl jarg1_, double jarg2);
  public final static native boolean IGazeControl_setSaccadesStatus(long jarg1, IGazeControl jarg1_, boolean jarg2);
  public final static native boolean IGazeControl_setSaccadesInhibitionPeriod(long jarg1, IGazeControl jarg1_, double jarg2);
  public final static native boolean IGazeControl_setSaccadesActivationAngle(long jarg1, IGazeControl jarg1_, double jarg2);
  public final static native boolean IGazeControl_setStereoOptions(long jarg1, IGazeControl jarg1_, long jarg2, Bottle jarg2_);
  public final static native boolean IGazeControl_bindNeckPitch(long jarg1, IGazeControl jarg1_, double jarg2, double jarg3);
  public final static native boolean IGazeControl_blockNeckPitch__SWIG_0(long jarg1, IGazeControl jarg1_, double jarg2);
  public final static native boolean IGazeControl_blockNeckPitch__SWIG_1(long jarg1, IGazeControl jarg1_);
  public final static native boolean IGazeControl_bindNeckRoll(long jarg1, IGazeControl jarg1_, double jarg2, double jarg3);
  public final static native boolean IGazeControl_blockNeckRoll__SWIG_0(long jarg1, IGazeControl jarg1_, double jarg2);
  public final static native boolean IGazeControl_blockNeckRoll__SWIG_1(long jarg1, IGazeControl jarg1_);
  public final static native boolean IGazeControl_bindNeckYaw(long jarg1, IGazeControl jarg1_, double jarg2, double jarg3);
  public final static native boolean IGazeControl_blockNeckYaw__SWIG_0(long jarg1, IGazeControl jarg1_, double jarg2);
  public final static native boolean IGazeControl_blockNeckYaw__SWIG_1(long jarg1, IGazeControl jarg1_);
  public final static native boolean IGazeControl_blockEyes__SWIG_0(long jarg1, IGazeControl jarg1_, double jarg2);
  public final static native boolean IGazeControl_blockEyes__SWIG_1(long jarg1, IGazeControl jarg1_);
  public final static native boolean IGazeControl_getNeckPitchRange(long jarg1, IGazeControl jarg1_, long jarg2, long jarg3);
  public final static native boolean IGazeControl_getNeckRollRange(long jarg1, IGazeControl jarg1_, long jarg2, long jarg3);
  public final static native boolean IGazeControl_getNeckYawRange(long jarg1, IGazeControl jarg1_, long jarg2, long jarg3);
  public final static native boolean IGazeControl_getBlockedVergence(long jarg1, IGazeControl jarg1_, long jarg2);
  public final static native boolean IGazeControl_clearNeckPitch(long jarg1, IGazeControl jarg1_);
  public final static native boolean IGazeControl_clearNeckRoll(long jarg1, IGazeControl jarg1_);
  public final static native boolean IGazeControl_clearNeckYaw(long jarg1, IGazeControl jarg1_);
  public final static native boolean IGazeControl_clearEyes(long jarg1, IGazeControl jarg1_);
  public final static native boolean IGazeControl_getNeckAngleUserTolerance(long jarg1, IGazeControl jarg1_, long jarg2);
  public final static native boolean IGazeControl_setNeckAngleUserTolerance(long jarg1, IGazeControl jarg1_, double jarg2);
  public final static native boolean IGazeControl_checkMotionDone__SWIG_0(long jarg1, IGazeControl jarg1_, long jarg2);
  public final static native boolean IGazeControl_waitMotionDone__SWIG_0(long jarg1, IGazeControl jarg1_, double jarg2, double jarg3);
  public final static native boolean IGazeControl_waitMotionDone__SWIG_1(long jarg1, IGazeControl jarg1_, double jarg2);
  public final static native boolean IGazeControl_waitMotionDone__SWIG_2(long jarg1, IGazeControl jarg1_);
  public final static native boolean IGazeControl_checkSaccadeDone(long jarg1, IGazeControl jarg1_, long jarg2);
  public final static native boolean IGazeControl_waitSaccadeDone__SWIG_0(long jarg1, IGazeControl jarg1_, double jarg2, double jarg3);
  public final static native boolean IGazeControl_waitSaccadeDone__SWIG_1(long jarg1, IGazeControl jarg1_, double jarg2);
  public final static native boolean IGazeControl_waitSaccadeDone__SWIG_2(long jarg1, IGazeControl jarg1_);
  public final static native boolean IGazeControl_stopControl(long jarg1, IGazeControl jarg1_);
  public final static native boolean IGazeControl_storeContext(long jarg1, IGazeControl jarg1_, long jarg2);
  public final static native boolean IGazeControl_restoreContext(long jarg1, IGazeControl jarg1_, int jarg2);
  public final static native boolean IGazeControl_deleteContext(long jarg1, IGazeControl jarg1_, int jarg2);
  public final static native boolean IGazeControl_getInfo(long jarg1, IGazeControl jarg1_, long jarg2, Bottle jarg2_);
  public final static native boolean IGazeControl_registerEvent(long jarg1, IGazeControl jarg1_, long jarg2, GazeEvent jarg2_);
  public final static native boolean IGazeControl_unregisterEvent(long jarg1, IGazeControl jarg1_, long jarg2, GazeEvent jarg2_);
  public final static native boolean IGazeControl_tweakSet(long jarg1, IGazeControl jarg1_, long jarg2, Bottle jarg2_);
  public final static native boolean IGazeControl_tweakGet(long jarg1, IGazeControl jarg1_, long jarg2, Bottle jarg2_);
  public final static native boolean IGazeControl_getTrackingMode__SWIG_1(long jarg1, IGazeControl jarg1_);
  public final static native double IGazeControl_getNeckTrajTime__SWIG_1(long jarg1, IGazeControl jarg1_);
  public final static native double IGazeControl_getEyesTrajTime__SWIG_1(long jarg1, IGazeControl jarg1_);
  public final static native boolean IGazeControl_checkMotionDone__SWIG_1(long jarg1, IGazeControl jarg1_);
  public final static native void delete_IPositionControlRaw(long jarg1);
  public final static native boolean IPositionControlRaw_getAxes(long jarg1, IPositionControlRaw jarg1_, long jarg2);
  public final static native boolean IPositionControlRaw_setPositionModeRaw(long jarg1, IPositionControlRaw jarg1_);
  public final static native boolean IPositionControlRaw_positionMoveRaw__SWIG_0(long jarg1, IPositionControlRaw jarg1_, int jarg2, double jarg3);
  public final static native boolean IPositionControlRaw_positionMoveRaw__SWIG_1(long jarg1, IPositionControlRaw jarg1_, long jarg2);
  public final static native boolean IPositionControlRaw_relativeMoveRaw__SWIG_0(long jarg1, IPositionControlRaw jarg1_, int jarg2, double jarg3);
  public final static native boolean IPositionControlRaw_relativeMoveRaw__SWIG_1(long jarg1, IPositionControlRaw jarg1_, long jarg2);
  public final static native boolean IPositionControlRaw_checkMotionDoneRaw__SWIG_0(long jarg1, IPositionControlRaw jarg1_, int jarg2, long jarg3);
  public final static native boolean IPositionControlRaw_checkMotionDoneRaw__SWIG_1(long jarg1, IPositionControlRaw jarg1_, long jarg2);
  public final static native boolean IPositionControlRaw_setRefSpeedRaw(long jarg1, IPositionControlRaw jarg1_, int jarg2, double jarg3);
  public final static native boolean IPositionControlRaw_setRefSpeedsRaw(long jarg1, IPositionControlRaw jarg1_, long jarg2);
  public final static native boolean IPositionControlRaw_setRefAccelerationRaw(long jarg1, IPositionControlRaw jarg1_, int jarg2, double jarg3);
  public final static native boolean IPositionControlRaw_setRefAccelerationsRaw(long jarg1, IPositionControlRaw jarg1_, long jarg2);
  public final static native boolean IPositionControlRaw_getRefSpeedRaw(long jarg1, IPositionControlRaw jarg1_, int jarg2, long jarg3);
  public final static native boolean IPositionControlRaw_getRefSpeedsRaw(long jarg1, IPositionControlRaw jarg1_, long jarg2);
  public final static native boolean IPositionControlRaw_getRefAccelerationRaw(long jarg1, IPositionControlRaw jarg1_, int jarg2, long jarg3);
  public final static native boolean IPositionControlRaw_getRefAccelerationsRaw(long jarg1, IPositionControlRaw jarg1_, long jarg2);
  public final static native boolean IPositionControlRaw_stopRaw__SWIG_0(long jarg1, IPositionControlRaw jarg1_, int jarg2);
  public final static native boolean IPositionControlRaw_stopRaw__SWIG_1(long jarg1, IPositionControlRaw jarg1_);
  public final static native void delete_IPositionControl(long jarg1);
  public final static native boolean IPositionControl_getAxes__SWIG_0(long jarg1, IPositionControl jarg1_, long jarg2);
  public final static native boolean IPositionControl_setPositionMode(long jarg1, IPositionControl jarg1_);
  public final static native boolean IPositionControl_positionMove__SWIG_0(long jarg1, IPositionControl jarg1_, int jarg2, double jarg3);
  public final static native boolean IPositionControl_positionMove__SWIG_1(long jarg1, IPositionControl jarg1_, long jarg2);
  public final static native boolean IPositionControl_relativeMove__SWIG_0(long jarg1, IPositionControl jarg1_, int jarg2, double jarg3);
  public final static native boolean IPositionControl_relativeMove__SWIG_1(long jarg1, IPositionControl jarg1_, long jarg2);
  public final static native boolean IPositionControl_checkMotionDone__SWIG_0(long jarg1, IPositionControl jarg1_, int jarg2, long jarg3);
  public final static native boolean IPositionControl_checkMotionDone__SWIG_1(long jarg1, IPositionControl jarg1_, long jarg2);
  public final static native boolean IPositionControl_setRefSpeed(long jarg1, IPositionControl jarg1_, int jarg2, double jarg3);
  public final static native boolean IPositionControl_setRefSpeeds__SWIG_0(long jarg1, IPositionControl jarg1_, long jarg2);
  public final static native boolean IPositionControl_setRefAcceleration(long jarg1, IPositionControl jarg1_, int jarg2, double jarg3);
  public final static native boolean IPositionControl_setRefAccelerations(long jarg1, IPositionControl jarg1_, long jarg2);
  public final static native boolean IPositionControl_getRefSpeed__SWIG_0(long jarg1, IPositionControl jarg1_, int jarg2, long jarg3);
  public final static native boolean IPositionControl_getRefSpeeds__SWIG_0(long jarg1, IPositionControl jarg1_, long jarg2);
  public final static native boolean IPositionControl_getRefAcceleration__SWIG_0(long jarg1, IPositionControl jarg1_, int jarg2, long jarg3);
  public final static native boolean IPositionControl_getRefAccelerations__SWIG_0(long jarg1, IPositionControl jarg1_, long jarg2);
  public final static native boolean IPositionControl_stop__SWIG_0(long jarg1, IPositionControl jarg1_, int jarg2);
  public final static native boolean IPositionControl_stop__SWIG_1(long jarg1, IPositionControl jarg1_);
  public final static native int IPositionControl_getAxes__SWIG_1(long jarg1, IPositionControl jarg1_);
  public final static native boolean IPositionControl_positionMove__SWIG_2(long jarg1, IPositionControl jarg1_, long jarg2, DVector jarg2_);
  public final static native boolean IPositionControl_relativeMove__SWIG_2(long jarg1, IPositionControl jarg1_, long jarg2, DVector jarg2_);
  public final static native boolean IPositionControl_setRefSpeeds__SWIG_1(long jarg1, IPositionControl jarg1_, long jarg2, DVector jarg2_);
  public final static native boolean IPositionControl_getRefSpeed__SWIG_1(long jarg1, IPositionControl jarg1_, int jarg2, long jarg3, DVector jarg3_);
  public final static native boolean IPositionControl_getRefSpeeds__SWIG_1(long jarg1, IPositionControl jarg1_, long jarg2, DVector jarg2_);
  public final static native boolean IPositionControl_getRefAcceleration__SWIG_1(long jarg1, IPositionControl jarg1_, int jarg2, long jarg3, DVector jarg3_);
  public final static native boolean IPositionControl_getRefAccelerations__SWIG_1(long jarg1, IPositionControl jarg1_, long jarg2, DVector jarg2_);
  public final static native boolean IPositionControl_checkMotionDone__SWIG_2(long jarg1, IPositionControl jarg1_);
  public final static native boolean IPositionControl_checkMotionDone__SWIG_3(long jarg1, IPositionControl jarg1_, long jarg2, BVector jarg2_);
  public final static native boolean IPositionControl_checkMotionDone__SWIG_4(long jarg1, IPositionControl jarg1_, int jarg2, long jarg3, BVector jarg3_);
  public final static native boolean IPositionControl_isMotionDone__SWIG_0(long jarg1, IPositionControl jarg1_, int jarg2);
  public final static native boolean IPositionControl_isMotionDone__SWIG_1(long jarg1, IPositionControl jarg1_);
  public final static native void delete_IEncodersRaw(long jarg1);
  public final static native boolean IEncodersRaw_getAxes(long jarg1, IEncodersRaw jarg1_, long jarg2);
  public final static native boolean IEncodersRaw_resetEncoderRaw(long jarg1, IEncodersRaw jarg1_, int jarg2);
  public final static native boolean IEncodersRaw_resetEncodersRaw(long jarg1, IEncodersRaw jarg1_);
  public final static native boolean IEncodersRaw_setEncoderRaw(long jarg1, IEncodersRaw jarg1_, int jarg2, double jarg3);
  public final static native boolean IEncodersRaw_setEncodersRaw(long jarg1, IEncodersRaw jarg1_, long jarg2);
  public final static native boolean IEncodersRaw_getEncoderRaw(long jarg1, IEncodersRaw jarg1_, int jarg2, long jarg3);
  public final static native boolean IEncodersRaw_getEncodersRaw(long jarg1, IEncodersRaw jarg1_, long jarg2);
  public final static native boolean IEncodersRaw_getEncoderSpeedRaw(long jarg1, IEncodersRaw jarg1_, int jarg2, long jarg3);
  public final static native boolean IEncodersRaw_getEncoderSpeedsRaw(long jarg1, IEncodersRaw jarg1_, long jarg2);
  public final static native boolean IEncodersRaw_getEncoderAccelerationRaw(long jarg1, IEncodersRaw jarg1_, int jarg2, long jarg3);
  public final static native boolean IEncodersRaw_getEncoderAccelerationsRaw(long jarg1, IEncodersRaw jarg1_, long jarg2);
  public final static native void delete_IEncoders(long jarg1);
  public final static native boolean IEncoders_getAxes__SWIG_0(long jarg1, IEncoders jarg1_, long jarg2);
  public final static native boolean IEncoders_resetEncoder(long jarg1, IEncoders jarg1_, int jarg2);
  public final static native boolean IEncoders_resetEncoders(long jarg1, IEncoders jarg1_);
  public final static native boolean IEncoders_setEncoder(long jarg1, IEncoders jarg1_, int jarg2, double jarg3);
  public final static native boolean IEncoders_setEncoders__SWIG_0(long jarg1, IEncoders jarg1_, long jarg2);
  public final static native boolean IEncoders_getEncoder__SWIG_0(long jarg1, IEncoders jarg1_, int jarg2, long jarg3);
  public final static native boolean IEncoders_getEncoders__SWIG_0(long jarg1, IEncoders jarg1_, long jarg2);
  public final static native boolean IEncoders_getEncoderSpeed__SWIG_0(long jarg1, IEncoders jarg1_, int jarg2, long jarg3);
  public final static native boolean IEncoders_getEncoderSpeeds__SWIG_0(long jarg1, IEncoders jarg1_, long jarg2);
  public final static native boolean IEncoders_getEncoderAcceleration__SWIG_0(long jarg1, IEncoders jarg1_, int jarg2, long jarg3);
  public final static native boolean IEncoders_getEncoderAccelerations__SWIG_0(long jarg1, IEncoders jarg1_, long jarg2);
  public final static native int IEncoders_getAxes__SWIG_1(long jarg1, IEncoders jarg1_);
  public final static native boolean IEncoders_setEncoders__SWIG_1(long jarg1, IEncoders jarg1_, long jarg2, DVector jarg2_);
  public final static native double IEncoders_getEncoder__SWIG_1(long jarg1, IEncoders jarg1_, int jarg2);
  public final static native boolean IEncoders_getEncoders__SWIG_1(long jarg1, IEncoders jarg1_, long jarg2, DVector jarg2_);
  public final static native double IEncoders_getEncoderSpeed__SWIG_1(long jarg1, IEncoders jarg1_, int jarg2);
  public final static native boolean IEncoders_getEncoderSpeeds__SWIG_1(long jarg1, IEncoders jarg1_, long jarg2, DVector jarg2_);
  public final static native double IEncoders_getEncoderAcceleration__SWIG_1(long jarg1, IEncoders jarg1_, int jarg2);
  public final static native boolean IEncoders_getEncoderAccelerations__SWIG_1(long jarg1, IEncoders jarg1_, long jarg2, DVector jarg2_);
  public final static native void delete_ICalibrator(long jarg1);
  public final static native boolean ICalibrator_calibrate(long jarg1, ICalibrator jarg1_, long jarg2, DeviceDriver jarg2_);
  public final static native boolean ICalibrator_park__SWIG_0(long jarg1, ICalibrator jarg1_, long jarg2, DeviceDriver jarg2_, boolean jarg3);
  public final static native boolean ICalibrator_park__SWIG_1(long jarg1, ICalibrator jarg1_, long jarg2, DeviceDriver jarg2_);
  public final static native boolean ICalibrator_quitCalibrate(long jarg1, ICalibrator jarg1_);
  public final static native boolean ICalibrator_quitPark(long jarg1, ICalibrator jarg1_);
  public final static native void delete_IRemoteCalibrator(long jarg1);
  public final static native boolean IRemoteCalibrator_setCalibratorDevice(long jarg1, IRemoteCalibrator jarg1_, long jarg2, IRemoteCalibrator jarg2_);
  public final static native long IRemoteCalibrator_getCalibratorDevice(long jarg1, IRemoteCalibrator jarg1_);
  public final static native boolean IRemoteCalibrator_isCalibratorDevicePresent(long jarg1, IRemoteCalibrator jarg1_, long jarg2);
  public final static native void IRemoteCalibrator_releaseCalibratorDevice(long jarg1, IRemoteCalibrator jarg1_);
  public final static native boolean IRemoteCalibrator_calibrateSingleJoint(long jarg1, IRemoteCalibrator jarg1_, int jarg2);
  public final static native boolean IRemoteCalibrator_calibrateWholePart(long jarg1, IRemoteCalibrator jarg1_);
  public final static native boolean IRemoteCalibrator_homingSingleJoint(long jarg1, IRemoteCalibrator jarg1_, int jarg2);
  public final static native boolean IRemoteCalibrator_homingWholePart(long jarg1, IRemoteCalibrator jarg1_);
  public final static native boolean IRemoteCalibrator_parkSingleJoint__SWIG_0(long jarg1, IRemoteCalibrator jarg1_, int jarg2, boolean jarg3);
  public final static native boolean IRemoteCalibrator_parkSingleJoint__SWIG_1(long jarg1, IRemoteCalibrator jarg1_, int jarg2);
  public final static native boolean IRemoteCalibrator_parkWholePart(long jarg1, IRemoteCalibrator jarg1_);
  public final static native boolean IRemoteCalibrator_quitCalibrate(long jarg1, IRemoteCalibrator jarg1_);
  public final static native boolean IRemoteCalibrator_quitPark(long jarg1, IRemoteCalibrator jarg1_);
  public final static native void delete_IControlMode(long jarg1);
  public final static native boolean IControlMode_setPositionMode(long jarg1, IControlMode jarg1_, int jarg2);
  public final static native boolean IControlMode_setVelocityMode(long jarg1, IControlMode jarg1_, int jarg2);
  public final static native boolean IControlMode_setTorqueMode(long jarg1, IControlMode jarg1_, int jarg2);
  public final static native boolean IControlMode_setImpedancePositionMode(long jarg1, IControlMode jarg1_, int jarg2);
  public final static native boolean IControlMode_setImpedanceVelocityMode(long jarg1, IControlMode jarg1_, int jarg2);
  public final static native boolean IControlMode_setOpenLoopMode(long jarg1, IControlMode jarg1_, int jarg2);
  public final static native boolean IControlMode_getControlMode(long jarg1, IControlMode jarg1_, int jarg2, long jarg3);
  public final static native boolean IControlMode_getControlModes(long jarg1, IControlMode jarg1_, long jarg2);
  public final static native void delete_IControlModeRaw(long jarg1);
  public final static native boolean IControlModeRaw_setPositionModeRaw(long jarg1, IControlModeRaw jarg1_, int jarg2);
  public final static native boolean IControlModeRaw_setVelocityModeRaw(long jarg1, IControlModeRaw jarg1_, int jarg2);
  public final static native boolean IControlModeRaw_setTorqueModeRaw(long jarg1, IControlModeRaw jarg1_, int jarg2);
  public final static native boolean IControlModeRaw_setImpedancePositionModeRaw(long jarg1, IControlModeRaw jarg1_, int jarg2);
  public final static native boolean IControlModeRaw_setImpedanceVelocityModeRaw(long jarg1, IControlModeRaw jarg1_, int jarg2);
  public final static native boolean IControlModeRaw_setOpenLoopModeRaw(long jarg1, IControlModeRaw jarg1_, int jarg2);
  public final static native boolean IControlModeRaw_getControlModeRaw(long jarg1, IControlModeRaw jarg1_, int jarg2, long jarg3);
  public final static native boolean IControlModeRaw_getControlModesRaw(long jarg1, IControlModeRaw jarg1_, long jarg2);
  public final static native void MotorTorqueParameters_bemf_set(long jarg1, MotorTorqueParameters jarg1_, double jarg2);
  public final static native double MotorTorqueParameters_bemf_get(long jarg1, MotorTorqueParameters jarg1_);
  public final static native void MotorTorqueParameters_bemf_scale_set(long jarg1, MotorTorqueParameters jarg1_, double jarg2);
  public final static native double MotorTorqueParameters_bemf_scale_get(long jarg1, MotorTorqueParameters jarg1_);
  public final static native void MotorTorqueParameters_ktau_set(long jarg1, MotorTorqueParameters jarg1_, double jarg2);
  public final static native double MotorTorqueParameters_ktau_get(long jarg1, MotorTorqueParameters jarg1_);
  public final static native void MotorTorqueParameters_ktau_scale_set(long jarg1, MotorTorqueParameters jarg1_, double jarg2);
  public final static native double MotorTorqueParameters_ktau_scale_get(long jarg1, MotorTorqueParameters jarg1_);
  public final static native long new_MotorTorqueParameters();
  public final static native void delete_MotorTorqueParameters(long jarg1);
  public final static native void delete_ITorqueControl(long jarg1);
  public final static native boolean ITorqueControl_getAxes(long jarg1, ITorqueControl jarg1_, long jarg2);
  public final static native boolean ITorqueControl_setTorqueMode(long jarg1, ITorqueControl jarg1_);
  public final static native boolean ITorqueControl_getRefTorques(long jarg1, ITorqueControl jarg1_, long jarg2);
  public final static native boolean ITorqueControl_getRefTorque(long jarg1, ITorqueControl jarg1_, int jarg2, long jarg3);
  public final static native boolean ITorqueControl_setRefTorques(long jarg1, ITorqueControl jarg1_, long jarg2);
  public final static native boolean ITorqueControl_setRefTorque(long jarg1, ITorqueControl jarg1_, int jarg2, double jarg3);
  public final static native boolean ITorqueControl_getBemfParam(long jarg1, ITorqueControl jarg1_, int jarg2, long jarg3);
  public final static native boolean ITorqueControl_setBemfParam(long jarg1, ITorqueControl jarg1_, int jarg2, double jarg3);
  public final static native boolean ITorqueControl_getMotorTorqueParams(long jarg1, ITorqueControl jarg1_, int jarg2, long jarg3, MotorTorqueParameters jarg3_);
  public final static native boolean ITorqueControl_setMotorTorqueParams(long jarg1, ITorqueControl jarg1_, int jarg2, long jarg3, MotorTorqueParameters jarg3_);
  public final static native boolean ITorqueControl_setTorquePid(long jarg1, ITorqueControl jarg1_, int jarg2, long jarg3, Pid jarg3_);
  public final static native boolean ITorqueControl_getTorque(long jarg1, ITorqueControl jarg1_, int jarg2, long jarg3);
  public final static native boolean ITorqueControl_getTorques(long jarg1, ITorqueControl jarg1_, long jarg2);
  public final static native boolean ITorqueControl_getTorqueRange(long jarg1, ITorqueControl jarg1_, int jarg2, long jarg3, long jarg4);
  public final static native boolean ITorqueControl_getTorqueRanges(long jarg1, ITorqueControl jarg1_, long jarg2, long jarg3);
  public final static native boolean ITorqueControl_setTorquePids(long jarg1, ITorqueControl jarg1_, long jarg2, Pid jarg2_);
  public final static native boolean ITorqueControl_setTorqueErrorLimit(long jarg1, ITorqueControl jarg1_, int jarg2, double jarg3);
  public final static native boolean ITorqueControl_setTorqueErrorLimits(long jarg1, ITorqueControl jarg1_, long jarg2);
  public final static native boolean ITorqueControl_getTorqueError(long jarg1, ITorqueControl jarg1_, int jarg2, long jarg3);
  public final static native boolean ITorqueControl_getTorqueErrors(long jarg1, ITorqueControl jarg1_, long jarg2);
  public final static native boolean ITorqueControl_getTorquePidOutput(long jarg1, ITorqueControl jarg1_, int jarg2, long jarg3);
  public final static native boolean ITorqueControl_getTorquePidOutputs(long jarg1, ITorqueControl jarg1_, long jarg2);
  public final static native boolean ITorqueControl_getTorquePid(long jarg1, ITorqueControl jarg1_, int jarg2, long jarg3, Pid jarg3_);
  public final static native boolean ITorqueControl_getTorquePids(long jarg1, ITorqueControl jarg1_, long jarg2, Pid jarg2_);
  public final static native boolean ITorqueControl_getTorqueErrorLimit(long jarg1, ITorqueControl jarg1_, int jarg2, long jarg3);
  public final static native boolean ITorqueControl_getTorqueErrorLimits(long jarg1, ITorqueControl jarg1_, long jarg2);
  public final static native boolean ITorqueControl_resetTorquePid(long jarg1, ITorqueControl jarg1_, int jarg2);
  public final static native boolean ITorqueControl_disableTorquePid(long jarg1, ITorqueControl jarg1_, int jarg2);
  public final static native boolean ITorqueControl_enableTorquePid(long jarg1, ITorqueControl jarg1_, int jarg2);
  public final static native boolean ITorqueControl_setTorqueOffset(long jarg1, ITorqueControl jarg1_, int jarg2, double jarg3);
  public final static native void delete_ITorqueControlRaw(long jarg1);
  public final static native boolean ITorqueControlRaw_getAxes(long jarg1, ITorqueControlRaw jarg1_, long jarg2);
  public final static native boolean ITorqueControlRaw_setTorqueModeRaw(long jarg1, ITorqueControlRaw jarg1_);
  public final static native boolean ITorqueControlRaw_getTorqueRaw(long jarg1, ITorqueControlRaw jarg1_, int jarg2, long jarg3);
  public final static native boolean ITorqueControlRaw_getTorquesRaw(long jarg1, ITorqueControlRaw jarg1_, long jarg2);
  public final static native boolean ITorqueControlRaw_getTorqueRangeRaw(long jarg1, ITorqueControlRaw jarg1_, int jarg2, long jarg3, long jarg4);
  public final static native boolean ITorqueControlRaw_getTorqueRangesRaw(long jarg1, ITorqueControlRaw jarg1_, long jarg2, long jarg3);
  public final static native boolean ITorqueControlRaw_setRefTorquesRaw(long jarg1, ITorqueControlRaw jarg1_, long jarg2);
  public final static native boolean ITorqueControlRaw_setRefTorqueRaw(long jarg1, ITorqueControlRaw jarg1_, int jarg2, double jarg3);
  public final static native boolean ITorqueControlRaw_getRefTorquesRaw(long jarg1, ITorqueControlRaw jarg1_, long jarg2);
  public final static native boolean ITorqueControlRaw_getRefTorqueRaw(long jarg1, ITorqueControlRaw jarg1_, int jarg2, long jarg3);
  public final static native boolean ITorqueControlRaw_getBemfParamRaw(long jarg1, ITorqueControlRaw jarg1_, int jarg2, long jarg3);
  public final static native boolean ITorqueControlRaw_setBemfParamRaw(long jarg1, ITorqueControlRaw jarg1_, int jarg2, double jarg3);
  public final static native boolean ITorqueControlRaw_getMotorTorqueParamsRaw(long jarg1, ITorqueControlRaw jarg1_, int jarg2, long jarg3, MotorTorqueParameters jarg3_);
  public final static native boolean ITorqueControlRaw_setMotorTorqueParamsRaw(long jarg1, ITorqueControlRaw jarg1_, int jarg2, long jarg3, MotorTorqueParameters jarg3_);
  public final static native boolean ITorqueControlRaw_setTorquePidRaw(long jarg1, ITorqueControlRaw jarg1_, int jarg2, long jarg3, Pid jarg3_);
  public final static native boolean ITorqueControlRaw_setTorquePidsRaw(long jarg1, ITorqueControlRaw jarg1_, long jarg2, Pid jarg2_);
  public final static native boolean ITorqueControlRaw_setTorqueErrorLimitRaw(long jarg1, ITorqueControlRaw jarg1_, int jarg2, double jarg3);
  public final static native boolean ITorqueControlRaw_setTorqueErrorLimitsRaw(long jarg1, ITorqueControlRaw jarg1_, long jarg2);
  public final static native boolean ITorqueControlRaw_getTorqueErrorRaw(long jarg1, ITorqueControlRaw jarg1_, int jarg2, long jarg3);
  public final static native boolean ITorqueControlRaw_getTorqueErrorsRaw(long jarg1, ITorqueControlRaw jarg1_, long jarg2);
  public final static native boolean ITorqueControlRaw_getTorquePidOutputRaw(long jarg1, ITorqueControlRaw jarg1_, int jarg2, long jarg3);
  public final static native boolean ITorqueControlRaw_getTorquePidOutputsRaw(long jarg1, ITorqueControlRaw jarg1_, long jarg2);
  public final static native boolean ITorqueControlRaw_getTorquePidRaw(long jarg1, ITorqueControlRaw jarg1_, int jarg2, long jarg3, Pid jarg3_);
  public final static native boolean ITorqueControlRaw_getTorquePidsRaw(long jarg1, ITorqueControlRaw jarg1_, long jarg2, Pid jarg2_);
  public final static native boolean ITorqueControlRaw_getTorqueErrorLimitRaw(long jarg1, ITorqueControlRaw jarg1_, int jarg2, long jarg3);
  public final static native boolean ITorqueControlRaw_getTorqueErrorLimitsRaw(long jarg1, ITorqueControlRaw jarg1_, long jarg2);
  public final static native boolean ITorqueControlRaw_resetTorquePidRaw(long jarg1, ITorqueControlRaw jarg1_, int jarg2);
  public final static native boolean ITorqueControlRaw_disableTorquePidRaw(long jarg1, ITorqueControlRaw jarg1_, int jarg2);
  public final static native boolean ITorqueControlRaw_enableTorquePidRaw(long jarg1, ITorqueControlRaw jarg1_, int jarg2);
  public final static native boolean ITorqueControlRaw_setTorqueOffsetRaw(long jarg1, ITorqueControlRaw jarg1_, int jarg2, double jarg3);
  public final static native void delete_IImpedanceControlRaw(long jarg1);
  public final static native boolean IImpedanceControlRaw_getAxes(long jarg1, IImpedanceControlRaw jarg1_, long jarg2);
  public final static native boolean IImpedanceControlRaw_getImpedanceRaw(long jarg1, IImpedanceControlRaw jarg1_, int jarg2, long jarg3, long jarg4);
  public final static native boolean IImpedanceControlRaw_setImpedanceRaw(long jarg1, IImpedanceControlRaw jarg1_, int jarg2, double jarg3, double jarg4);
  public final static native boolean IImpedanceControlRaw_setImpedanceOffsetRaw(long jarg1, IImpedanceControlRaw jarg1_, int jarg2, double jarg3);
  public final static native boolean IImpedanceControlRaw_getImpedanceOffsetRaw(long jarg1, IImpedanceControlRaw jarg1_, int jarg2, long jarg3);
  public final static native boolean IImpedanceControlRaw_getCurrentImpedanceLimitRaw(long jarg1, IImpedanceControlRaw jarg1_, int jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native void delete_IImpedanceControl(long jarg1);
  public final static native boolean IImpedanceControl_getAxes(long jarg1, IImpedanceControl jarg1_, long jarg2);
  public final static native boolean IImpedanceControl_getImpedance(long jarg1, IImpedanceControl jarg1_, int jarg2, long jarg3, long jarg4);
  public final static native boolean IImpedanceControl_setImpedance(long jarg1, IImpedanceControl jarg1_, int jarg2, double jarg3, double jarg4);
  public final static native boolean IImpedanceControl_setImpedanceOffset(long jarg1, IImpedanceControl jarg1_, int jarg2, double jarg3);
  public final static native boolean IImpedanceControl_getImpedanceOffset(long jarg1, IImpedanceControl jarg1_, int jarg2, long jarg3);
  public final static native boolean IImpedanceControl_getCurrentImpedanceLimit(long jarg1, IImpedanceControl jarg1_, int jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native void delete_IVelocityControlRaw(long jarg1);
  public final static native boolean IVelocityControlRaw_getAxes(long jarg1, IVelocityControlRaw jarg1_, long jarg2);
  public final static native boolean IVelocityControlRaw_setVelocityModeRaw(long jarg1, IVelocityControlRaw jarg1_);
  public final static native boolean IVelocityControlRaw_velocityMoveRaw__SWIG_0(long jarg1, IVelocityControlRaw jarg1_, int jarg2, double jarg3);
  public final static native boolean IVelocityControlRaw_velocityMoveRaw__SWIG_1(long jarg1, IVelocityControlRaw jarg1_, long jarg2);
  public final static native boolean IVelocityControlRaw_setRefAccelerationRaw(long jarg1, IVelocityControlRaw jarg1_, int jarg2, double jarg3);
  public final static native boolean IVelocityControlRaw_setRefAccelerationsRaw(long jarg1, IVelocityControlRaw jarg1_, long jarg2);
  public final static native boolean IVelocityControlRaw_getRefAccelerationRaw(long jarg1, IVelocityControlRaw jarg1_, int jarg2, long jarg3);
  public final static native boolean IVelocityControlRaw_getRefAccelerationsRaw(long jarg1, IVelocityControlRaw jarg1_, long jarg2);
  public final static native boolean IVelocityControlRaw_stopRaw__SWIG_0(long jarg1, IVelocityControlRaw jarg1_, int jarg2);
  public final static native boolean IVelocityControlRaw_stopRaw__SWIG_1(long jarg1, IVelocityControlRaw jarg1_);
  public final static native void delete_IVelocityControl(long jarg1);
  public final static native boolean IVelocityControl_getAxes__SWIG_0(long jarg1, IVelocityControl jarg1_, long jarg2);
  public final static native boolean IVelocityControl_setVelocityMode(long jarg1, IVelocityControl jarg1_);
  public final static native boolean IVelocityControl_velocityMove__SWIG_0(long jarg1, IVelocityControl jarg1_, int jarg2, double jarg3);
  public final static native boolean IVelocityControl_velocityMove__SWIG_1(long jarg1, IVelocityControl jarg1_, long jarg2);
  public final static native boolean IVelocityControl_setRefAcceleration(long jarg1, IVelocityControl jarg1_, int jarg2, double jarg3);
  public final static native boolean IVelocityControl_setRefAccelerations__SWIG_0(long jarg1, IVelocityControl jarg1_, long jarg2);
  public final static native boolean IVelocityControl_getRefAcceleration__SWIG_0(long jarg1, IVelocityControl jarg1_, int jarg2, long jarg3);
  public final static native boolean IVelocityControl_getRefAccelerations__SWIG_0(long jarg1, IVelocityControl jarg1_, long jarg2);
  public final static native boolean IVelocityControl_stop__SWIG_0(long jarg1, IVelocityControl jarg1_, int jarg2);
  public final static native boolean IVelocityControl_stop__SWIG_1(long jarg1, IVelocityControl jarg1_);
  public final static native int IVelocityControl_getAxes__SWIG_1(long jarg1, IVelocityControl jarg1_);
  public final static native boolean IVelocityControl_velocityMove__SWIG_2(long jarg1, IVelocityControl jarg1_, long jarg2, DVector jarg2_);
  public final static native boolean IVelocityControl_setRefAccelerations__SWIG_1(long jarg1, IVelocityControl jarg1_, long jarg2, DVector jarg2_);
  public final static native boolean IVelocityControl_getRefAcceleration__SWIG_1(long jarg1, IVelocityControl jarg1_, int jarg2, long jarg3, DVector jarg3_);
  public final static native boolean IVelocityControl_getRefAccelerations__SWIG_1(long jarg1, IVelocityControl jarg1_, long jarg2, DVector jarg2_);
  public final static native void delete_IOpenLoopControlRaw(long jarg1);
  public final static native boolean IOpenLoopControlRaw_setRefOutputRaw(long jarg1, IOpenLoopControlRaw jarg1_, int jarg2, double jarg3);
  public final static native boolean IOpenLoopControlRaw_setRefOutputsRaw(long jarg1, IOpenLoopControlRaw jarg1_, long jarg2);
  public final static native boolean IOpenLoopControlRaw_getRefOutputRaw(long jarg1, IOpenLoopControlRaw jarg1_, int jarg2, long jarg3);
  public final static native boolean IOpenLoopControlRaw_getRefOutputsRaw(long jarg1, IOpenLoopControlRaw jarg1_, long jarg2);
  public final static native boolean IOpenLoopControlRaw_getOutputRaw(long jarg1, IOpenLoopControlRaw jarg1_, int jarg2, long jarg3);
  public final static native boolean IOpenLoopControlRaw_getOutputsRaw(long jarg1, IOpenLoopControlRaw jarg1_, long jarg2);
  public final static native boolean IOpenLoopControlRaw_setOpenLoopModeRaw(long jarg1, IOpenLoopControlRaw jarg1_);
  public final static native void delete_IOpenLoopControl(long jarg1);
  public final static native boolean IOpenLoopControl_setRefOutput(long jarg1, IOpenLoopControl jarg1_, int jarg2, double jarg3);
  public final static native boolean IOpenLoopControl_setRefOutputs(long jarg1, IOpenLoopControl jarg1_, long jarg2);
  public final static native boolean IOpenLoopControl_getRefOutput(long jarg1, IOpenLoopControl jarg1_, int jarg2, long jarg3);
  public final static native boolean IOpenLoopControl_getRefOutputs(long jarg1, IOpenLoopControl jarg1_, long jarg2);
  public final static native boolean IOpenLoopControl_getOutput(long jarg1, IOpenLoopControl jarg1_, int jarg2, long jarg3);
  public final static native boolean IOpenLoopControl_getOutputs(long jarg1, IOpenLoopControl jarg1_, long jarg2);
  public final static native boolean IOpenLoopControl_setOpenLoopMode(long jarg1, IOpenLoopControl jarg1_);
  public final static native long new_DVector__SWIG_0();
  public final static native long new_DVector__SWIG_1(long jarg1);
  public final static native long DVector_size(long jarg1, DVector jarg1_);
  public final static native long DVector_capacity(long jarg1, DVector jarg1_);
  public final static native void DVector_reserve(long jarg1, DVector jarg1_, long jarg2);
  public final static native boolean DVector_isEmpty(long jarg1, DVector jarg1_);
  public final static native void DVector_clear(long jarg1, DVector jarg1_);
  public final static native void DVector_add(long jarg1, DVector jarg1_, double jarg2);
  public final static native double DVector_get(long jarg1, DVector jarg1_, int jarg2);
  public final static native void DVector_set(long jarg1, DVector jarg1_, int jarg2, double jarg3);
  public final static native void delete_DVector(long jarg1);
  public final static native long new_BVector__SWIG_0();
  public final static native long new_BVector__SWIG_1(long jarg1);
  public final static native long BVector_size(long jarg1, BVector jarg1_);
  public final static native long BVector_capacity(long jarg1, BVector jarg1_);
  public final static native void BVector_reserve(long jarg1, BVector jarg1_, long jarg2);
  public final static native boolean BVector_isEmpty(long jarg1, BVector jarg1_);
  public final static native void BVector_clear(long jarg1, BVector jarg1_);
  public final static native void BVector_add(long jarg1, BVector jarg1_, boolean jarg2);
  public final static native boolean BVector_get(long jarg1, BVector jarg1_, int jarg2);
  public final static native void BVector_set(long jarg1, BVector jarg1_, int jarg2, boolean jarg3);
  public final static native void delete_BVector(long jarg1);
  public final static native long new_SVector__SWIG_0();
  public final static native long new_SVector__SWIG_1(long jarg1);
  public final static native long SVector_size(long jarg1, SVector jarg1_);
  public final static native long SVector_capacity(long jarg1, SVector jarg1_);
  public final static native void SVector_reserve(long jarg1, SVector jarg1_, long jarg2);
  public final static native boolean SVector_isEmpty(long jarg1, SVector jarg1_);
  public final static native void SVector_clear(long jarg1, SVector jarg1_);
  public final static native void SVector_add(long jarg1, SVector jarg1_, String jarg2);
  public final static native String SVector_get(long jarg1, SVector jarg1_, int jarg2);
  public final static native void SVector_set(long jarg1, SVector jarg1_, int jarg2, String jarg3);
  public final static native void delete_SVector(long jarg1);
  public final static native long new_PidVector__SWIG_0();
  public final static native long new_PidVector__SWIG_1(long jarg1);
  public final static native long PidVector_size(long jarg1, PidVector jarg1_);
  public final static native long PidVector_capacity(long jarg1, PidVector jarg1_);
  public final static native void PidVector_reserve(long jarg1, PidVector jarg1_, long jarg2);
  public final static native boolean PidVector_isEmpty(long jarg1, PidVector jarg1_);
  public final static native void PidVector_clear(long jarg1, PidVector jarg1_);
  public final static native void PidVector_add(long jarg1, PidVector jarg1_, long jarg2, Pid jarg2_);
  public final static native long PidVector_get(long jarg1, PidVector jarg1_, int jarg2);
  public final static native void PidVector_set(long jarg1, PidVector jarg1_, int jarg2, long jarg3, Pid jarg3_);
  public final static native void delete_PidVector(long jarg1);
  public final static native int ImageRgb_getPixelSize(long jarg1, ImageRgb jarg1_);
  public final static native int ImageRgb_getPixelCode(long jarg1, ImageRgb jarg1_);
  public final static native long ImageRgb_pixel(long jarg1, ImageRgb jarg1_, int jarg2, int jarg3);
  public final static native long ImageRgb_access(long jarg1, ImageRgb jarg1_, int jarg2, int jarg3);
  public final static native long ImageRgb_safePixel__SWIG_0(long jarg1, ImageRgb jarg1_, int jarg2, int jarg3);
  public final static native long new_ImageRgb();
  public final static native void delete_ImageRgb(long jarg1);
  public final static native void TypedReaderImageRgb_setStrict__SWIG_0(long jarg1, TypedReaderImageRgb jarg1_, boolean jarg2);
  public final static native void TypedReaderImageRgb_setStrict__SWIG_1(long jarg1, TypedReaderImageRgb jarg1_);
  public final static native long TypedReaderImageRgb_read__SWIG_0(long jarg1, TypedReaderImageRgb jarg1_, boolean jarg2);
  public final static native long TypedReaderImageRgb_read__SWIG_1(long jarg1, TypedReaderImageRgb jarg1_);
  public final static native void TypedReaderImageRgb_interrupt(long jarg1, TypedReaderImageRgb jarg1_);
  public final static native long TypedReaderImageRgb_lastRead(long jarg1, TypedReaderImageRgb jarg1_);
  public final static native boolean TypedReaderImageRgb_isClosed(long jarg1, TypedReaderImageRgb jarg1_);
  public final static native void TypedReaderImageRgb_useCallback(long jarg1, TypedReaderImageRgb jarg1_, long jarg2, TypedReaderCallbackImageRgb jarg2_);
  public final static native void TypedReaderImageRgb_disableCallback(long jarg1, TypedReaderImageRgb jarg1_);
  public final static native int TypedReaderImageRgb_getPendingReads(long jarg1, TypedReaderImageRgb jarg1_);
  public final static native void delete_TypedReaderImageRgb(long jarg1);
  public final static native String TypedReaderImageRgb_getName(long jarg1, TypedReaderImageRgb jarg1_);
  public final static native void TypedReaderImageRgb_setReplier(long jarg1, TypedReaderImageRgb jarg1_, long jarg2, PortReader jarg2_);
  public final static native long TypedReaderImageRgb_acquire(long jarg1, TypedReaderImageRgb jarg1_);
  public final static native void TypedReaderImageRgb_release(long jarg1, TypedReaderImageRgb jarg1_, long jarg2);
  public final static native void TypedReaderImageRgb_setTargetPeriod(long jarg1, TypedReaderImageRgb jarg1_, double jarg2);
  public final static native void delete_TypedReaderCallbackImageRgb(long jarg1);
  public final static native void TypedReaderCallbackImageRgb_onRead__SWIG_0(long jarg1, TypedReaderCallbackImageRgb jarg1_, long jarg2, ImageRgb jarg2_);
  public final static native void TypedReaderCallbackImageRgb_onRead__SWIG_1(long jarg1, TypedReaderCallbackImageRgb jarg1_, long jarg2, ImageRgb jarg2_, long jarg3, TypedReaderImageRgb jarg3_);
  public final static native long new_TypedReaderCallbackImageRgb();
  public final static native long new_BufferedPortImageRgb__SWIG_0();
  public final static native long new_BufferedPortImageRgb__SWIG_1(long jarg1, Port jarg1_);
  public final static native void delete_BufferedPortImageRgb(long jarg1);
  public final static native boolean BufferedPortImageRgb_addOutput__SWIG_0(long jarg1, BufferedPortImageRgb jarg1_, String jarg2);
  public final static native boolean BufferedPortImageRgb_addOutput__SWIG_1(long jarg1, BufferedPortImageRgb jarg1_, String jarg2, String jarg3);
  public final static native boolean BufferedPortImageRgb_addOutput__SWIG_2(long jarg1, BufferedPortImageRgb jarg1_, long jarg2, Contact jarg2_);
  public final static native void BufferedPortImageRgb_close(long jarg1, BufferedPortImageRgb jarg1_);
  public final static native void BufferedPortImageRgb_interrupt(long jarg1, BufferedPortImageRgb jarg1_);
  public final static native void BufferedPortImageRgb_resume(long jarg1, BufferedPortImageRgb jarg1_);
  public final static native int BufferedPortImageRgb_getPendingReads(long jarg1, BufferedPortImageRgb jarg1_);
  public final static native long BufferedPortImageRgb_where(long jarg1, BufferedPortImageRgb jarg1_);
  public final static native String BufferedPortImageRgb_getName(long jarg1, BufferedPortImageRgb jarg1_);
  public final static native long BufferedPortImageRgb_prepare(long jarg1, BufferedPortImageRgb jarg1_);
  public final static native boolean BufferedPortImageRgb_unprepare(long jarg1, BufferedPortImageRgb jarg1_);
  public final static native void BufferedPortImageRgb_write__SWIG_0(long jarg1, BufferedPortImageRgb jarg1_, boolean jarg2);
  public final static native void BufferedPortImageRgb_write__SWIG_1(long jarg1, BufferedPortImageRgb jarg1_);
  public final static native void BufferedPortImageRgb_writeStrict(long jarg1, BufferedPortImageRgb jarg1_);
  public final static native void BufferedPortImageRgb_waitForWrite(long jarg1, BufferedPortImageRgb jarg1_);
  public final static native void BufferedPortImageRgb_setStrict__SWIG_0(long jarg1, BufferedPortImageRgb jarg1_, boolean jarg2);
  public final static native void BufferedPortImageRgb_setStrict__SWIG_1(long jarg1, BufferedPortImageRgb jarg1_);
  public final static native long BufferedPortImageRgb_read__SWIG_0(long jarg1, BufferedPortImageRgb jarg1_, boolean jarg2);
  public final static native long BufferedPortImageRgb_read__SWIG_1(long jarg1, BufferedPortImageRgb jarg1_);
  public final static native long BufferedPortImageRgb_lastRead(long jarg1, BufferedPortImageRgb jarg1_);
  public final static native boolean BufferedPortImageRgb_isClosed(long jarg1, BufferedPortImageRgb jarg1_);
  public final static native void BufferedPortImageRgb_setReplier(long jarg1, BufferedPortImageRgb jarg1_, long jarg2, PortReader jarg2_);
  public final static native void BufferedPortImageRgb_setReader(long jarg1, BufferedPortImageRgb jarg1_, long jarg2, PortReader jarg2_);
  public final static native void BufferedPortImageRgb_setAdminReader(long jarg1, BufferedPortImageRgb jarg1_, long jarg2, PortReader jarg2_);
  public final static native void BufferedPortImageRgb_onRead(long jarg1, BufferedPortImageRgb jarg1_, long jarg2, ImageRgb jarg2_);
  public final static native void BufferedPortImageRgb_useCallback__SWIG_0(long jarg1, BufferedPortImageRgb jarg1_, long jarg2, TypedReaderCallbackImageRgb jarg2_);
  public final static native void BufferedPortImageRgb_useCallback__SWIG_1(long jarg1, BufferedPortImageRgb jarg1_);
  public final static native void BufferedPortImageRgb_disableCallback(long jarg1, BufferedPortImageRgb jarg1_);
  public final static native boolean BufferedPortImageRgb_setEnvelope(long jarg1, BufferedPortImageRgb jarg1_, long jarg2, PortWriter jarg2_);
  public final static native boolean BufferedPortImageRgb_getEnvelope(long jarg1, BufferedPortImageRgb jarg1_, long jarg2, PortReader jarg2_);
  public final static native int BufferedPortImageRgb_getInputCount(long jarg1, BufferedPortImageRgb jarg1_);
  public final static native int BufferedPortImageRgb_getOutputCount(long jarg1, BufferedPortImageRgb jarg1_);
  public final static native boolean BufferedPortImageRgb_isWriting(long jarg1, BufferedPortImageRgb jarg1_);
  public final static native void BufferedPortImageRgb_getReport(long jarg1, BufferedPortImageRgb jarg1_, long jarg2, PortReport jarg2_);
  public final static native void BufferedPortImageRgb_setReporter(long jarg1, BufferedPortImageRgb jarg1_, long jarg2, PortReport jarg2_);
  public final static native long BufferedPortImageRgb_acquire(long jarg1, BufferedPortImageRgb jarg1_);
  public final static native void BufferedPortImageRgb_release(long jarg1, BufferedPortImageRgb jarg1_, long jarg2);
  public final static native void BufferedPortImageRgb_setTargetPeriod(long jarg1, BufferedPortImageRgb jarg1_, double jarg2);
  public final static native long BufferedPortImageRgb_getType(long jarg1, BufferedPortImageRgb jarg1_);
  public final static native void BufferedPortImageRgb_promiseType(long jarg1, BufferedPortImageRgb jarg1_, long jarg2);
  public final static native void BufferedPortImageRgb_setInputMode(long jarg1, BufferedPortImageRgb jarg1_, boolean jarg2);
  public final static native void BufferedPortImageRgb_setOutputMode(long jarg1, BufferedPortImageRgb jarg1_, boolean jarg2);
  public final static native void BufferedPortImageRgb_setRpcMode(long jarg1, BufferedPortImageRgb jarg1_, boolean jarg2);
  public final static native long BufferedPortImageRgb_acquireProperties(long jarg1, BufferedPortImageRgb jarg1_, boolean jarg2);
  public final static native void BufferedPortImageRgb_releaseProperties(long jarg1, BufferedPortImageRgb jarg1_, long jarg2, Property jarg2_);
  public final static native void BufferedPortImageRgb_includeNodeInName(long jarg1, BufferedPortImageRgb jarg1_, boolean jarg2);
  public final static native boolean BufferedPortImageRgb_setCallbackLock(long jarg1, BufferedPortImageRgb jarg1_, long jarg2);
  public final static native boolean BufferedPortImageRgb_removeCallbackLock(long jarg1, BufferedPortImageRgb jarg1_);
  public final static native boolean BufferedPortImageRgb_lockCallback(long jarg1, BufferedPortImageRgb jarg1_);
  public final static native boolean BufferedPortImageRgb_tryLockCallback(long jarg1, BufferedPortImageRgb jarg1_);
  public final static native void BufferedPortImageRgb_unlockCallback(long jarg1, BufferedPortImageRgb jarg1_);
  public final static native int ImageRgba_getPixelSize(long jarg1, ImageRgba jarg1_);
  public final static native int ImageRgba_getPixelCode(long jarg1, ImageRgba jarg1_);
  public final static native long ImageRgba_pixel(long jarg1, ImageRgba jarg1_, int jarg2, int jarg3);
  public final static native long ImageRgba_access(long jarg1, ImageRgba jarg1_, int jarg2, int jarg3);
  public final static native long ImageRgba_safePixel__SWIG_0(long jarg1, ImageRgba jarg1_, int jarg2, int jarg3);
  public final static native long new_ImageRgba();
  public final static native void delete_ImageRgba(long jarg1);
  public final static native void TypedReaderImageRgba_setStrict__SWIG_0(long jarg1, TypedReaderImageRgba jarg1_, boolean jarg2);
  public final static native void TypedReaderImageRgba_setStrict__SWIG_1(long jarg1, TypedReaderImageRgba jarg1_);
  public final static native long TypedReaderImageRgba_read__SWIG_0(long jarg1, TypedReaderImageRgba jarg1_, boolean jarg2);
  public final static native long TypedReaderImageRgba_read__SWIG_1(long jarg1, TypedReaderImageRgba jarg1_);
  public final static native void TypedReaderImageRgba_interrupt(long jarg1, TypedReaderImageRgba jarg1_);
  public final static native long TypedReaderImageRgba_lastRead(long jarg1, TypedReaderImageRgba jarg1_);
  public final static native boolean TypedReaderImageRgba_isClosed(long jarg1, TypedReaderImageRgba jarg1_);
  public final static native void TypedReaderImageRgba_useCallback(long jarg1, TypedReaderImageRgba jarg1_, long jarg2, TypedReaderCallbackImageRgba jarg2_);
  public final static native void TypedReaderImageRgba_disableCallback(long jarg1, TypedReaderImageRgba jarg1_);
  public final static native int TypedReaderImageRgba_getPendingReads(long jarg1, TypedReaderImageRgba jarg1_);
  public final static native void delete_TypedReaderImageRgba(long jarg1);
  public final static native String TypedReaderImageRgba_getName(long jarg1, TypedReaderImageRgba jarg1_);
  public final static native void TypedReaderImageRgba_setReplier(long jarg1, TypedReaderImageRgba jarg1_, long jarg2, PortReader jarg2_);
  public final static native long TypedReaderImageRgba_acquire(long jarg1, TypedReaderImageRgba jarg1_);
  public final static native void TypedReaderImageRgba_release(long jarg1, TypedReaderImageRgba jarg1_, long jarg2);
  public final static native void TypedReaderImageRgba_setTargetPeriod(long jarg1, TypedReaderImageRgba jarg1_, double jarg2);
  public final static native void delete_TypedReaderCallbackImageRgba(long jarg1);
  public final static native void TypedReaderCallbackImageRgba_onRead__SWIG_0(long jarg1, TypedReaderCallbackImageRgba jarg1_, long jarg2, ImageRgba jarg2_);
  public final static native void TypedReaderCallbackImageRgba_onRead__SWIG_1(long jarg1, TypedReaderCallbackImageRgba jarg1_, long jarg2, ImageRgba jarg2_, long jarg3, TypedReaderImageRgba jarg3_);
  public final static native long new_TypedReaderCallbackImageRgba();
  public final static native long new_BufferedPortImageRgba__SWIG_0();
  public final static native long new_BufferedPortImageRgba__SWIG_1(long jarg1, Port jarg1_);
  public final static native void delete_BufferedPortImageRgba(long jarg1);
  public final static native boolean BufferedPortImageRgba_addOutput__SWIG_0(long jarg1, BufferedPortImageRgba jarg1_, String jarg2);
  public final static native boolean BufferedPortImageRgba_addOutput__SWIG_1(long jarg1, BufferedPortImageRgba jarg1_, String jarg2, String jarg3);
  public final static native boolean BufferedPortImageRgba_addOutput__SWIG_2(long jarg1, BufferedPortImageRgba jarg1_, long jarg2, Contact jarg2_);
  public final static native void BufferedPortImageRgba_close(long jarg1, BufferedPortImageRgba jarg1_);
  public final static native void BufferedPortImageRgba_interrupt(long jarg1, BufferedPortImageRgba jarg1_);
  public final static native void BufferedPortImageRgba_resume(long jarg1, BufferedPortImageRgba jarg1_);
  public final static native int BufferedPortImageRgba_getPendingReads(long jarg1, BufferedPortImageRgba jarg1_);
  public final static native long BufferedPortImageRgba_where(long jarg1, BufferedPortImageRgba jarg1_);
  public final static native String BufferedPortImageRgba_getName(long jarg1, BufferedPortImageRgba jarg1_);
  public final static native long BufferedPortImageRgba_prepare(long jarg1, BufferedPortImageRgba jarg1_);
  public final static native boolean BufferedPortImageRgba_unprepare(long jarg1, BufferedPortImageRgba jarg1_);
  public final static native void BufferedPortImageRgba_write__SWIG_0(long jarg1, BufferedPortImageRgba jarg1_, boolean jarg2);
  public final static native void BufferedPortImageRgba_write__SWIG_1(long jarg1, BufferedPortImageRgba jarg1_);
  public final static native void BufferedPortImageRgba_writeStrict(long jarg1, BufferedPortImageRgba jarg1_);
  public final static native void BufferedPortImageRgba_waitForWrite(long jarg1, BufferedPortImageRgba jarg1_);
  public final static native void BufferedPortImageRgba_setStrict__SWIG_0(long jarg1, BufferedPortImageRgba jarg1_, boolean jarg2);
  public final static native void BufferedPortImageRgba_setStrict__SWIG_1(long jarg1, BufferedPortImageRgba jarg1_);
  public final static native long BufferedPortImageRgba_read__SWIG_0(long jarg1, BufferedPortImageRgba jarg1_, boolean jarg2);
  public final static native long BufferedPortImageRgba_read__SWIG_1(long jarg1, BufferedPortImageRgba jarg1_);
  public final static native long BufferedPortImageRgba_lastRead(long jarg1, BufferedPortImageRgba jarg1_);
  public final static native boolean BufferedPortImageRgba_isClosed(long jarg1, BufferedPortImageRgba jarg1_);
  public final static native void BufferedPortImageRgba_setReplier(long jarg1, BufferedPortImageRgba jarg1_, long jarg2, PortReader jarg2_);
  public final static native void BufferedPortImageRgba_setReader(long jarg1, BufferedPortImageRgba jarg1_, long jarg2, PortReader jarg2_);
  public final static native void BufferedPortImageRgba_setAdminReader(long jarg1, BufferedPortImageRgba jarg1_, long jarg2, PortReader jarg2_);
  public final static native void BufferedPortImageRgba_onRead(long jarg1, BufferedPortImageRgba jarg1_, long jarg2, ImageRgba jarg2_);
  public final static native void BufferedPortImageRgba_useCallback__SWIG_0(long jarg1, BufferedPortImageRgba jarg1_, long jarg2, TypedReaderCallbackImageRgba jarg2_);
  public final static native void BufferedPortImageRgba_useCallback__SWIG_1(long jarg1, BufferedPortImageRgba jarg1_);
  public final static native void BufferedPortImageRgba_disableCallback(long jarg1, BufferedPortImageRgba jarg1_);
  public final static native boolean BufferedPortImageRgba_setEnvelope(long jarg1, BufferedPortImageRgba jarg1_, long jarg2, PortWriter jarg2_);
  public final static native boolean BufferedPortImageRgba_getEnvelope(long jarg1, BufferedPortImageRgba jarg1_, long jarg2, PortReader jarg2_);
  public final static native int BufferedPortImageRgba_getInputCount(long jarg1, BufferedPortImageRgba jarg1_);
  public final static native int BufferedPortImageRgba_getOutputCount(long jarg1, BufferedPortImageRgba jarg1_);
  public final static native boolean BufferedPortImageRgba_isWriting(long jarg1, BufferedPortImageRgba jarg1_);
  public final static native void BufferedPortImageRgba_getReport(long jarg1, BufferedPortImageRgba jarg1_, long jarg2, PortReport jarg2_);
  public final static native void BufferedPortImageRgba_setReporter(long jarg1, BufferedPortImageRgba jarg1_, long jarg2, PortReport jarg2_);
  public final static native long BufferedPortImageRgba_acquire(long jarg1, BufferedPortImageRgba jarg1_);
  public final static native void BufferedPortImageRgba_release(long jarg1, BufferedPortImageRgba jarg1_, long jarg2);
  public final static native void BufferedPortImageRgba_setTargetPeriod(long jarg1, BufferedPortImageRgba jarg1_, double jarg2);
  public final static native long BufferedPortImageRgba_getType(long jarg1, BufferedPortImageRgba jarg1_);
  public final static native void BufferedPortImageRgba_promiseType(long jarg1, BufferedPortImageRgba jarg1_, long jarg2);
  public final static native void BufferedPortImageRgba_setInputMode(long jarg1, BufferedPortImageRgba jarg1_, boolean jarg2);
  public final static native void BufferedPortImageRgba_setOutputMode(long jarg1, BufferedPortImageRgba jarg1_, boolean jarg2);
  public final static native void BufferedPortImageRgba_setRpcMode(long jarg1, BufferedPortImageRgba jarg1_, boolean jarg2);
  public final static native long BufferedPortImageRgba_acquireProperties(long jarg1, BufferedPortImageRgba jarg1_, boolean jarg2);
  public final static native void BufferedPortImageRgba_releaseProperties(long jarg1, BufferedPortImageRgba jarg1_, long jarg2, Property jarg2_);
  public final static native void BufferedPortImageRgba_includeNodeInName(long jarg1, BufferedPortImageRgba jarg1_, boolean jarg2);
  public final static native boolean BufferedPortImageRgba_setCallbackLock(long jarg1, BufferedPortImageRgba jarg1_, long jarg2);
  public final static native boolean BufferedPortImageRgba_removeCallbackLock(long jarg1, BufferedPortImageRgba jarg1_);
  public final static native boolean BufferedPortImageRgba_lockCallback(long jarg1, BufferedPortImageRgba jarg1_);
  public final static native boolean BufferedPortImageRgba_tryLockCallback(long jarg1, BufferedPortImageRgba jarg1_);
  public final static native void BufferedPortImageRgba_unlockCallback(long jarg1, BufferedPortImageRgba jarg1_);
  public final static native int ImageMono_getPixelSize(long jarg1, ImageMono jarg1_);
  public final static native int ImageMono_getPixelCode(long jarg1, ImageMono jarg1_);
  public final static native long ImageMono_pixel(long jarg1, ImageMono jarg1_, int jarg2, int jarg3);
  public final static native long ImageMono_access(long jarg1, ImageMono jarg1_, int jarg2, int jarg3);
  public final static native long ImageMono_safePixel__SWIG_0(long jarg1, ImageMono jarg1_, int jarg2, int jarg3);
  public final static native long new_ImageMono();
  public final static native void delete_ImageMono(long jarg1);
  public final static native void TypedReaderImageMono_setStrict__SWIG_0(long jarg1, TypedReaderImageMono jarg1_, boolean jarg2);
  public final static native void TypedReaderImageMono_setStrict__SWIG_1(long jarg1, TypedReaderImageMono jarg1_);
  public final static native long TypedReaderImageMono_read__SWIG_0(long jarg1, TypedReaderImageMono jarg1_, boolean jarg2);
  public final static native long TypedReaderImageMono_read__SWIG_1(long jarg1, TypedReaderImageMono jarg1_);
  public final static native void TypedReaderImageMono_interrupt(long jarg1, TypedReaderImageMono jarg1_);
  public final static native long TypedReaderImageMono_lastRead(long jarg1, TypedReaderImageMono jarg1_);
  public final static native boolean TypedReaderImageMono_isClosed(long jarg1, TypedReaderImageMono jarg1_);
  public final static native void TypedReaderImageMono_useCallback(long jarg1, TypedReaderImageMono jarg1_, long jarg2, TypedReaderCallbackImageMono jarg2_);
  public final static native void TypedReaderImageMono_disableCallback(long jarg1, TypedReaderImageMono jarg1_);
  public final static native int TypedReaderImageMono_getPendingReads(long jarg1, TypedReaderImageMono jarg1_);
  public final static native void delete_TypedReaderImageMono(long jarg1);
  public final static native String TypedReaderImageMono_getName(long jarg1, TypedReaderImageMono jarg1_);
  public final static native void TypedReaderImageMono_setReplier(long jarg1, TypedReaderImageMono jarg1_, long jarg2, PortReader jarg2_);
  public final static native long TypedReaderImageMono_acquire(long jarg1, TypedReaderImageMono jarg1_);
  public final static native void TypedReaderImageMono_release(long jarg1, TypedReaderImageMono jarg1_, long jarg2);
  public final static native void TypedReaderImageMono_setTargetPeriod(long jarg1, TypedReaderImageMono jarg1_, double jarg2);
  public final static native void delete_TypedReaderCallbackImageMono(long jarg1);
  public final static native void TypedReaderCallbackImageMono_onRead__SWIG_0(long jarg1, TypedReaderCallbackImageMono jarg1_, long jarg2, ImageMono jarg2_);
  public final static native void TypedReaderCallbackImageMono_onRead__SWIG_1(long jarg1, TypedReaderCallbackImageMono jarg1_, long jarg2, ImageMono jarg2_, long jarg3, TypedReaderImageMono jarg3_);
  public final static native long new_TypedReaderCallbackImageMono();
  public final static native long new_BufferedPortImageMono__SWIG_0();
  public final static native long new_BufferedPortImageMono__SWIG_1(long jarg1, Port jarg1_);
  public final static native void delete_BufferedPortImageMono(long jarg1);
  public final static native boolean BufferedPortImageMono_addOutput__SWIG_0(long jarg1, BufferedPortImageMono jarg1_, String jarg2);
  public final static native boolean BufferedPortImageMono_addOutput__SWIG_1(long jarg1, BufferedPortImageMono jarg1_, String jarg2, String jarg3);
  public final static native boolean BufferedPortImageMono_addOutput__SWIG_2(long jarg1, BufferedPortImageMono jarg1_, long jarg2, Contact jarg2_);
  public final static native void BufferedPortImageMono_close(long jarg1, BufferedPortImageMono jarg1_);
  public final static native void BufferedPortImageMono_interrupt(long jarg1, BufferedPortImageMono jarg1_);
  public final static native void BufferedPortImageMono_resume(long jarg1, BufferedPortImageMono jarg1_);
  public final static native int BufferedPortImageMono_getPendingReads(long jarg1, BufferedPortImageMono jarg1_);
  public final static native long BufferedPortImageMono_where(long jarg1, BufferedPortImageMono jarg1_);
  public final static native String BufferedPortImageMono_getName(long jarg1, BufferedPortImageMono jarg1_);
  public final static native long BufferedPortImageMono_prepare(long jarg1, BufferedPortImageMono jarg1_);
  public final static native boolean BufferedPortImageMono_unprepare(long jarg1, BufferedPortImageMono jarg1_);
  public final static native void BufferedPortImageMono_write__SWIG_0(long jarg1, BufferedPortImageMono jarg1_, boolean jarg2);
  public final static native void BufferedPortImageMono_write__SWIG_1(long jarg1, BufferedPortImageMono jarg1_);
  public final static native void BufferedPortImageMono_writeStrict(long jarg1, BufferedPortImageMono jarg1_);
  public final static native void BufferedPortImageMono_waitForWrite(long jarg1, BufferedPortImageMono jarg1_);
  public final static native void BufferedPortImageMono_setStrict__SWIG_0(long jarg1, BufferedPortImageMono jarg1_, boolean jarg2);
  public final static native void BufferedPortImageMono_setStrict__SWIG_1(long jarg1, BufferedPortImageMono jarg1_);
  public final static native long BufferedPortImageMono_read__SWIG_0(long jarg1, BufferedPortImageMono jarg1_, boolean jarg2);
  public final static native long BufferedPortImageMono_read__SWIG_1(long jarg1, BufferedPortImageMono jarg1_);
  public final static native long BufferedPortImageMono_lastRead(long jarg1, BufferedPortImageMono jarg1_);
  public final static native boolean BufferedPortImageMono_isClosed(long jarg1, BufferedPortImageMono jarg1_);
  public final static native void BufferedPortImageMono_setReplier(long jarg1, BufferedPortImageMono jarg1_, long jarg2, PortReader jarg2_);
  public final static native void BufferedPortImageMono_setReader(long jarg1, BufferedPortImageMono jarg1_, long jarg2, PortReader jarg2_);
  public final static native void BufferedPortImageMono_setAdminReader(long jarg1, BufferedPortImageMono jarg1_, long jarg2, PortReader jarg2_);
  public final static native void BufferedPortImageMono_onRead(long jarg1, BufferedPortImageMono jarg1_, long jarg2, ImageMono jarg2_);
  public final static native void BufferedPortImageMono_useCallback__SWIG_0(long jarg1, BufferedPortImageMono jarg1_, long jarg2, TypedReaderCallbackImageMono jarg2_);
  public final static native void BufferedPortImageMono_useCallback__SWIG_1(long jarg1, BufferedPortImageMono jarg1_);
  public final static native void BufferedPortImageMono_disableCallback(long jarg1, BufferedPortImageMono jarg1_);
  public final static native boolean BufferedPortImageMono_setEnvelope(long jarg1, BufferedPortImageMono jarg1_, long jarg2, PortWriter jarg2_);
  public final static native boolean BufferedPortImageMono_getEnvelope(long jarg1, BufferedPortImageMono jarg1_, long jarg2, PortReader jarg2_);
  public final static native int BufferedPortImageMono_getInputCount(long jarg1, BufferedPortImageMono jarg1_);
  public final static native int BufferedPortImageMono_getOutputCount(long jarg1, BufferedPortImageMono jarg1_);
  public final static native boolean BufferedPortImageMono_isWriting(long jarg1, BufferedPortImageMono jarg1_);
  public final static native void BufferedPortImageMono_getReport(long jarg1, BufferedPortImageMono jarg1_, long jarg2, PortReport jarg2_);
  public final static native void BufferedPortImageMono_setReporter(long jarg1, BufferedPortImageMono jarg1_, long jarg2, PortReport jarg2_);
  public final static native long BufferedPortImageMono_acquire(long jarg1, BufferedPortImageMono jarg1_);
  public final static native void BufferedPortImageMono_release(long jarg1, BufferedPortImageMono jarg1_, long jarg2);
  public final static native void BufferedPortImageMono_setTargetPeriod(long jarg1, BufferedPortImageMono jarg1_, double jarg2);
  public final static native long BufferedPortImageMono_getType(long jarg1, BufferedPortImageMono jarg1_);
  public final static native void BufferedPortImageMono_promiseType(long jarg1, BufferedPortImageMono jarg1_, long jarg2);
  public final static native void BufferedPortImageMono_setInputMode(long jarg1, BufferedPortImageMono jarg1_, boolean jarg2);
  public final static native void BufferedPortImageMono_setOutputMode(long jarg1, BufferedPortImageMono jarg1_, boolean jarg2);
  public final static native void BufferedPortImageMono_setRpcMode(long jarg1, BufferedPortImageMono jarg1_, boolean jarg2);
  public final static native long BufferedPortImageMono_acquireProperties(long jarg1, BufferedPortImageMono jarg1_, boolean jarg2);
  public final static native void BufferedPortImageMono_releaseProperties(long jarg1, BufferedPortImageMono jarg1_, long jarg2, Property jarg2_);
  public final static native void BufferedPortImageMono_includeNodeInName(long jarg1, BufferedPortImageMono jarg1_, boolean jarg2);
  public final static native boolean BufferedPortImageMono_setCallbackLock(long jarg1, BufferedPortImageMono jarg1_, long jarg2);
  public final static native boolean BufferedPortImageMono_removeCallbackLock(long jarg1, BufferedPortImageMono jarg1_);
  public final static native boolean BufferedPortImageMono_lockCallback(long jarg1, BufferedPortImageMono jarg1_);
  public final static native boolean BufferedPortImageMono_tryLockCallback(long jarg1, BufferedPortImageMono jarg1_);
  public final static native void BufferedPortImageMono_unlockCallback(long jarg1, BufferedPortImageMono jarg1_);
  public final static native int ImageMono16_getPixelSize(long jarg1, ImageMono16 jarg1_);
  public final static native int ImageMono16_getPixelCode(long jarg1, ImageMono16 jarg1_);
  public final static native long ImageMono16_pixel(long jarg1, ImageMono16 jarg1_, int jarg2, int jarg3);
  public final static native long ImageMono16_access(long jarg1, ImageMono16 jarg1_, int jarg2, int jarg3);
  public final static native long ImageMono16_safePixel__SWIG_0(long jarg1, ImageMono16 jarg1_, int jarg2, int jarg3);
  public final static native long new_ImageMono16();
  public final static native void delete_ImageMono16(long jarg1);
  public final static native void TypedReaderImageMono16_setStrict__SWIG_0(long jarg1, TypedReaderImageMono16 jarg1_, boolean jarg2);
  public final static native void TypedReaderImageMono16_setStrict__SWIG_1(long jarg1, TypedReaderImageMono16 jarg1_);
  public final static native long TypedReaderImageMono16_read__SWIG_0(long jarg1, TypedReaderImageMono16 jarg1_, boolean jarg2);
  public final static native long TypedReaderImageMono16_read__SWIG_1(long jarg1, TypedReaderImageMono16 jarg1_);
  public final static native void TypedReaderImageMono16_interrupt(long jarg1, TypedReaderImageMono16 jarg1_);
  public final static native long TypedReaderImageMono16_lastRead(long jarg1, TypedReaderImageMono16 jarg1_);
  public final static native boolean TypedReaderImageMono16_isClosed(long jarg1, TypedReaderImageMono16 jarg1_);
  public final static native void TypedReaderImageMono16_useCallback(long jarg1, TypedReaderImageMono16 jarg1_, long jarg2, TypedReaderCallbackImageMono16 jarg2_);
  public final static native void TypedReaderImageMono16_disableCallback(long jarg1, TypedReaderImageMono16 jarg1_);
  public final static native int TypedReaderImageMono16_getPendingReads(long jarg1, TypedReaderImageMono16 jarg1_);
  public final static native void delete_TypedReaderImageMono16(long jarg1);
  public final static native String TypedReaderImageMono16_getName(long jarg1, TypedReaderImageMono16 jarg1_);
  public final static native void TypedReaderImageMono16_setReplier(long jarg1, TypedReaderImageMono16 jarg1_, long jarg2, PortReader jarg2_);
  public final static native long TypedReaderImageMono16_acquire(long jarg1, TypedReaderImageMono16 jarg1_);
  public final static native void TypedReaderImageMono16_release(long jarg1, TypedReaderImageMono16 jarg1_, long jarg2);
  public final static native void TypedReaderImageMono16_setTargetPeriod(long jarg1, TypedReaderImageMono16 jarg1_, double jarg2);
  public final static native void delete_TypedReaderCallbackImageMono16(long jarg1);
  public final static native void TypedReaderCallbackImageMono16_onRead__SWIG_0(long jarg1, TypedReaderCallbackImageMono16 jarg1_, long jarg2, ImageMono16 jarg2_);
  public final static native void TypedReaderCallbackImageMono16_onRead__SWIG_1(long jarg1, TypedReaderCallbackImageMono16 jarg1_, long jarg2, ImageMono16 jarg2_, long jarg3, TypedReaderImageMono16 jarg3_);
  public final static native long new_TypedReaderCallbackImageMono16();
  public final static native long new_BufferedPortImageMono16__SWIG_0();
  public final static native long new_BufferedPortImageMono16__SWIG_1(long jarg1, Port jarg1_);
  public final static native void delete_BufferedPortImageMono16(long jarg1);
  public final static native boolean BufferedPortImageMono16_addOutput__SWIG_0(long jarg1, BufferedPortImageMono16 jarg1_, String jarg2);
  public final static native boolean BufferedPortImageMono16_addOutput__SWIG_1(long jarg1, BufferedPortImageMono16 jarg1_, String jarg2, String jarg3);
  public final static native boolean BufferedPortImageMono16_addOutput__SWIG_2(long jarg1, BufferedPortImageMono16 jarg1_, long jarg2, Contact jarg2_);
  public final static native void BufferedPortImageMono16_close(long jarg1, BufferedPortImageMono16 jarg1_);
  public final static native void BufferedPortImageMono16_interrupt(long jarg1, BufferedPortImageMono16 jarg1_);
  public final static native void BufferedPortImageMono16_resume(long jarg1, BufferedPortImageMono16 jarg1_);
  public final static native int BufferedPortImageMono16_getPendingReads(long jarg1, BufferedPortImageMono16 jarg1_);
  public final static native long BufferedPortImageMono16_where(long jarg1, BufferedPortImageMono16 jarg1_);
  public final static native String BufferedPortImageMono16_getName(long jarg1, BufferedPortImageMono16 jarg1_);
  public final static native long BufferedPortImageMono16_prepare(long jarg1, BufferedPortImageMono16 jarg1_);
  public final static native boolean BufferedPortImageMono16_unprepare(long jarg1, BufferedPortImageMono16 jarg1_);
  public final static native void BufferedPortImageMono16_write__SWIG_0(long jarg1, BufferedPortImageMono16 jarg1_, boolean jarg2);
  public final static native void BufferedPortImageMono16_write__SWIG_1(long jarg1, BufferedPortImageMono16 jarg1_);
  public final static native void BufferedPortImageMono16_writeStrict(long jarg1, BufferedPortImageMono16 jarg1_);
  public final static native void BufferedPortImageMono16_waitForWrite(long jarg1, BufferedPortImageMono16 jarg1_);
  public final static native void BufferedPortImageMono16_setStrict__SWIG_0(long jarg1, BufferedPortImageMono16 jarg1_, boolean jarg2);
  public final static native void BufferedPortImageMono16_setStrict__SWIG_1(long jarg1, BufferedPortImageMono16 jarg1_);
  public final static native long BufferedPortImageMono16_read__SWIG_0(long jarg1, BufferedPortImageMono16 jarg1_, boolean jarg2);
  public final static native long BufferedPortImageMono16_read__SWIG_1(long jarg1, BufferedPortImageMono16 jarg1_);
  public final static native long BufferedPortImageMono16_lastRead(long jarg1, BufferedPortImageMono16 jarg1_);
  public final static native boolean BufferedPortImageMono16_isClosed(long jarg1, BufferedPortImageMono16 jarg1_);
  public final static native void BufferedPortImageMono16_setReplier(long jarg1, BufferedPortImageMono16 jarg1_, long jarg2, PortReader jarg2_);
  public final static native void BufferedPortImageMono16_setReader(long jarg1, BufferedPortImageMono16 jarg1_, long jarg2, PortReader jarg2_);
  public final static native void BufferedPortImageMono16_setAdminReader(long jarg1, BufferedPortImageMono16 jarg1_, long jarg2, PortReader jarg2_);
  public final static native void BufferedPortImageMono16_onRead(long jarg1, BufferedPortImageMono16 jarg1_, long jarg2, ImageMono16 jarg2_);
  public final static native void BufferedPortImageMono16_useCallback__SWIG_0(long jarg1, BufferedPortImageMono16 jarg1_, long jarg2, TypedReaderCallbackImageMono16 jarg2_);
  public final static native void BufferedPortImageMono16_useCallback__SWIG_1(long jarg1, BufferedPortImageMono16 jarg1_);
  public final static native void BufferedPortImageMono16_disableCallback(long jarg1, BufferedPortImageMono16 jarg1_);
  public final static native boolean BufferedPortImageMono16_setEnvelope(long jarg1, BufferedPortImageMono16 jarg1_, long jarg2, PortWriter jarg2_);
  public final static native boolean BufferedPortImageMono16_getEnvelope(long jarg1, BufferedPortImageMono16 jarg1_, long jarg2, PortReader jarg2_);
  public final static native int BufferedPortImageMono16_getInputCount(long jarg1, BufferedPortImageMono16 jarg1_);
  public final static native int BufferedPortImageMono16_getOutputCount(long jarg1, BufferedPortImageMono16 jarg1_);
  public final static native boolean BufferedPortImageMono16_isWriting(long jarg1, BufferedPortImageMono16 jarg1_);
  public final static native void BufferedPortImageMono16_getReport(long jarg1, BufferedPortImageMono16 jarg1_, long jarg2, PortReport jarg2_);
  public final static native void BufferedPortImageMono16_setReporter(long jarg1, BufferedPortImageMono16 jarg1_, long jarg2, PortReport jarg2_);
  public final static native long BufferedPortImageMono16_acquire(long jarg1, BufferedPortImageMono16 jarg1_);
  public final static native void BufferedPortImageMono16_release(long jarg1, BufferedPortImageMono16 jarg1_, long jarg2);
  public final static native void BufferedPortImageMono16_setTargetPeriod(long jarg1, BufferedPortImageMono16 jarg1_, double jarg2);
  public final static native long BufferedPortImageMono16_getType(long jarg1, BufferedPortImageMono16 jarg1_);
  public final static native void BufferedPortImageMono16_promiseType(long jarg1, BufferedPortImageMono16 jarg1_, long jarg2);
  public final static native void BufferedPortImageMono16_setInputMode(long jarg1, BufferedPortImageMono16 jarg1_, boolean jarg2);
  public final static native void BufferedPortImageMono16_setOutputMode(long jarg1, BufferedPortImageMono16 jarg1_, boolean jarg2);
  public final static native void BufferedPortImageMono16_setRpcMode(long jarg1, BufferedPortImageMono16 jarg1_, boolean jarg2);
  public final static native long BufferedPortImageMono16_acquireProperties(long jarg1, BufferedPortImageMono16 jarg1_, boolean jarg2);
  public final static native void BufferedPortImageMono16_releaseProperties(long jarg1, BufferedPortImageMono16 jarg1_, long jarg2, Property jarg2_);
  public final static native void BufferedPortImageMono16_includeNodeInName(long jarg1, BufferedPortImageMono16 jarg1_, boolean jarg2);
  public final static native boolean BufferedPortImageMono16_setCallbackLock(long jarg1, BufferedPortImageMono16 jarg1_, long jarg2);
  public final static native boolean BufferedPortImageMono16_removeCallbackLock(long jarg1, BufferedPortImageMono16 jarg1_);
  public final static native boolean BufferedPortImageMono16_lockCallback(long jarg1, BufferedPortImageMono16 jarg1_);
  public final static native boolean BufferedPortImageMono16_tryLockCallback(long jarg1, BufferedPortImageMono16 jarg1_);
  public final static native void BufferedPortImageMono16_unlockCallback(long jarg1, BufferedPortImageMono16 jarg1_);
  public final static native int ImageInt_getPixelSize(long jarg1, ImageInt jarg1_);
  public final static native int ImageInt_getPixelCode(long jarg1, ImageInt jarg1_);
  public final static native long ImageInt_pixel(long jarg1, ImageInt jarg1_, int jarg2, int jarg3);
  public final static native long ImageInt_access(long jarg1, ImageInt jarg1_, int jarg2, int jarg3);
  public final static native long ImageInt_safePixel__SWIG_0(long jarg1, ImageInt jarg1_, int jarg2, int jarg3);
  public final static native int ImageInt_getPixel(long jarg1, ImageInt jarg1_, int jarg2, int jarg3);
  public final static native void ImageInt_setPixel(long jarg1, ImageInt jarg1_, int jarg2, int jarg3, int jarg4);
  public final static native long new_ImageInt();
  public final static native void delete_ImageInt(long jarg1);
  public final static native void TypedReaderImageInt_setStrict__SWIG_0(long jarg1, TypedReaderImageInt jarg1_, boolean jarg2);
  public final static native void TypedReaderImageInt_setStrict__SWIG_1(long jarg1, TypedReaderImageInt jarg1_);
  public final static native long TypedReaderImageInt_read__SWIG_0(long jarg1, TypedReaderImageInt jarg1_, boolean jarg2);
  public final static native long TypedReaderImageInt_read__SWIG_1(long jarg1, TypedReaderImageInt jarg1_);
  public final static native void TypedReaderImageInt_interrupt(long jarg1, TypedReaderImageInt jarg1_);
  public final static native long TypedReaderImageInt_lastRead(long jarg1, TypedReaderImageInt jarg1_);
  public final static native boolean TypedReaderImageInt_isClosed(long jarg1, TypedReaderImageInt jarg1_);
  public final static native void TypedReaderImageInt_useCallback(long jarg1, TypedReaderImageInt jarg1_, long jarg2, TypedReaderCallbackImageInt jarg2_);
  public final static native void TypedReaderImageInt_disableCallback(long jarg1, TypedReaderImageInt jarg1_);
  public final static native int TypedReaderImageInt_getPendingReads(long jarg1, TypedReaderImageInt jarg1_);
  public final static native void delete_TypedReaderImageInt(long jarg1);
  public final static native String TypedReaderImageInt_getName(long jarg1, TypedReaderImageInt jarg1_);
  public final static native void TypedReaderImageInt_setReplier(long jarg1, TypedReaderImageInt jarg1_, long jarg2, PortReader jarg2_);
  public final static native long TypedReaderImageInt_acquire(long jarg1, TypedReaderImageInt jarg1_);
  public final static native void TypedReaderImageInt_release(long jarg1, TypedReaderImageInt jarg1_, long jarg2);
  public final static native void TypedReaderImageInt_setTargetPeriod(long jarg1, TypedReaderImageInt jarg1_, double jarg2);
  public final static native void delete_TypedReaderCallbackImageInt(long jarg1);
  public final static native void TypedReaderCallbackImageInt_onRead__SWIG_0(long jarg1, TypedReaderCallbackImageInt jarg1_, long jarg2, ImageInt jarg2_);
  public final static native void TypedReaderCallbackImageInt_onRead__SWIG_1(long jarg1, TypedReaderCallbackImageInt jarg1_, long jarg2, ImageInt jarg2_, long jarg3, TypedReaderImageInt jarg3_);
  public final static native long new_TypedReaderCallbackImageInt();
  public final static native long new_BufferedPortImageInt__SWIG_0();
  public final static native long new_BufferedPortImageInt__SWIG_1(long jarg1, Port jarg1_);
  public final static native void delete_BufferedPortImageInt(long jarg1);
  public final static native boolean BufferedPortImageInt_addOutput__SWIG_0(long jarg1, BufferedPortImageInt jarg1_, String jarg2);
  public final static native boolean BufferedPortImageInt_addOutput__SWIG_1(long jarg1, BufferedPortImageInt jarg1_, String jarg2, String jarg3);
  public final static native boolean BufferedPortImageInt_addOutput__SWIG_2(long jarg1, BufferedPortImageInt jarg1_, long jarg2, Contact jarg2_);
  public final static native void BufferedPortImageInt_close(long jarg1, BufferedPortImageInt jarg1_);
  public final static native void BufferedPortImageInt_interrupt(long jarg1, BufferedPortImageInt jarg1_);
  public final static native void BufferedPortImageInt_resume(long jarg1, BufferedPortImageInt jarg1_);
  public final static native int BufferedPortImageInt_getPendingReads(long jarg1, BufferedPortImageInt jarg1_);
  public final static native long BufferedPortImageInt_where(long jarg1, BufferedPortImageInt jarg1_);
  public final static native String BufferedPortImageInt_getName(long jarg1, BufferedPortImageInt jarg1_);
  public final static native long BufferedPortImageInt_prepare(long jarg1, BufferedPortImageInt jarg1_);
  public final static native boolean BufferedPortImageInt_unprepare(long jarg1, BufferedPortImageInt jarg1_);
  public final static native void BufferedPortImageInt_write__SWIG_0(long jarg1, BufferedPortImageInt jarg1_, boolean jarg2);
  public final static native void BufferedPortImageInt_write__SWIG_1(long jarg1, BufferedPortImageInt jarg1_);
  public final static native void BufferedPortImageInt_writeStrict(long jarg1, BufferedPortImageInt jarg1_);
  public final static native void BufferedPortImageInt_waitForWrite(long jarg1, BufferedPortImageInt jarg1_);
  public final static native void BufferedPortImageInt_setStrict__SWIG_0(long jarg1, BufferedPortImageInt jarg1_, boolean jarg2);
  public final static native void BufferedPortImageInt_setStrict__SWIG_1(long jarg1, BufferedPortImageInt jarg1_);
  public final static native long BufferedPortImageInt_read__SWIG_0(long jarg1, BufferedPortImageInt jarg1_, boolean jarg2);
  public final static native long BufferedPortImageInt_read__SWIG_1(long jarg1, BufferedPortImageInt jarg1_);
  public final static native long BufferedPortImageInt_lastRead(long jarg1, BufferedPortImageInt jarg1_);
  public final static native boolean BufferedPortImageInt_isClosed(long jarg1, BufferedPortImageInt jarg1_);
  public final static native void BufferedPortImageInt_setReplier(long jarg1, BufferedPortImageInt jarg1_, long jarg2, PortReader jarg2_);
  public final static native void BufferedPortImageInt_setReader(long jarg1, BufferedPortImageInt jarg1_, long jarg2, PortReader jarg2_);
  public final static native void BufferedPortImageInt_setAdminReader(long jarg1, BufferedPortImageInt jarg1_, long jarg2, PortReader jarg2_);
  public final static native void BufferedPortImageInt_onRead(long jarg1, BufferedPortImageInt jarg1_, long jarg2, ImageInt jarg2_);
  public final static native void BufferedPortImageInt_useCallback__SWIG_0(long jarg1, BufferedPortImageInt jarg1_, long jarg2, TypedReaderCallbackImageInt jarg2_);
  public final static native void BufferedPortImageInt_useCallback__SWIG_1(long jarg1, BufferedPortImageInt jarg1_);
  public final static native void BufferedPortImageInt_disableCallback(long jarg1, BufferedPortImageInt jarg1_);
  public final static native boolean BufferedPortImageInt_setEnvelope(long jarg1, BufferedPortImageInt jarg1_, long jarg2, PortWriter jarg2_);
  public final static native boolean BufferedPortImageInt_getEnvelope(long jarg1, BufferedPortImageInt jarg1_, long jarg2, PortReader jarg2_);
  public final static native int BufferedPortImageInt_getInputCount(long jarg1, BufferedPortImageInt jarg1_);
  public final static native int BufferedPortImageInt_getOutputCount(long jarg1, BufferedPortImageInt jarg1_);
  public final static native boolean BufferedPortImageInt_isWriting(long jarg1, BufferedPortImageInt jarg1_);
  public final static native void BufferedPortImageInt_getReport(long jarg1, BufferedPortImageInt jarg1_, long jarg2, PortReport jarg2_);
  public final static native void BufferedPortImageInt_setReporter(long jarg1, BufferedPortImageInt jarg1_, long jarg2, PortReport jarg2_);
  public final static native long BufferedPortImageInt_acquire(long jarg1, BufferedPortImageInt jarg1_);
  public final static native void BufferedPortImageInt_release(long jarg1, BufferedPortImageInt jarg1_, long jarg2);
  public final static native void BufferedPortImageInt_setTargetPeriod(long jarg1, BufferedPortImageInt jarg1_, double jarg2);
  public final static native long BufferedPortImageInt_getType(long jarg1, BufferedPortImageInt jarg1_);
  public final static native void BufferedPortImageInt_promiseType(long jarg1, BufferedPortImageInt jarg1_, long jarg2);
  public final static native void BufferedPortImageInt_setInputMode(long jarg1, BufferedPortImageInt jarg1_, boolean jarg2);
  public final static native void BufferedPortImageInt_setOutputMode(long jarg1, BufferedPortImageInt jarg1_, boolean jarg2);
  public final static native void BufferedPortImageInt_setRpcMode(long jarg1, BufferedPortImageInt jarg1_, boolean jarg2);
  public final static native long BufferedPortImageInt_acquireProperties(long jarg1, BufferedPortImageInt jarg1_, boolean jarg2);
  public final static native void BufferedPortImageInt_releaseProperties(long jarg1, BufferedPortImageInt jarg1_, long jarg2, Property jarg2_);
  public final static native void BufferedPortImageInt_includeNodeInName(long jarg1, BufferedPortImageInt jarg1_, boolean jarg2);
  public final static native boolean BufferedPortImageInt_setCallbackLock(long jarg1, BufferedPortImageInt jarg1_, long jarg2);
  public final static native boolean BufferedPortImageInt_removeCallbackLock(long jarg1, BufferedPortImageInt jarg1_);
  public final static native boolean BufferedPortImageInt_lockCallback(long jarg1, BufferedPortImageInt jarg1_);
  public final static native boolean BufferedPortImageInt_tryLockCallback(long jarg1, BufferedPortImageInt jarg1_);
  public final static native void BufferedPortImageInt_unlockCallback(long jarg1, BufferedPortImageInt jarg1_);
  public final static native void TypedReaderSound_setStrict__SWIG_0(long jarg1, TypedReaderSound jarg1_, boolean jarg2);
  public final static native void TypedReaderSound_setStrict__SWIG_1(long jarg1, TypedReaderSound jarg1_);
  public final static native long TypedReaderSound_read__SWIG_0(long jarg1, TypedReaderSound jarg1_, boolean jarg2);
  public final static native long TypedReaderSound_read__SWIG_1(long jarg1, TypedReaderSound jarg1_);
  public final static native void TypedReaderSound_interrupt(long jarg1, TypedReaderSound jarg1_);
  public final static native long TypedReaderSound_lastRead(long jarg1, TypedReaderSound jarg1_);
  public final static native boolean TypedReaderSound_isClosed(long jarg1, TypedReaderSound jarg1_);
  public final static native void TypedReaderSound_useCallback(long jarg1, TypedReaderSound jarg1_, long jarg2);
  public final static native void TypedReaderSound_disableCallback(long jarg1, TypedReaderSound jarg1_);
  public final static native int TypedReaderSound_getPendingReads(long jarg1, TypedReaderSound jarg1_);
  public final static native void delete_TypedReaderSound(long jarg1);
  public final static native String TypedReaderSound_getName(long jarg1, TypedReaderSound jarg1_);
  public final static native void TypedReaderSound_setReplier(long jarg1, TypedReaderSound jarg1_, long jarg2, PortReader jarg2_);
  public final static native long TypedReaderSound_acquire(long jarg1, TypedReaderSound jarg1_);
  public final static native void TypedReaderSound_release(long jarg1, TypedReaderSound jarg1_, long jarg2);
  public final static native void TypedReaderSound_setTargetPeriod(long jarg1, TypedReaderSound jarg1_, double jarg2);
  public final static native long new_BufferedPortSound__SWIG_0();
  public final static native long new_BufferedPortSound__SWIG_1(long jarg1, Port jarg1_);
  public final static native void delete_BufferedPortSound(long jarg1);
  public final static native boolean BufferedPortSound_addOutput__SWIG_0(long jarg1, BufferedPortSound jarg1_, String jarg2);
  public final static native boolean BufferedPortSound_addOutput__SWIG_1(long jarg1, BufferedPortSound jarg1_, String jarg2, String jarg3);
  public final static native boolean BufferedPortSound_addOutput__SWIG_2(long jarg1, BufferedPortSound jarg1_, long jarg2, Contact jarg2_);
  public final static native void BufferedPortSound_close(long jarg1, BufferedPortSound jarg1_);
  public final static native void BufferedPortSound_interrupt(long jarg1, BufferedPortSound jarg1_);
  public final static native void BufferedPortSound_resume(long jarg1, BufferedPortSound jarg1_);
  public final static native int BufferedPortSound_getPendingReads(long jarg1, BufferedPortSound jarg1_);
  public final static native long BufferedPortSound_where(long jarg1, BufferedPortSound jarg1_);
  public final static native String BufferedPortSound_getName(long jarg1, BufferedPortSound jarg1_);
  public final static native long BufferedPortSound_prepare(long jarg1, BufferedPortSound jarg1_);
  public final static native boolean BufferedPortSound_unprepare(long jarg1, BufferedPortSound jarg1_);
  public final static native void BufferedPortSound_write__SWIG_0(long jarg1, BufferedPortSound jarg1_, boolean jarg2);
  public final static native void BufferedPortSound_write__SWIG_1(long jarg1, BufferedPortSound jarg1_);
  public final static native void BufferedPortSound_writeStrict(long jarg1, BufferedPortSound jarg1_);
  public final static native void BufferedPortSound_waitForWrite(long jarg1, BufferedPortSound jarg1_);
  public final static native void BufferedPortSound_setStrict__SWIG_0(long jarg1, BufferedPortSound jarg1_, boolean jarg2);
  public final static native void BufferedPortSound_setStrict__SWIG_1(long jarg1, BufferedPortSound jarg1_);
  public final static native long BufferedPortSound_read__SWIG_0(long jarg1, BufferedPortSound jarg1_, boolean jarg2);
  public final static native long BufferedPortSound_read__SWIG_1(long jarg1, BufferedPortSound jarg1_);
  public final static native long BufferedPortSound_lastRead(long jarg1, BufferedPortSound jarg1_);
  public final static native boolean BufferedPortSound_isClosed(long jarg1, BufferedPortSound jarg1_);
  public final static native void BufferedPortSound_setReplier(long jarg1, BufferedPortSound jarg1_, long jarg2, PortReader jarg2_);
  public final static native void BufferedPortSound_setReader(long jarg1, BufferedPortSound jarg1_, long jarg2, PortReader jarg2_);
  public final static native void BufferedPortSound_setAdminReader(long jarg1, BufferedPortSound jarg1_, long jarg2, PortReader jarg2_);
  public final static native void BufferedPortSound_onRead(long jarg1, BufferedPortSound jarg1_, long jarg2, Sound jarg2_);
  public final static native void BufferedPortSound_useCallback__SWIG_0(long jarg1, BufferedPortSound jarg1_, long jarg2);
  public final static native void BufferedPortSound_useCallback__SWIG_1(long jarg1, BufferedPortSound jarg1_);
  public final static native void BufferedPortSound_disableCallback(long jarg1, BufferedPortSound jarg1_);
  public final static native boolean BufferedPortSound_setEnvelope(long jarg1, BufferedPortSound jarg1_, long jarg2, PortWriter jarg2_);
  public final static native boolean BufferedPortSound_getEnvelope(long jarg1, BufferedPortSound jarg1_, long jarg2, PortReader jarg2_);
  public final static native int BufferedPortSound_getInputCount(long jarg1, BufferedPortSound jarg1_);
  public final static native int BufferedPortSound_getOutputCount(long jarg1, BufferedPortSound jarg1_);
  public final static native boolean BufferedPortSound_isWriting(long jarg1, BufferedPortSound jarg1_);
  public final static native void BufferedPortSound_getReport(long jarg1, BufferedPortSound jarg1_, long jarg2, PortReport jarg2_);
  public final static native void BufferedPortSound_setReporter(long jarg1, BufferedPortSound jarg1_, long jarg2, PortReport jarg2_);
  public final static native long BufferedPortSound_acquire(long jarg1, BufferedPortSound jarg1_);
  public final static native void BufferedPortSound_release(long jarg1, BufferedPortSound jarg1_, long jarg2);
  public final static native void BufferedPortSound_setTargetPeriod(long jarg1, BufferedPortSound jarg1_, double jarg2);
  public final static native long BufferedPortSound_getType(long jarg1, BufferedPortSound jarg1_);
  public final static native void BufferedPortSound_promiseType(long jarg1, BufferedPortSound jarg1_, long jarg2);
  public final static native void BufferedPortSound_setInputMode(long jarg1, BufferedPortSound jarg1_, boolean jarg2);
  public final static native void BufferedPortSound_setOutputMode(long jarg1, BufferedPortSound jarg1_, boolean jarg2);
  public final static native void BufferedPortSound_setRpcMode(long jarg1, BufferedPortSound jarg1_, boolean jarg2);
  public final static native long BufferedPortSound_acquireProperties(long jarg1, BufferedPortSound jarg1_, boolean jarg2);
  public final static native void BufferedPortSound_releaseProperties(long jarg1, BufferedPortSound jarg1_, long jarg2, Property jarg2_);
  public final static native void BufferedPortSound_includeNodeInName(long jarg1, BufferedPortSound jarg1_, boolean jarg2);
  public final static native boolean BufferedPortSound_setCallbackLock(long jarg1, BufferedPortSound jarg1_, long jarg2);
  public final static native boolean BufferedPortSound_removeCallbackLock(long jarg1, BufferedPortSound jarg1_);
  public final static native boolean BufferedPortSound_lockCallback(long jarg1, BufferedPortSound jarg1_);
  public final static native boolean BufferedPortSound_tryLockCallback(long jarg1, BufferedPortSound jarg1_);
  public final static native void BufferedPortSound_unlockCallback(long jarg1, BufferedPortSound jarg1_);
  public final static native int ImageFloat_getPixelSize(long jarg1, ImageFloat jarg1_);
  public final static native int ImageFloat_getPixelCode(long jarg1, ImageFloat jarg1_);
  public final static native long ImageFloat_pixel(long jarg1, ImageFloat jarg1_, int jarg2, int jarg3);
  public final static native long ImageFloat_access(long jarg1, ImageFloat jarg1_, int jarg2, int jarg3);
  public final static native long ImageFloat_safePixel__SWIG_0(long jarg1, ImageFloat jarg1_, int jarg2, int jarg3);
  public final static native float ImageFloat_getPixel(long jarg1, ImageFloat jarg1_, int jarg2, int jarg3);
  public final static native void ImageFloat_setPixel(long jarg1, ImageFloat jarg1_, int jarg2, int jarg3, float jarg4);
  public final static native long new_ImageFloat();
  public final static native void delete_ImageFloat(long jarg1);
  public final static native void TypedReaderImageFloat_setStrict__SWIG_0(long jarg1, TypedReaderImageFloat jarg1_, boolean jarg2);
  public final static native void TypedReaderImageFloat_setStrict__SWIG_1(long jarg1, TypedReaderImageFloat jarg1_);
  public final static native long TypedReaderImageFloat_read__SWIG_0(long jarg1, TypedReaderImageFloat jarg1_, boolean jarg2);
  public final static native long TypedReaderImageFloat_read__SWIG_1(long jarg1, TypedReaderImageFloat jarg1_);
  public final static native void TypedReaderImageFloat_interrupt(long jarg1, TypedReaderImageFloat jarg1_);
  public final static native long TypedReaderImageFloat_lastRead(long jarg1, TypedReaderImageFloat jarg1_);
  public final static native boolean TypedReaderImageFloat_isClosed(long jarg1, TypedReaderImageFloat jarg1_);
  public final static native void TypedReaderImageFloat_useCallback(long jarg1, TypedReaderImageFloat jarg1_, long jarg2, TypedReaderCallbackImageFloat jarg2_);
  public final static native void TypedReaderImageFloat_disableCallback(long jarg1, TypedReaderImageFloat jarg1_);
  public final static native int TypedReaderImageFloat_getPendingReads(long jarg1, TypedReaderImageFloat jarg1_);
  public final static native void delete_TypedReaderImageFloat(long jarg1);
  public final static native String TypedReaderImageFloat_getName(long jarg1, TypedReaderImageFloat jarg1_);
  public final static native void TypedReaderImageFloat_setReplier(long jarg1, TypedReaderImageFloat jarg1_, long jarg2, PortReader jarg2_);
  public final static native long TypedReaderImageFloat_acquire(long jarg1, TypedReaderImageFloat jarg1_);
  public final static native void TypedReaderImageFloat_release(long jarg1, TypedReaderImageFloat jarg1_, long jarg2);
  public final static native void TypedReaderImageFloat_setTargetPeriod(long jarg1, TypedReaderImageFloat jarg1_, double jarg2);
  public final static native void delete_TypedReaderCallbackImageFloat(long jarg1);
  public final static native void TypedReaderCallbackImageFloat_onRead__SWIG_0(long jarg1, TypedReaderCallbackImageFloat jarg1_, long jarg2, ImageFloat jarg2_);
  public final static native void TypedReaderCallbackImageFloat_onRead__SWIG_1(long jarg1, TypedReaderCallbackImageFloat jarg1_, long jarg2, ImageFloat jarg2_, long jarg3, TypedReaderImageFloat jarg3_);
  public final static native long new_TypedReaderCallbackImageFloat();
  public final static native long new_BufferedPortImageFloat__SWIG_0();
  public final static native long new_BufferedPortImageFloat__SWIG_1(long jarg1, Port jarg1_);
  public final static native void delete_BufferedPortImageFloat(long jarg1);
  public final static native boolean BufferedPortImageFloat_addOutput__SWIG_0(long jarg1, BufferedPortImageFloat jarg1_, String jarg2);
  public final static native boolean BufferedPortImageFloat_addOutput__SWIG_1(long jarg1, BufferedPortImageFloat jarg1_, String jarg2, String jarg3);
  public final static native boolean BufferedPortImageFloat_addOutput__SWIG_2(long jarg1, BufferedPortImageFloat jarg1_, long jarg2, Contact jarg2_);
  public final static native void BufferedPortImageFloat_close(long jarg1, BufferedPortImageFloat jarg1_);
  public final static native void BufferedPortImageFloat_interrupt(long jarg1, BufferedPortImageFloat jarg1_);
  public final static native void BufferedPortImageFloat_resume(long jarg1, BufferedPortImageFloat jarg1_);
  public final static native int BufferedPortImageFloat_getPendingReads(long jarg1, BufferedPortImageFloat jarg1_);
  public final static native long BufferedPortImageFloat_where(long jarg1, BufferedPortImageFloat jarg1_);
  public final static native String BufferedPortImageFloat_getName(long jarg1, BufferedPortImageFloat jarg1_);
  public final static native long BufferedPortImageFloat_prepare(long jarg1, BufferedPortImageFloat jarg1_);
  public final static native boolean BufferedPortImageFloat_unprepare(long jarg1, BufferedPortImageFloat jarg1_);
  public final static native void BufferedPortImageFloat_write__SWIG_0(long jarg1, BufferedPortImageFloat jarg1_, boolean jarg2);
  public final static native void BufferedPortImageFloat_write__SWIG_1(long jarg1, BufferedPortImageFloat jarg1_);
  public final static native void BufferedPortImageFloat_writeStrict(long jarg1, BufferedPortImageFloat jarg1_);
  public final static native void BufferedPortImageFloat_waitForWrite(long jarg1, BufferedPortImageFloat jarg1_);
  public final static native void BufferedPortImageFloat_setStrict__SWIG_0(long jarg1, BufferedPortImageFloat jarg1_, boolean jarg2);
  public final static native void BufferedPortImageFloat_setStrict__SWIG_1(long jarg1, BufferedPortImageFloat jarg1_);
  public final static native long BufferedPortImageFloat_read__SWIG_0(long jarg1, BufferedPortImageFloat jarg1_, boolean jarg2);
  public final static native long BufferedPortImageFloat_read__SWIG_1(long jarg1, BufferedPortImageFloat jarg1_);
  public final static native long BufferedPortImageFloat_lastRead(long jarg1, BufferedPortImageFloat jarg1_);
  public final static native boolean BufferedPortImageFloat_isClosed(long jarg1, BufferedPortImageFloat jarg1_);
  public final static native void BufferedPortImageFloat_setReplier(long jarg1, BufferedPortImageFloat jarg1_, long jarg2, PortReader jarg2_);
  public final static native void BufferedPortImageFloat_setReader(long jarg1, BufferedPortImageFloat jarg1_, long jarg2, PortReader jarg2_);
  public final static native void BufferedPortImageFloat_setAdminReader(long jarg1, BufferedPortImageFloat jarg1_, long jarg2, PortReader jarg2_);
  public final static native void BufferedPortImageFloat_onRead(long jarg1, BufferedPortImageFloat jarg1_, long jarg2, ImageFloat jarg2_);
  public final static native void BufferedPortImageFloat_useCallback__SWIG_0(long jarg1, BufferedPortImageFloat jarg1_, long jarg2, TypedReaderCallbackImageFloat jarg2_);
  public final static native void BufferedPortImageFloat_useCallback__SWIG_1(long jarg1, BufferedPortImageFloat jarg1_);
  public final static native void BufferedPortImageFloat_disableCallback(long jarg1, BufferedPortImageFloat jarg1_);
  public final static native boolean BufferedPortImageFloat_setEnvelope(long jarg1, BufferedPortImageFloat jarg1_, long jarg2, PortWriter jarg2_);
  public final static native boolean BufferedPortImageFloat_getEnvelope(long jarg1, BufferedPortImageFloat jarg1_, long jarg2, PortReader jarg2_);
  public final static native int BufferedPortImageFloat_getInputCount(long jarg1, BufferedPortImageFloat jarg1_);
  public final static native int BufferedPortImageFloat_getOutputCount(long jarg1, BufferedPortImageFloat jarg1_);
  public final static native boolean BufferedPortImageFloat_isWriting(long jarg1, BufferedPortImageFloat jarg1_);
  public final static native void BufferedPortImageFloat_getReport(long jarg1, BufferedPortImageFloat jarg1_, long jarg2, PortReport jarg2_);
  public final static native void BufferedPortImageFloat_setReporter(long jarg1, BufferedPortImageFloat jarg1_, long jarg2, PortReport jarg2_);
  public final static native long BufferedPortImageFloat_acquire(long jarg1, BufferedPortImageFloat jarg1_);
  public final static native void BufferedPortImageFloat_release(long jarg1, BufferedPortImageFloat jarg1_, long jarg2);
  public final static native void BufferedPortImageFloat_setTargetPeriod(long jarg1, BufferedPortImageFloat jarg1_, double jarg2);
  public final static native long BufferedPortImageFloat_getType(long jarg1, BufferedPortImageFloat jarg1_);
  public final static native void BufferedPortImageFloat_promiseType(long jarg1, BufferedPortImageFloat jarg1_, long jarg2);
  public final static native void BufferedPortImageFloat_setInputMode(long jarg1, BufferedPortImageFloat jarg1_, boolean jarg2);
  public final static native void BufferedPortImageFloat_setOutputMode(long jarg1, BufferedPortImageFloat jarg1_, boolean jarg2);
  public final static native void BufferedPortImageFloat_setRpcMode(long jarg1, BufferedPortImageFloat jarg1_, boolean jarg2);
  public final static native long BufferedPortImageFloat_acquireProperties(long jarg1, BufferedPortImageFloat jarg1_, boolean jarg2);
  public final static native void BufferedPortImageFloat_releaseProperties(long jarg1, BufferedPortImageFloat jarg1_, long jarg2, Property jarg2_);
  public final static native void BufferedPortImageFloat_includeNodeInName(long jarg1, BufferedPortImageFloat jarg1_, boolean jarg2);
  public final static native boolean BufferedPortImageFloat_setCallbackLock(long jarg1, BufferedPortImageFloat jarg1_, long jarg2);
  public final static native boolean BufferedPortImageFloat_removeCallbackLock(long jarg1, BufferedPortImageFloat jarg1_);
  public final static native boolean BufferedPortImageFloat_lockCallback(long jarg1, BufferedPortImageFloat jarg1_);
  public final static native boolean BufferedPortImageFloat_tryLockCallback(long jarg1, BufferedPortImageFloat jarg1_);
  public final static native void BufferedPortImageFloat_unlockCallback(long jarg1, BufferedPortImageFloat jarg1_);
  public final static native int ImageRgbFloat_getPixelSize(long jarg1, ImageRgbFloat jarg1_);
  public final static native int ImageRgbFloat_getPixelCode(long jarg1, ImageRgbFloat jarg1_);
  public final static native long ImageRgbFloat_pixel(long jarg1, ImageRgbFloat jarg1_, int jarg2, int jarg3);
  public final static native long ImageRgbFloat_access(long jarg1, ImageRgbFloat jarg1_, int jarg2, int jarg3);
  public final static native long ImageRgbFloat_safePixel__SWIG_0(long jarg1, ImageRgbFloat jarg1_, int jarg2, int jarg3);
  public final static native long new_ImageRgbFloat();
  public final static native void delete_ImageRgbFloat(long jarg1);
  public final static native void TypedReaderImageRgbFloat_setStrict__SWIG_0(long jarg1, TypedReaderImageRgbFloat jarg1_, boolean jarg2);
  public final static native void TypedReaderImageRgbFloat_setStrict__SWIG_1(long jarg1, TypedReaderImageRgbFloat jarg1_);
  public final static native long TypedReaderImageRgbFloat_read__SWIG_0(long jarg1, TypedReaderImageRgbFloat jarg1_, boolean jarg2);
  public final static native long TypedReaderImageRgbFloat_read__SWIG_1(long jarg1, TypedReaderImageRgbFloat jarg1_);
  public final static native void TypedReaderImageRgbFloat_interrupt(long jarg1, TypedReaderImageRgbFloat jarg1_);
  public final static native long TypedReaderImageRgbFloat_lastRead(long jarg1, TypedReaderImageRgbFloat jarg1_);
  public final static native boolean TypedReaderImageRgbFloat_isClosed(long jarg1, TypedReaderImageRgbFloat jarg1_);
  public final static native void TypedReaderImageRgbFloat_useCallback(long jarg1, TypedReaderImageRgbFloat jarg1_, long jarg2, TypedReaderCallbackImageRgbFloat jarg2_);
  public final static native void TypedReaderImageRgbFloat_disableCallback(long jarg1, TypedReaderImageRgbFloat jarg1_);
  public final static native int TypedReaderImageRgbFloat_getPendingReads(long jarg1, TypedReaderImageRgbFloat jarg1_);
  public final static native void delete_TypedReaderImageRgbFloat(long jarg1);
  public final static native String TypedReaderImageRgbFloat_getName(long jarg1, TypedReaderImageRgbFloat jarg1_);
  public final static native void TypedReaderImageRgbFloat_setReplier(long jarg1, TypedReaderImageRgbFloat jarg1_, long jarg2, PortReader jarg2_);
  public final static native long TypedReaderImageRgbFloat_acquire(long jarg1, TypedReaderImageRgbFloat jarg1_);
  public final static native void TypedReaderImageRgbFloat_release(long jarg1, TypedReaderImageRgbFloat jarg1_, long jarg2);
  public final static native void TypedReaderImageRgbFloat_setTargetPeriod(long jarg1, TypedReaderImageRgbFloat jarg1_, double jarg2);
  public final static native void delete_TypedReaderCallbackImageRgbFloat(long jarg1);
  public final static native void TypedReaderCallbackImageRgbFloat_onRead__SWIG_0(long jarg1, TypedReaderCallbackImageRgbFloat jarg1_, long jarg2, ImageRgbFloat jarg2_);
  public final static native void TypedReaderCallbackImageRgbFloat_onRead__SWIG_1(long jarg1, TypedReaderCallbackImageRgbFloat jarg1_, long jarg2, ImageRgbFloat jarg2_, long jarg3, TypedReaderImageRgbFloat jarg3_);
  public final static native long new_TypedReaderCallbackImageRgbFloat();
  public final static native long new_BufferedPortImageRgbFloat__SWIG_0();
  public final static native long new_BufferedPortImageRgbFloat__SWIG_1(long jarg1, Port jarg1_);
  public final static native void delete_BufferedPortImageRgbFloat(long jarg1);
  public final static native boolean BufferedPortImageRgbFloat_addOutput__SWIG_0(long jarg1, BufferedPortImageRgbFloat jarg1_, String jarg2);
  public final static native boolean BufferedPortImageRgbFloat_addOutput__SWIG_1(long jarg1, BufferedPortImageRgbFloat jarg1_, String jarg2, String jarg3);
  public final static native boolean BufferedPortImageRgbFloat_addOutput__SWIG_2(long jarg1, BufferedPortImageRgbFloat jarg1_, long jarg2, Contact jarg2_);
  public final static native void BufferedPortImageRgbFloat_close(long jarg1, BufferedPortImageRgbFloat jarg1_);
  public final static native void BufferedPortImageRgbFloat_interrupt(long jarg1, BufferedPortImageRgbFloat jarg1_);
  public final static native void BufferedPortImageRgbFloat_resume(long jarg1, BufferedPortImageRgbFloat jarg1_);
  public final static native int BufferedPortImageRgbFloat_getPendingReads(long jarg1, BufferedPortImageRgbFloat jarg1_);
  public final static native long BufferedPortImageRgbFloat_where(long jarg1, BufferedPortImageRgbFloat jarg1_);
  public final static native String BufferedPortImageRgbFloat_getName(long jarg1, BufferedPortImageRgbFloat jarg1_);
  public final static native long BufferedPortImageRgbFloat_prepare(long jarg1, BufferedPortImageRgbFloat jarg1_);
  public final static native boolean BufferedPortImageRgbFloat_unprepare(long jarg1, BufferedPortImageRgbFloat jarg1_);
  public final static native void BufferedPortImageRgbFloat_write__SWIG_0(long jarg1, BufferedPortImageRgbFloat jarg1_, boolean jarg2);
  public final static native void BufferedPortImageRgbFloat_write__SWIG_1(long jarg1, BufferedPortImageRgbFloat jarg1_);
  public final static native void BufferedPortImageRgbFloat_writeStrict(long jarg1, BufferedPortImageRgbFloat jarg1_);
  public final static native void BufferedPortImageRgbFloat_waitForWrite(long jarg1, BufferedPortImageRgbFloat jarg1_);
  public final static native void BufferedPortImageRgbFloat_setStrict__SWIG_0(long jarg1, BufferedPortImageRgbFloat jarg1_, boolean jarg2);
  public final static native void BufferedPortImageRgbFloat_setStrict__SWIG_1(long jarg1, BufferedPortImageRgbFloat jarg1_);
  public final static native long BufferedPortImageRgbFloat_read__SWIG_0(long jarg1, BufferedPortImageRgbFloat jarg1_, boolean jarg2);
  public final static native long BufferedPortImageRgbFloat_read__SWIG_1(long jarg1, BufferedPortImageRgbFloat jarg1_);
  public final static native long BufferedPortImageRgbFloat_lastRead(long jarg1, BufferedPortImageRgbFloat jarg1_);
  public final static native boolean BufferedPortImageRgbFloat_isClosed(long jarg1, BufferedPortImageRgbFloat jarg1_);
  public final static native void BufferedPortImageRgbFloat_setReplier(long jarg1, BufferedPortImageRgbFloat jarg1_, long jarg2, PortReader jarg2_);
  public final static native void BufferedPortImageRgbFloat_setReader(long jarg1, BufferedPortImageRgbFloat jarg1_, long jarg2, PortReader jarg2_);
  public final static native void BufferedPortImageRgbFloat_setAdminReader(long jarg1, BufferedPortImageRgbFloat jarg1_, long jarg2, PortReader jarg2_);
  public final static native void BufferedPortImageRgbFloat_onRead(long jarg1, BufferedPortImageRgbFloat jarg1_, long jarg2, ImageRgbFloat jarg2_);
  public final static native void BufferedPortImageRgbFloat_useCallback__SWIG_0(long jarg1, BufferedPortImageRgbFloat jarg1_, long jarg2, TypedReaderCallbackImageRgbFloat jarg2_);
  public final static native void BufferedPortImageRgbFloat_useCallback__SWIG_1(long jarg1, BufferedPortImageRgbFloat jarg1_);
  public final static native void BufferedPortImageRgbFloat_disableCallback(long jarg1, BufferedPortImageRgbFloat jarg1_);
  public final static native boolean BufferedPortImageRgbFloat_setEnvelope(long jarg1, BufferedPortImageRgbFloat jarg1_, long jarg2, PortWriter jarg2_);
  public final static native boolean BufferedPortImageRgbFloat_getEnvelope(long jarg1, BufferedPortImageRgbFloat jarg1_, long jarg2, PortReader jarg2_);
  public final static native int BufferedPortImageRgbFloat_getInputCount(long jarg1, BufferedPortImageRgbFloat jarg1_);
  public final static native int BufferedPortImageRgbFloat_getOutputCount(long jarg1, BufferedPortImageRgbFloat jarg1_);
  public final static native boolean BufferedPortImageRgbFloat_isWriting(long jarg1, BufferedPortImageRgbFloat jarg1_);
  public final static native void BufferedPortImageRgbFloat_getReport(long jarg1, BufferedPortImageRgbFloat jarg1_, long jarg2, PortReport jarg2_);
  public final static native void BufferedPortImageRgbFloat_setReporter(long jarg1, BufferedPortImageRgbFloat jarg1_, long jarg2, PortReport jarg2_);
  public final static native long BufferedPortImageRgbFloat_acquire(long jarg1, BufferedPortImageRgbFloat jarg1_);
  public final static native void BufferedPortImageRgbFloat_release(long jarg1, BufferedPortImageRgbFloat jarg1_, long jarg2);
  public final static native void BufferedPortImageRgbFloat_setTargetPeriod(long jarg1, BufferedPortImageRgbFloat jarg1_, double jarg2);
  public final static native long BufferedPortImageRgbFloat_getType(long jarg1, BufferedPortImageRgbFloat jarg1_);
  public final static native void BufferedPortImageRgbFloat_promiseType(long jarg1, BufferedPortImageRgbFloat jarg1_, long jarg2);
  public final static native void BufferedPortImageRgbFloat_setInputMode(long jarg1, BufferedPortImageRgbFloat jarg1_, boolean jarg2);
  public final static native void BufferedPortImageRgbFloat_setOutputMode(long jarg1, BufferedPortImageRgbFloat jarg1_, boolean jarg2);
  public final static native void BufferedPortImageRgbFloat_setRpcMode(long jarg1, BufferedPortImageRgbFloat jarg1_, boolean jarg2);
  public final static native long BufferedPortImageRgbFloat_acquireProperties(long jarg1, BufferedPortImageRgbFloat jarg1_, boolean jarg2);
  public final static native void BufferedPortImageRgbFloat_releaseProperties(long jarg1, BufferedPortImageRgbFloat jarg1_, long jarg2, Property jarg2_);
  public final static native void BufferedPortImageRgbFloat_includeNodeInName(long jarg1, BufferedPortImageRgbFloat jarg1_, boolean jarg2);
  public final static native boolean BufferedPortImageRgbFloat_setCallbackLock(long jarg1, BufferedPortImageRgbFloat jarg1_, long jarg2);
  public final static native boolean BufferedPortImageRgbFloat_removeCallbackLock(long jarg1, BufferedPortImageRgbFloat jarg1_);
  public final static native boolean BufferedPortImageRgbFloat_lockCallback(long jarg1, BufferedPortImageRgbFloat jarg1_);
  public final static native boolean BufferedPortImageRgbFloat_tryLockCallback(long jarg1, BufferedPortImageRgbFloat jarg1_);
  public final static native void BufferedPortImageRgbFloat_unlockCallback(long jarg1, BufferedPortImageRgbFloat jarg1_);
  public final static native long new_charArray(int jarg1);
  public final static native void delete_charArray(long jarg1);
  public final static native short charArray_getitem(long jarg1, charArray jarg1_, int jarg2);
  public final static native void charArray_setitem(long jarg1, charArray jarg1_, int jarg2, short jarg3);
  public final static native long charArray_cast(long jarg1, charArray jarg1_);
  public final static native long charArray_frompointer(long jarg1);
  public final static native long Portable_SWIGUpcast(long jarg1);
  public final static native long Value_SWIGUpcast(long jarg1);
  public final static native long UnbufferedContactable_SWIGUpcast(long jarg1);
  public final static native long Port_SWIGUpcast(long jarg1);
  public final static native long AbstractContactable_SWIGUpcast(long jarg1);
  public final static native long Network_SWIGUpcast(long jarg1);
  public final static native long PortablePairBase_SWIGUpcast(long jarg1);
  public final static native long Property_SWIGUpcast(long jarg1);
  public final static native long Bottle_SWIGUpcast(long jarg1);
  public final static native long PortReaderBufferBase_SWIGUpcast(long jarg1);
  public final static native long PortWriterWrapper_SWIGUpcast(long jarg1);
  public final static native long RateThreadWrapper_SWIGUpcast(long jarg1);
  public final static native long Stamp_SWIGUpcast(long jarg1);
  public final static native long ResourceFinder_SWIGUpcast(long jarg1);
  public final static native long RpcServer_SWIGUpcast(long jarg1);
  public final static native long RpcClient_SWIGUpcast(long jarg1);
  public final static native long BufferedPortProperty_SWIGUpcast(long jarg1);
  public final static native long BufferedPortBottle_SWIGUpcast(long jarg1);
  public final static native long Image_SWIGUpcast(long jarg1);
  public final static native long FlexImage_SWIGUpcast(long jarg1);
  public final static native long Sound_SWIGUpcast(long jarg1);
  public final static native long VectorBase_SWIGUpcast(long jarg1);
  public final static native long Vector_SWIGUpcast(long jarg1);
  public final static native long DeviceDriver_SWIGUpcast(long jarg1);
  public final static native long DeviceResponder_SWIGUpcast(long jarg1);
  public final static native long PolyDriver_SWIGUpcast(long jarg1);
  public final static native long StubDriverCreator_SWIGUpcast(long jarg1);
  public final static native long IFrameGrabberControlsDC1394_SWIGUpcast(long jarg1);
  public final static native long ImageRgb_SWIGUpcast(long jarg1);
  public final static native long BufferedPortImageRgb_SWIGUpcast(long jarg1);
  public final static native long ImageRgba_SWIGUpcast(long jarg1);
  public final static native long BufferedPortImageRgba_SWIGUpcast(long jarg1);
  public final static native long ImageMono_SWIGUpcast(long jarg1);
  public final static native long BufferedPortImageMono_SWIGUpcast(long jarg1);
  public final static native long ImageMono16_SWIGUpcast(long jarg1);
  public final static native long BufferedPortImageMono16_SWIGUpcast(long jarg1);
  public final static native long ImageInt_SWIGUpcast(long jarg1);
  public final static native long BufferedPortImageInt_SWIGUpcast(long jarg1);
  public final static native long BufferedPortSound_SWIGUpcast(long jarg1);
  public final static native long ImageFloat_SWIGUpcast(long jarg1);
  public final static native long BufferedPortImageFloat_SWIGUpcast(long jarg1);
  public final static native long ImageRgbFloat_SWIGUpcast(long jarg1);
  public final static native long BufferedPortImageRgbFloat_SWIGUpcast(long jarg1);

  public static boolean SwigDirector_PortReader_read(PortReader self, long connection) {
    return self.read(new ConnectionReader(connection, false));
  }
  public static long SwigDirector_PortReader_getReadType(PortReader self) {
    return SWIGTYPE_p_Type.getCPtr(self.getReadType());
  }
  public static void SwigDirector_Thread_run(Thread self) {
    self.run();
  }
  public static void SwigDirector_Thread_onStop(Thread self) {
    self.onStop();
  }
  public static void SwigDirector_Thread_beforeStart(Thread self) {
    self.beforeStart();
  }
  public static void SwigDirector_Thread_afterStart(Thread self, boolean success) {
    self.afterStart(success);
  }
  public static boolean SwigDirector_Thread_threadInit(Thread self) {
    return self.threadInit();
  }
  public static void SwigDirector_Thread_threadRelease(Thread self) {
    self.threadRelease();
  }
  public static double SwigDirector_RFModule_getPeriod(RFModule self) {
    return self.getPeriod();
  }
  public static boolean SwigDirector_RFModule_updateModule(RFModule self) {
    return self.updateModule();
  }
  public static int SwigDirector_RFModule_runModule__SWIG_0(RFModule self) {
    return self.runModule();
  }
  public static int SwigDirector_RFModule_runModule__SWIG_1(RFModule self, long rf) {
    return self.runModule(new ResourceFinder(rf, false));
  }
  public static boolean SwigDirector_RFModule_configure(RFModule self, long rf) {
    return self.configure(new ResourceFinder(rf, false));
  }
  public static boolean SwigDirector_RFModule_respond(RFModule self, long command, long reply) {
    return self.respond(new Bottle(command, false), new Bottle(reply, false));
  }
  public static boolean SwigDirector_RFModule_attach(RFModule self, long source) {
    return self.attach(new Port(source, false));
  }
  public static boolean SwigDirector_RFModule_attach_rpc_server(RFModule self, long source) {
    return self.attach_rpc_server(new RpcServer(source, false));
  }
  public static boolean SwigDirector_RFModule_interruptModule(RFModule self) {
    return self.interruptModule();
  }
  public static boolean SwigDirector_RFModule_close(RFModule self) {
    return self.close();
  }
  public static void SwigDirector_PropertyCallback_onRead__SWIG_0(PropertyCallback self, long datum) {
    self.onRead(new Property(datum, false));
  }
  public static void SwigDirector_PropertyCallback_onRead__SWIG_1(PropertyCallback self, long datum, long reader) {
    self.onRead(new Property(datum, false), new TypedReaderProperty(reader, false));
  }
  public static void SwigDirector_BottleCallback_onRead__SWIG_0(BottleCallback self, long datum) {
    self.onRead(new Bottle(datum, false));
  }
  public static void SwigDirector_BottleCallback_onRead__SWIG_1(BottleCallback self, long datum, long reader) {
    self.onRead(new Bottle(datum, false), new TypedReaderBottle(reader, false));
  }

  private final static native void swig_module_init();
  static {
    swig_module_init();
  }
}
