/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package yarp;

public class BufferedPortSound extends Contactable {
  private long swigCPtr;

  protected BufferedPortSound(long cPtr, boolean cMemoryOwn) {
    super(yarpJNI.BufferedPortSound_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(BufferedPortSound obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        yarpJNI.delete_BufferedPortSound(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public BufferedPortSound() {
    this(yarpJNI.new_BufferedPortSound__SWIG_0(), true);
  }

  public BufferedPortSound(Port port) {
    this(yarpJNI.new_BufferedPortSound__SWIG_1(Port.getCPtr(port), port), true);
  }

  public boolean addOutput(String name) {
    return yarpJNI.BufferedPortSound_addOutput__SWIG_0(swigCPtr, this, name);
  }

  public boolean addOutput(String name, String carrier) {
    return yarpJNI.BufferedPortSound_addOutput__SWIG_1(swigCPtr, this, name, carrier);
  }

  public boolean addOutput(Contact contact) {
    return yarpJNI.BufferedPortSound_addOutput__SWIG_2(swigCPtr, this, Contact.getCPtr(contact), contact);
  }

  public void close() {
    yarpJNI.BufferedPortSound_close(swigCPtr, this);
  }

  public void interrupt() {
    yarpJNI.BufferedPortSound_interrupt(swigCPtr, this);
  }

  public void resume() {
    yarpJNI.BufferedPortSound_resume(swigCPtr, this);
  }

  public int getPendingReads() {
    return yarpJNI.BufferedPortSound_getPendingReads(swigCPtr, this);
  }

  public Contact where() {
    return new Contact(yarpJNI.BufferedPortSound_where(swigCPtr, this), true);
  }

  public String getName() {
    return yarpJNI.BufferedPortSound_getName(swigCPtr, this);
  }

  public Sound prepare() {
    return new Sound(yarpJNI.BufferedPortSound_prepare(swigCPtr, this), false);
  }

  public boolean unprepare() {
    return yarpJNI.BufferedPortSound_unprepare(swigCPtr, this);
  }

  public void write(boolean forceStrict) {
    yarpJNI.BufferedPortSound_write__SWIG_0(swigCPtr, this, forceStrict);
  }

  public void write() {
    yarpJNI.BufferedPortSound_write__SWIG_1(swigCPtr, this);
  }

  public void writeStrict() {
    yarpJNI.BufferedPortSound_writeStrict(swigCPtr, this);
  }

  public void waitForWrite() {
    yarpJNI.BufferedPortSound_waitForWrite(swigCPtr, this);
  }

  public void setStrict(boolean strict) {
    yarpJNI.BufferedPortSound_setStrict__SWIG_0(swigCPtr, this, strict);
  }

  public void setStrict() {
    yarpJNI.BufferedPortSound_setStrict__SWIG_1(swigCPtr, this);
  }

  public Sound read(boolean shouldWait) {
    long cPtr = yarpJNI.BufferedPortSound_read__SWIG_0(swigCPtr, this, shouldWait);
    return (cPtr == 0) ? null : new Sound(cPtr, false);
  }

  public Sound read() {
    long cPtr = yarpJNI.BufferedPortSound_read__SWIG_1(swigCPtr, this);
    return (cPtr == 0) ? null : new Sound(cPtr, false);
  }

  public Sound lastRead() {
    long cPtr = yarpJNI.BufferedPortSound_lastRead(swigCPtr, this);
    return (cPtr == 0) ? null : new Sound(cPtr, false);
  }

  public boolean isClosed() {
    return yarpJNI.BufferedPortSound_isClosed(swigCPtr, this);
  }

  public void setReplier(PortReader reader) {
    yarpJNI.BufferedPortSound_setReplier(swigCPtr, this, PortReader.getCPtr(reader), reader);
  }

  public void setReader(PortReader reader) {
    yarpJNI.BufferedPortSound_setReader(swigCPtr, this, PortReader.getCPtr(reader), reader);
  }

  public void setAdminReader(PortReader reader) {
    yarpJNI.BufferedPortSound_setAdminReader(swigCPtr, this, PortReader.getCPtr(reader), reader);
  }

  public void onRead(Sound datum) {
    yarpJNI.BufferedPortSound_onRead(swigCPtr, this, Sound.getCPtr(datum), datum);
  }

  public void useCallback(SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__Sound_t callback) {
    yarpJNI.BufferedPortSound_useCallback__SWIG_0(swigCPtr, this, SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__Sound_t.getCPtr(callback));
  }

  public void useCallback() {
    yarpJNI.BufferedPortSound_useCallback__SWIG_1(swigCPtr, this);
  }

  public void disableCallback() {
    yarpJNI.BufferedPortSound_disableCallback(swigCPtr, this);
  }

  public boolean setEnvelope(PortWriter envelope) {
    return yarpJNI.BufferedPortSound_setEnvelope(swigCPtr, this, PortWriter.getCPtr(envelope), envelope);
  }

  public boolean getEnvelope(PortReader envelope) {
    return yarpJNI.BufferedPortSound_getEnvelope(swigCPtr, this, PortReader.getCPtr(envelope), envelope);
  }

  public int getInputCount() {
    return yarpJNI.BufferedPortSound_getInputCount(swigCPtr, this);
  }

  public int getOutputCount() {
    return yarpJNI.BufferedPortSound_getOutputCount(swigCPtr, this);
  }

  public boolean isWriting() {
    return yarpJNI.BufferedPortSound_isWriting(swigCPtr, this);
  }

  public void getReport(PortReport reporter) {
    yarpJNI.BufferedPortSound_getReport(swigCPtr, this, PortReport.getCPtr(reporter), reporter);
  }

  public void setReporter(PortReport reporter) {
    yarpJNI.BufferedPortSound_setReporter(swigCPtr, this, PortReport.getCPtr(reporter), reporter);
  }

  public SWIGTYPE_p_void acquire() {
    long cPtr = yarpJNI.BufferedPortSound_acquire(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public void release(SWIGTYPE_p_void handle) {
    yarpJNI.BufferedPortSound_release(swigCPtr, this, SWIGTYPE_p_void.getCPtr(handle));
  }

  public void setTargetPeriod(double period) {
    yarpJNI.BufferedPortSound_setTargetPeriod(swigCPtr, this, period);
  }

  public SWIGTYPE_p_Type getType() {
    return new SWIGTYPE_p_Type(yarpJNI.BufferedPortSound_getType(swigCPtr, this), true);
  }

  public void promiseType(SWIGTYPE_p_Type typ) {
    yarpJNI.BufferedPortSound_promiseType(swigCPtr, this, SWIGTYPE_p_Type.getCPtr(typ));
  }

  public void setInputMode(boolean expectInput) {
    yarpJNI.BufferedPortSound_setInputMode(swigCPtr, this, expectInput);
  }

  public void setOutputMode(boolean expectOutput) {
    yarpJNI.BufferedPortSound_setOutputMode(swigCPtr, this, expectOutput);
  }

  public void setRpcMode(boolean expectRpc) {
    yarpJNI.BufferedPortSound_setRpcMode(swigCPtr, this, expectRpc);
  }

  public Property acquireProperties(boolean readOnly) {
    long cPtr = yarpJNI.BufferedPortSound_acquireProperties(swigCPtr, this, readOnly);
    return (cPtr == 0) ? null : new Property(cPtr, false);
  }

  public void releaseProperties(Property prop) {
    yarpJNI.BufferedPortSound_releaseProperties(swigCPtr, this, Property.getCPtr(prop), prop);
  }

  public void includeNodeInName(boolean flag) {
    yarpJNI.BufferedPortSound_includeNodeInName(swigCPtr, this, flag);
  }

  public boolean setCallbackLock(SWIGTYPE_p_yarp__os__Mutex mutex) {
    return yarpJNI.BufferedPortSound_setCallbackLock(swigCPtr, this, SWIGTYPE_p_yarp__os__Mutex.getCPtr(mutex));
  }

  public boolean removeCallbackLock() {
    return yarpJNI.BufferedPortSound_removeCallbackLock(swigCPtr, this);
  }

  public boolean lockCallback() {
    return yarpJNI.BufferedPortSound_lockCallback(swigCPtr, this);
  }

  public boolean tryLockCallback() {
    return yarpJNI.BufferedPortSound_tryLockCallback(swigCPtr, this);
  }

  public void unlockCallback() {
    yarpJNI.BufferedPortSound_unlockCallback(swigCPtr, this);
  }

}
